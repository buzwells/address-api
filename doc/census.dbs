<?xml version="1.0" encoding="UTF-8" ?>
<project name="PostgreSQL" id="Project_18e6da3a" html="y" template="Default" database="PostgreSQL" >
	<schema name="pg_catalog" catalogname="census" schemaname="pg_catalog" >
		<function name="RI_FKey_cascade_del" id="Function_5f8d4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_cascade_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_cascade_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE CASCADE]]></comment>
		</function>
		<function name="RI_FKey_cascade_upd" id="Function_e99d80a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_cascade_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_cascade_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE CASCADE]]></comment>
		</function>
		<function name="RI_FKey_check_ins" id="Function_af268bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_check_ins"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_check_ins$function$
]]></string>
			<comment><![CDATA[referential integrity FOREIGN KEY ... REFERENCES]]></comment>
		</function>
		<function name="RI_FKey_check_upd" id="Function_25e5bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_check_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_check_upd$function$
]]></string>
			<comment><![CDATA[referential integrity FOREIGN KEY ... REFERENCES]]></comment>
		</function>
		<function name="RI_FKey_noaction_del" id="Function_2c31469f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_noaction_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_noaction_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE NO ACTION]]></comment>
		</function>
		<function name="RI_FKey_noaction_upd" id="Function_159a1983" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_noaction_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_noaction_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE NO ACTION]]></comment>
		</function>
		<function name="RI_FKey_restrict_del" id="Function_2acf47ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_restrict_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_restrict_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE RESTRICT]]></comment>
		</function>
		<function name="RI_FKey_restrict_upd" id="Function_1bc69ec1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_restrict_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_restrict_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE RESTRICT]]></comment>
		</function>
		<function name="RI_FKey_setdefault_del" id="Function_1255b735" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setdefault_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setdefault_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE SET DEFAULT]]></comment>
		</function>
		<function name="RI_FKey_setdefault_upd" id="Function_1393eafd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setdefault_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setdefault_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE SET DEFAULT]]></comment>
		</function>
		<function name="RI_FKey_setnull_del" id="Function_22162bb8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setnull_del"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setnull_del$function$
]]></string>
			<comment><![CDATA[referential integrity ON DELETE SET NULL]]></comment>
		</function>
		<function name="RI_FKey_setnull_upd" id="Function_3356a1df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."RI_FKey_setnull_upd"()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$RI_FKey_setnull_upd$function$
]]></string>
			<comment><![CDATA[referential integrity ON UPDATE SET NULL]]></comment>
		</function>
		<function name="abbrev" id="Function_c081a66" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abbrev(cidr)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_abbrev$function$
CREATE OR REPLACE FUNCTION pg_catalog.abbrev(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_abbrev$function$
]]></string>
			<comment><![CDATA[abbreviated display of inet value]]></comment>
		</function>
		<function name="abbrev_001" id="Function_cbd3972" isSystem="false" >
			<comment><![CDATA[abbreviated display of cidr value]]></comment>
		</function>
		<function name="abs" id="Function_1d4b163f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8abs$function$
CREATE OR REPLACE FUNCTION pg_catalog.abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_001" id="Function_10f7db41" isSystem="false" >
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_002" id="Function_337b8d31" isSystem="false" >
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_003" id="Function_37596d86" isSystem="false" >
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_004" id="Function_131e97e9" isSystem="false" >
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abs_005" id="Function_33bc51cc" isSystem="false" >
			<comment><![CDATA[absolute value]]></comment>
		</function>
		<function name="abstime" id="Function_d1bf508" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp without time zone)
 RETURNS abstime
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_abstime$function$
CREATE OR REPLACE FUNCTION pg_catalog.abstime(timestamp with time zone)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_abstime$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to abstime]]></comment>
		</function>
		<function name="abstime_001" id="Function_15ba00a9" isSystem="false" >
			<comment><![CDATA[convert timestamp to abstime]]></comment>
		</function>
		<function name="abstimeeq" id="Function_2968a85d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimeeq(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimeeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="abstimege" id="Function_181d78b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimege(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="abstimegt" id="Function_2c8c9455" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimegt(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="abstimein" id="Function_10d84c22" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="abstimele" id="Function_2aa3beef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimele(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="abstimelt" id="Function_27d24e42" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimelt(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="abstimene" id="Function_878f7cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimene(abstime, abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$abstimene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="abstimeout" id="Function_125b6135" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="abstimerecv" id="Function_1f18e982" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimerecv(internal)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstimerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="abstimesend" id="Function_2552d628" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.abstimesend(abstime)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstimesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="aclcontains" id="Function_17df9ddd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclcontains(aclitem[], aclitem)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclcontains$function$
]]></string>
			<comment><![CDATA[contains]]></comment>
		</function>
		<function name="acldefault" id="Function_1b5202f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.acldefault("char", oid)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$acldefault_sql$function$
]]></string>
			<comment><![CDATA[TODO]]></comment>
		</function>
		<function name="aclexplode" id="Function_26c6b014" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclexplode(acl aclitem[], OUT grantor oid, OUT grantee oid, OUT privilege_type text, OUT is_grantable boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT ROWS 10
AS $function$aclexplode$function$
]]></string>
			<comment><![CDATA[convert ACL item array to table, for use by information schema]]></comment>
		</function>
		<function name="aclinsert" id="Function_2a894cd9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclinsert(aclitem[], aclitem)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclinsert$function$
]]></string>
			<comment><![CDATA[add/update ACL item]]></comment>
		</function>
		<function name="aclitemeq" id="Function_2506c84a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclitemeq(aclitem, aclitem)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclitem_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="aclitemin" id="Function_2c116f54" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="aclitemout" id="Function_14fc7b39" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="aclremove" id="Function_30fbd481" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.aclremove(aclitem[], aclitem)
 RETURNS aclitem[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$aclremove$function$
]]></string>
			<comment><![CDATA[remove ACL item]]></comment>
		</function>
		<function name="acos" id="Function_7007992" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.acos(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dacos$function$
]]></string>
			<comment><![CDATA[arccosine]]></comment>
		</function>
		<function name="age" id="Function_1c1a2696" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.age(xid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$xid_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp without time zone), $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone)
 RETURNS interval
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select pg_catalog.age(cast(current_date as timestamp with time zone), $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_age$function$
CREATE OR REPLACE FUNCTION pg_catalog.age(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_age$function$
]]></string>
			<comment><![CDATA[age of a transaction ID, in transactions before current transaction]]></comment>
		</function>
		<function name="age_001" id="Function_221c1ff3" isSystem="false" >
			<comment><![CDATA[date difference preserving months and years]]></comment>
		</function>
		<function name="age_002" id="Function_28e6645b" isSystem="false" >
			<comment><![CDATA[date difference from today preserving months and years]]></comment>
		</function>
		<function name="age_003" id="Function_1d71384f" isSystem="false" >
			<comment><![CDATA[date difference preserving months and years]]></comment>
		</function>
		<function name="age_004" id="Function_aba2d5f" isSystem="false" >
			<comment><![CDATA[date difference from today preserving months and years]]></comment>
		</function>
		<function name="any_in" id="Function_87c1439" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="any_out" id="Function_3634d96c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_in" id="Function_b11db22" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_out" id="Function_4664b93" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_recv" id="Function_314bf2b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_recv(internal)
 RETURNS anyarray
 LANGUAGE internal
 STABLE STRICT
AS $function$anyarray_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyarray_send" id="Function_3845a747" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anyarray_send(anyarray)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$anyarray_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyelement_in" id="Function_22d1fd3b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyelement_out" id="Function_15fa729e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyenum_in" id="Function_10552093" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyenum_out" id="Function_3a41fb33" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anynonarray_in" id="Function_10c6994a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anynonarray_out" id="Function_39a7f389" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyrange_in" id="Function_22922dbc" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anyrange_out" id="Function_3048f7d7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="anytextcat" id="Function_91c7ee8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.anytextcat(anynonarray, text)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select $1::pg_catalog.text || $2$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="area" id="Function_11d766af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.area(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_area$function$
CREATE OR REPLACE FUNCTION pg_catalog.area(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_area$function$
]]></string>
			<comment><![CDATA[area of circle]]></comment>
		</function>
		<function name="area_001" id="Function_893d43a" isSystem="false" >
			<comment><![CDATA[box area]]></comment>
		</function>
		<function name="area_002" id="Function_1de47ab2" isSystem="false" >
			<comment><![CDATA[area of a closed path]]></comment>
		</function>
		<function name="areajoinsel" id="Function_39ae0d1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.areajoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$areajoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for area-comparison operators]]></comment>
		</function>
		<function name="areasel" id="Function_1aa627c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.areasel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$areasel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for area-comparison operators]]></comment>
		</function>
		<function name="array_agg" id="Function_2a642d43" isSystem="false" >
			<comment><![CDATA[concatenate aggregate input into an array]]></comment>
		</function>
		<function name="array_agg_finalfn" id="Function_2da3e312" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_finalfn(internal, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="array_agg_transfn" id="Function_39bc5715" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_agg_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$array_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="array_append" id="Function_1f217ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_append(anyarray, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_push$function$
]]></string>
			<comment><![CDATA[append element onto end of array]]></comment>
		</function>
		<function name="array_cat" id="Function_1e6778d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_cat(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_cat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="array_dims" id="Function_326a5207" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_dims(anyarray)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_dims$function$
]]></string>
			<comment><![CDATA[array dimensions]]></comment>
		</function>
		<function name="array_eq" id="Function_176a2bb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_eq(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="array_fill" id="Function_2b613505" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_fill$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_fill(anyelement, integer[], integer[])
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_fill_with_lower_bounds$function$
]]></string>
			<comment><![CDATA[array constructor with value]]></comment>
		</function>
		<function name="array_fill_001" id="Function_14ec9deb" isSystem="false" >
			<comment><![CDATA[array constructor with value]]></comment>
		</function>
		<function name="array_ge" id="Function_33ca2c4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ge(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="array_gt" id="Function_d2efbe2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_gt(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="array_in" id="Function_2783c653" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_larger" id="Function_1daf194" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_larger(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="array_le" id="Function_1d207fcf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_le(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="array_length" id="Function_1fff34e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_length(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_length$function$
]]></string>
			<comment><![CDATA[array length]]></comment>
		</function>
		<function name="array_lower" id="Function_1b3ab457" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_lower(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_lower$function$
]]></string>
			<comment><![CDATA[array lower dimension]]></comment>
		</function>
		<function name="array_lt" id="Function_397a5eb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_lt(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="array_ndims" id="Function_3949a7f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ndims(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_ndims$function$
]]></string>
			<comment><![CDATA[number of array dimensions]]></comment>
		</function>
		<function name="array_ne" id="Function_2cb2d4f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_ne(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="array_out" id="Function_3fc7438" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_prepend" id="Function_48a27ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_prepend(anyelement, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_push$function$
]]></string>
			<comment><![CDATA[prepend element onto front of array]]></comment>
		</function>
		<function name="array_recv" id="Function_27a57bdb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_recv(internal, oid, integer)
 RETURNS anyarray
 LANGUAGE internal
 STABLE STRICT
AS $function$array_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_remove" id="Function_23f45495" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_remove(anyarray, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_remove$function$
]]></string>
			<comment><![CDATA[remove any occurrences of an element from an array]]></comment>
		</function>
		<function name="array_replace" id="Function_a100921" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_replace(anyarray, anyelement, anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$array_replace$function$
]]></string>
			<comment><![CDATA[replace any occurrences of an element in an array]]></comment>
		</function>
		<function name="array_send" id="Function_88be14e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_send(anyarray)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$array_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="array_smaller" id="Function_1ca86693" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_smaller(anyarray, anyarray)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="array_to_json" id="Function_1289d295" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$array_to_json$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_to_json(anyarray, boolean)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$array_to_json_pretty$function$
]]></string>
			<comment><![CDATA[map array to json]]></comment>
		</function>
		<function name="array_to_json_001" id="Function_12b89ae2" isSystem="false" >
			<comment><![CDATA[map array to json with optional pretty printing]]></comment>
		</function>
		<function name="array_to_string" id="Function_15158e72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$array_to_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.array_to_string(anyarray, text, text)
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$array_to_text_null$function$
]]></string>
			<comment><![CDATA[concatenate array elements, using delimiter and null string, into text]]></comment>
		</function>
		<function name="array_to_string_001" id="Function_15eb33b4" isSystem="false" >
			<comment><![CDATA[concatenate array elements, using delimiter, into text]]></comment>
		</function>
		<function name="array_typanalyze" id="Function_1818c7aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$array_typanalyze$function$
]]></string>
			<comment><![CDATA[array typanalyze]]></comment>
		</function>
		<function name="array_upper" id="Function_28d05d07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.array_upper(anyarray, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_upper$function$
]]></string>
			<comment><![CDATA[array upper dimension]]></comment>
		</function>
		<function name="arraycontained" id="Function_1f074073" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontained(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$arraycontained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="arraycontains" id="Function_388cd505" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontains(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$arraycontains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="arraycontjoinsel" id="Function_32f8a573" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$arraycontjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for array-containment operators]]></comment>
		</function>
		<function name="arraycontsel" id="Function_33c4763b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arraycontsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$arraycontsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for array-containment operators]]></comment>
		</function>
		<function name="arrayoverlap" id="Function_25a72934" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.arrayoverlap(anyarray, anyarray)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$arrayoverlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="ascii" id="Function_3568f6c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ascii$function$
]]></string>
			<comment><![CDATA[convert first char to int4]]></comment>
		</function>
		<function name="ascii_to_mic" id="Function_31e35fbe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/ascii_and_mic', $function$ascii_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for SQL_ASCII to MULE_INTERNAL]]></comment>
		</function>
		<function name="ascii_to_utf8" id="Function_2a512393" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ascii_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_ascii', $function$ascii_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SQL_ASCII to UTF8]]></comment>
		</function>
		<function name="asin" id="Function_1b6966b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.asin(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dasin$function$
]]></string>
			<comment><![CDATA[arcsine]]></comment>
		</function>
		<function name="atan" id="Function_1a651e5b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atan(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datan$function$
]]></string>
			<comment><![CDATA[arctangent]]></comment>
		</function>
		<function name="atan2" id="Function_24e1073" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.atan2(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datan2$function$
]]></string>
			<comment><![CDATA[arctangent, two arguments]]></comment>
		</function>
		<function name="avg" id="Function_392ab2b5" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all bigint values]]></comment>
		</function>
		<function name="avg_001" id="Function_115b524e" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all integer values]]></comment>
		</function>
		<function name="avg_002" id="Function_17b4dcaf" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all smallint values]]></comment>
		</function>
		<function name="avg_003" id="Function_2f8a6cc0" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as numeric of all numeric values]]></comment>
		</function>
		<function name="avg_004" id="Function_80ae067" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as float8 of all float4 values]]></comment>
		</function>
		<function name="avg_005" id="Function_1a2031f8" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as float8 of all float8 values]]></comment>
		</function>
		<function name="avg_006" id="Function_25684329" isSystem="false" >
			<comment><![CDATA[the average (arithmetic mean) as interval of all interval values]]></comment>
		</function>
		<function name="big5_to_euc_tw" id="Function_1a481dfc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$big5_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to EUC_TW]]></comment>
		</function>
		<function name="big5_to_mic" id="Function_2ca4285d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$big5_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to MULE_INTERNAL]]></comment>
		</function>
		<function name="big5_to_utf8" id="Function_5c77f8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.big5_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_big5', $function$big5_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for BIG5 to UTF8]]></comment>
		</function>
		<function name="bit" id="Function_56d3e7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."bit"(bigint, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitfromint8$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitfromint4$function$
CREATE OR REPLACE FUNCTION pg_catalog."bit"(bit, integer, boolean)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit$function$
]]></string>
			<comment><![CDATA[convert int4 to bitstring]]></comment>
		</function>
		<function name="bit_001" id="Function_7e4a8d4" isSystem="false" >
			<comment><![CDATA[adjust bit() to typmod length]]></comment>
		</function>
		<function name="bit_002" id="Function_2f3cc907" isSystem="false" >
			<comment><![CDATA[convert int8 to bitstring]]></comment>
		</function>
		<function name="bit_and" id="Function_107da427" isSystem="false" >
			<comment><![CDATA[bitwise-and smallint aggregate]]></comment>
		</function>
		<function name="bit_and_001" id="Function_946f853" isSystem="false" >
			<comment><![CDATA[bitwise-and integer aggregate]]></comment>
		</function>
		<function name="bit_and_002" id="Function_c8ae102" isSystem="false" >
			<comment><![CDATA[bitwise-and bigint aggregate]]></comment>
		</function>
		<function name="bit_and_003" id="Function_ad61b38" isSystem="false" >
			<comment><![CDATA[bitwise-and bit aggregate]]></comment>
		</function>
		<function name="bit_in" id="Function_3b173976" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bit_length" id="Function_6a6d4b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bytea)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(text)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.octet_length($1) * 8$function$
CREATE OR REPLACE FUNCTION pg_catalog.bit_length(bit)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.length($1)$function$
]]></string>
			<comment><![CDATA[length in bits]]></comment>
		</function>
		<function name="bit_length_001" id="Function_1c284156" isSystem="false" >
			<comment><![CDATA[length in bits]]></comment>
		</function>
		<function name="bit_length_002" id="Function_2847b557" isSystem="false" >
			<comment><![CDATA[length in bits]]></comment>
		</function>
		<function name="bit_or" id="Function_2592dfd7" isSystem="false" >
			<comment><![CDATA[bitwise-or smallint aggregate]]></comment>
		</function>
		<function name="bit_or_001" id="Function_1e3a16e8" isSystem="false" >
			<comment><![CDATA[bitwise-or integer aggregate]]></comment>
		</function>
		<function name="bit_or_002" id="Function_6b12585" isSystem="false" >
			<comment><![CDATA[bitwise-or bigint aggregate]]></comment>
		</function>
		<function name="bit_or_003" id="Function_25d3e625" isSystem="false" >
			<comment><![CDATA[bitwise-or bit aggregate]]></comment>
		</function>
		<function name="bit_out" id="Function_1aa51900" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bit_recv" id="Function_a59f032" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_recv(internal, oid, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bit_send" id="Function_2eef33c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bit_send(bit)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bitand" id="Function_33dfa879" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitand(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="bitcat" id="Function_17db058b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitcat(bit varying, bit varying)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitcat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="bitcmp" id="Function_22c7a92a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitcmp(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="biteq" id="Function_be93940" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.biteq(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$biteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="bitge" id="Function_2d089deb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitge(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="bitgt" id="Function_9b897be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitgt(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="bitle" id="Function_1d182fc2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitle(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="bitlt" id="Function_321a3eef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitlt(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="bitne" id="Function_29ff3a18" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitne(bit, bit)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="bitnot" id="Function_3a01b957" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitnot(bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitnot$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="bitor" id="Function_25190728" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitor(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bit_or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="bitshiftleft" id="Function_22c100ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitshiftleft(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitshiftleft$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="bitshiftright" id="Function_6e14664" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitshiftright(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitshiftright$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="bittypmodin" id="Function_86368c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bittypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="bittypmodout" id="Function_2570599c" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="bitxor" id="Function_26491def" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bitxor(bit, bit)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitxor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="bool" id="Function_34098e5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool(integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_bool$function$
]]></string>
			<comment><![CDATA[convert int4 to boolean]]></comment>
		</function>
		<function name="bool_accum" id="Function_1b09ae63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_accum(internal, boolean)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$bool_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="bool_accum_inv" id="Function_edec330" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_accum_inv(internal, boolean)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$bool_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="bool_alltrue" id="Function_f8b1f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_alltrue(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bool_alltrue$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="bool_and" id="Function_20f3f829" isSystem="false" >
			<comment><![CDATA[boolean-and aggregate]]></comment>
		</function>
		<function name="bool_anytrue" id="Function_19300fd3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bool_anytrue(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bool_anytrue$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="bool_or" id="Function_10ed6fa9" isSystem="false" >
			<comment><![CDATA[boolean-or aggregate]]></comment>
		</function>
		<function name="booland_statefunc" id="Function_36891c80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.booland_statefunc(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$booland_statefunc$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="booleq" id="Function_1fdf6ca4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.booleq(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$booleq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="boolge" id="Function_119313e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolge(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="boolgt" id="Function_2bc3911f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolgt(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="boolin" id="Function_10914332" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="boolle" id="Function_144cf7aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolle(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="boollt" id="Function_1e0df95" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boollt(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boollt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="boolne" id="Function_5e40a00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolne(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$boolne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="boolor_statefunc" id="Function_1df14760" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolor_statefunc(boolean, boolean)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolor_statefunc$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="boolout" id="Function_264b39fc" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="boolrecv" id="Function_3b182142" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolrecv(internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="boolsend" id="Function_2da37406" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.boolsend(boolean)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$boolsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box" id="Function_21af6d7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box(polygon)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(circle)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_box$function$
CREATE OR REPLACE FUNCTION pg_catalog.box(point, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$points_box$function$
]]></string>
			<comment><![CDATA[convert points to box]]></comment>
		</function>
		<function name="box_001" id="Function_20f4645c" isSystem="false" >
			<comment><![CDATA[convert polygon to bounding box]]></comment>
		</function>
		<function name="box_002" id="Function_35476d1b" isSystem="false" >
			<comment><![CDATA[convert circle to box]]></comment>
		</function>
		<function name="box_above" id="Function_18cee2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_above(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</function>
		<function name="box_above_eq" id="Function_21fd79a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_above_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_above_eq$function$
]]></string>
			<comment><![CDATA[implementation of >^ operator]]></comment>
		</function>
		<function name="box_add" id="Function_55ca86" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_add(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="box_below" id="Function_2c3be636" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_below(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</function>
		<function name="box_below_eq" id="Function_12c0eb4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_below_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_below_eq$function$
]]></string>
			<comment><![CDATA[implementation of <^ operator]]></comment>
		</function>
		<function name="box_center" id="Function_16619750" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="box_contain" id="Function_fa5e5f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contain(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="box_contain_pt" id="Function_2ea0494e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contain_pt(box, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="box_contained" id="Function_35a8d9a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_contained(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="box_distance" id="Function_1596fa96" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_distance(box, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="box_div" id="Function_32205ce6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_div(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="box_eq" id="Function_e87857c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_eq(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="box_ge" id="Function_17c53b92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_ge(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="box_gt" id="Function_23b4dc4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_gt(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="box_in" id="Function_1a9a646d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_intersect" id="Function_218fdee1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_intersect(box, box)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_intersect$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="box_le" id="Function_9be5496" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_le(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="box_left" id="Function_24fd4048" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_left(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="box_lt" id="Function_30973445" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_lt(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="box_mul" id="Function_1914e31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_mul(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="box_out" id="Function_30b6af82" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_overabove" id="Function_2f425ddd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overabove(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</function>
		<function name="box_overbelow" id="Function_2b661c60" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overbelow(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</function>
		<function name="box_overlap" id="Function_10edc5c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overlap(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="box_overleft" id="Function_37d72b62" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overleft(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="box_overright" id="Function_2de9e967" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_overright(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="box_recv" id="Function_31a7ffea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_recv(internal)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_right" id="Function_3af2c33a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_right(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="box_same" id="Function_a2bf132" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_same(box, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="box_send" id="Function_3350a749" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_send(box)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="box_sub" id="Function_142765aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.box_sub(box, point)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="bpchar" id="Function_34d7b5d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar("char")
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$char_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(name)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_bpchar$function$
CREATE OR REPLACE FUNCTION pg_catalog.bpchar(character, integer, boolean)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar$function$
]]></string>
			<comment><![CDATA[convert name to char(n)]]></comment>
		</function>
		<function name="bpchar_001" id="Function_347e0d61" isSystem="false" >
			<comment><![CDATA[adjust char() to typmod length]]></comment>
		</function>
		<function name="bpchar_002" id="Function_cb4a2a5" isSystem="false" >
			<comment><![CDATA[convert char to char(n)]]></comment>
		</function>
		<function name="bpchar_larger" id="Function_47c2e54" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_larger(character, character)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="bpchar_pattern_ge" id="Function_2dc5c24" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_ge(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_ge$function$
]]></string>
			<comment><![CDATA[implementation of ~>=~ operator]]></comment>
		</function>
		<function name="bpchar_pattern_gt" id="Function_2bb4be3c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_gt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_gt$function$
]]></string>
			<comment><![CDATA[implementation of ~>~ operator]]></comment>
		</function>
		<function name="bpchar_pattern_le" id="Function_2479c5ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_le(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_le$function$
]]></string>
			<comment><![CDATA[implementation of ~<=~ operator]]></comment>
		</function>
		<function name="bpchar_pattern_lt" id="Function_36b226d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_pattern_lt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_pattern_lt$function$
]]></string>
			<comment><![CDATA[implementation of ~<~ operator]]></comment>
		</function>
		<function name="bpchar_smaller" id="Function_227ddb06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchar_smaller(character, character)
 RETURNS character
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="bpcharcmp" id="Function_1fc71d36" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharcmp(character, character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bpchareq" id="Function_13ab5170" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchareq(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bpchareq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="bpcharge" id="Function_2597082" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharge(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="bpchargt" id="Function_34fc5a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchargt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchargt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="bpchariclike" id="Function_3b3f1fae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchariclike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</function>
		<function name="bpcharicnlike" id="Function_36b95043" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicnlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</function>
		<function name="bpcharicregexeq" id="Function_2d98910" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicregexeq(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</function>
		<function name="bpcharicregexne" id="Function_91eba9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharicregexne(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</function>
		<function name="bpcharin" id="Function_426eb6d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpcharle" id="Function_24e6a4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharle(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="bpcharlike" id="Function_231c9d5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="bpcharlt" id="Function_17e44a9b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharlt(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="bpcharne" id="Function_378c28c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharne(character, character)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bpcharne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="bpcharnlike" id="Function_1aa06750" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharnlike(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="bpcharout" id="Function_25a49a81" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpcharrecv" id="Function_2ed116c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharrecv(internal, oid, integer)
 RETURNS character
 LANGUAGE internal
 STABLE STRICT
AS $function$bpcharrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpcharregexeq" id="Function_282d1a50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharregexeq(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="bpcharregexne" id="Function_5565b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharregexne(character, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</function>
		<function name="bpcharsend" id="Function_fb2bbce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpcharsend(character)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$bpcharsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bpchartypmodin" id="Function_38c7d709" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bpchartypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchartypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="bpchartypmodout" id="Function_14786d67" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="broadcast" id="Function_b369ae1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.broadcast(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_broadcast$function$
]]></string>
			<comment><![CDATA[broadcast address of network]]></comment>
		</function>
		<function name="btabstimecmp" id="Function_1e3f1ddb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btabstimecmp(abstime, abstime)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btabstimecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btarraycmp" id="Function_5ee4908" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btarraycmp(anyarray, anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btarraycmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btbeginscan" id="Function_39661bae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btbeginscan$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btboolcmp" id="Function_33224e83" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btboolcmp(boolean, boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btboolcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btbpchar_pattern_cmp" id="Function_14fe67e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbpchar_pattern_cmp(character, character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btbpchar_pattern_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btbuild" id="Function_f24abd7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btbuild$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btbuildempty" id="Function_2ee6c0e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btbuildempty$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btbulkdelete" id="Function_f0740e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btbulkdelete$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btcanreturn" id="Function_371cdb82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btcanreturn(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$btcanreturn$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btcharcmp" id="Function_1fac934e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btcharcmp("char", "char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btcharcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btcostestimate" id="Function_940bc0c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btcostestimate$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btendscan" id="Function_3b49ddce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btendscan$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btfloat48cmp" id="Function_1d3d0411" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat48cmp(real, double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat48cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat4cmp" id="Function_7b907f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat4cmp(real, real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat4cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat4sortsupport" id="Function_394fee1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat4sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat4sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btfloat84cmp" id="Function_2714c5a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat84cmp(double precision, real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat84cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat8cmp" id="Function_2d23acd9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat8cmp(double precision, double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat8cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btfloat8sortsupport" id="Function_10c4dc1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btfloat8sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btfloat8sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btgetbitmap" id="Function_373de222" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btgetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$btgetbitmap$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btgettuple" id="Function_32571609" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btgettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$btgettuple$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btinsert" id="Function_2e3927ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btinsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$btinsert$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btint24cmp" id="Function_6cbd942" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint24cmp(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint24cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint28cmp" id="Function_22fe86fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint28cmp(smallint, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint28cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint2cmp" id="Function_46ffecd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint2cmp(smallint, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint2cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint2sortsupport" id="Function_230e24c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint2sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint2sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btint42cmp" id="Function_16fdb958" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint42cmp(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint42cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint48cmp" id="Function_891ad4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint48cmp(integer, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint48cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint4cmp" id="Function_27c03906" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint4cmp(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint4cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint4sortsupport" id="Function_2760b39d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint4sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint4sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btint82cmp" id="Function_15b9d7b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint82cmp(bigint, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint82cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint84cmp" id="Function_5f681a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint84cmp(bigint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint84cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint8cmp" id="Function_2e8f4896" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint8cmp(bigint, bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint8cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btint8sortsupport" id="Function_255129c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btint8sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btint8sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btmarkpos" id="Function_297a36f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btmarkpos$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btnamecmp" id="Function_36794e70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btnamecmp(name, name)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btnamecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btnamesortsupport" id="Function_e9c38cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btnamesortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btnamesortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btoidcmp" id="Function_7cd7d1b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidcmp(oid, oid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btoidcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btoidsortsupport" id="Function_397eab91" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidsortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btoidsortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="btoidvectorcmp" id="Function_2bb679e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoidvectorcmp(oidvector, oidvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btoidvectorcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btoptions" id="Function_e79cd04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$btoptions$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btrecordcmp" id="Function_3a5db084" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrecordcmp(record, record)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btrecordcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btrecordimagecmp" id="Function_2f916da7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrecordimagecmp(record, record)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btrecordimagecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater based on byte images]]></comment>
		</function>
		<function name="btreltimecmp" id="Function_26ab55d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btreltimecmp(reltime, reltime)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btreltimecmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btrescan" id="Function_41d5bef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btrescan$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btrestrpos" id="Function_365fe7dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$btrestrpos$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="btrim" id="Function_2e9646dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteatrim$function$
CREATE OR REPLACE FUNCTION pg_catalog.btrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$btrim$function$
]]></string>
			<comment><![CDATA[trim both ends of string]]></comment>
		</function>
		<function name="btrim_001" id="Function_2f760134" isSystem="false" >
			<comment><![CDATA[trim selected characters from both ends of string]]></comment>
		</function>
		<function name="btrim_002" id="Function_5fd7f0c" isSystem="false" >
			<comment><![CDATA[trim spaces from both ends of string]]></comment>
		</function>
		<function name="bttext_pattern_cmp" id="Function_1d081daa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttext_pattern_cmp(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttext_pattern_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bttextcmp" id="Function_98d4e60" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttextcmp(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttextcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bttidcmp" id="Function_499e593" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttidcmp(tid, tid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttidcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="bttintervalcmp" id="Function_32ec23e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bttintervalcmp(tinterval, tinterval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bttintervalcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="btvacuumcleanup" id="Function_2aeb7e0d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.btvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$btvacuumcleanup$function$
]]></string>
			<comment><![CDATA[btree(internal)]]></comment>
		</function>
		<function name="bytea_string_agg_finalfn" id="Function_11141638" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytea_string_agg_finalfn(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE
AS $function$bytea_string_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="bytea_string_agg_transfn" id="Function_d17bfaa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytea_string_agg_transfn(internal, bytea, bytea)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$bytea_string_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="byteacat" id="Function_1df54cdf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteacat(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteacat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="byteacmp" id="Function_29a0686f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteacmp(bytea, bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteacmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="byteaeq" id="Function_26c0f79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteaeq(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteaeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="byteage" id="Function_17fb603e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteage(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteage$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="byteagt" id="Function_1d99c6bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteagt(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteagt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="byteain" id="Function_2fafa09c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="byteale" id="Function_3b72e985" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteale(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteale$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="bytealike" id="Function_28cf1b45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytealike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytealike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="bytealt" id="Function_fcc8b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytealt(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bytealt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="byteane" id="Function_369e2f21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteane(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$byteane$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="byteanlike" id="Function_38353b4b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteanlike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteanlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="byteaout" id="Function_28f939c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="bytearecv" id="Function_3024869b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.bytearecv(internal)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytearecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="byteasend" id="Function_fd1feac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.byteasend(bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteasend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cardinality" id="Function_1b27e148" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cardinality(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$array_cardinality$function$
]]></string>
			<comment><![CDATA[array cardinality]]></comment>
		</function>
		<function name="cash_cmp" id="Function_35a14942" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_cmp(money, money)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="cash_div_cash" id="Function_2322a7f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_cash(money, money)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_cash$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_flt4" id="Function_249d496e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_flt4(money, real)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_flt4$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_flt8" id="Function_2700c67f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_flt8(money, double precision)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_flt8$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_int2" id="Function_26c8803c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_int2(money, smallint)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_int2$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_div_int4" id="Function_25aa78a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_div_int4(money, integer)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_div_int4$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="cash_eq" id="Function_3ab2ad35" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_eq(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="cash_ge" id="Function_35665ff4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_ge(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="cash_gt" id="Function_32476a12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_gt(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="cash_in" id="Function_10cabf56" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_le" id="Function_c7b7950" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_le(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="cash_lt" id="Function_8ead409" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_lt(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="cash_mi" id="Function_148b4f0b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mi(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="cash_mul_flt4" id="Function_b53e114" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_flt4(money, real)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_flt4$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_mul_flt8" id="Function_16d5477" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_flt8(money, double precision)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_flt8$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_mul_int2" id="Function_12e3afd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_int2(money, smallint)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_int2$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_mul_int4" id="Function_255218e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_mul_int4(money, integer)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_mul_int4$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="cash_ne" id="Function_2c719111" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_ne(money, money)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cash_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="cash_out" id="Function_2be4e2aa" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_pl" id="Function_35929647" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_pl(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="cash_recv" id="Function_152a9b17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_recv(internal)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_send" id="Function_2c9aa0de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_send(money)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cash_words" id="Function_3568355e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cash_words(money)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cash_words$function$
]]></string>
			<comment><![CDATA[output money amount as words]]></comment>
		</function>
		<function name="cashlarger" id="Function_1fc1c436" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cashlarger(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cashlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="cashsmaller" id="Function_a8b88d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cashsmaller(money, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cashsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="cbrt" id="Function_280dfea4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cbrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcbrt$function$
]]></string>
			<comment><![CDATA[cube root]]></comment>
		</function>
		<function name="ceil" id="Function_2faf5ac4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceil(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dceil$function$
CREATE OR REPLACE FUNCTION pg_catalog.ceil(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[smallest integer >= value]]></comment>
		</function>
		<function name="ceil_001" id="Function_15919003" isSystem="false" >
			<comment><![CDATA[smallest integer >= value]]></comment>
		</function>
		<function name="ceiling" id="Function_1ecba6a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ceiling(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dceil$function$
CREATE OR REPLACE FUNCTION pg_catalog.ceiling(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ceil$function$
]]></string>
			<comment><![CDATA[smallest integer >= value]]></comment>
		</function>
		<function name="ceiling_001" id="Function_394251cf" isSystem="false" >
			<comment><![CDATA[smallest integer >= value]]></comment>
		</function>
		<function name="center" id="Function_75f4ebe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.center(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.center(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="center_001" id="Function_152ec620" isSystem="false" >
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="char" id="Function_26d9af15" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."char"(integer)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i4tochar$function$
CREATE OR REPLACE FUNCTION pg_catalog."char"(text)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_char$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
		</function>
		<function name="char_001" id="Function_285b04c4" isSystem="false" >
			<comment><![CDATA[convert text to char]]></comment>
		</function>
		<function name="char_length" id="Function_19f20365" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.char_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.char_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="char_length_001" id="Function_2a157c64" isSystem="false" >
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="character_length" id="Function_121922df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.character_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.character_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlen$function$
]]></string>
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="character_length_001" id="Function_1cac74df" isSystem="false" >
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="chareq" id="Function_33b19411" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chareq("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$chareq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="charge" id="Function_27d5704f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charge("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="chargt" id="Function_31904915" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chargt("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$chargt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="charin" id="Function_150493c3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="charle" id="Function_2cfac543" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charle("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="charlt" id="Function_1dd8cd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charlt("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="charne" id="Function_14bf85e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charne("char", "char")
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$charne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="charout" id="Function_29683bdf" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="charrecv" id="Function_251ffc93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charrecv(internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$charrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="charsend" id="Function_c067120" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.charsend("char")
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$charsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="chr" id="Function_74cbdae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.chr(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$chr$function$
]]></string>
			<comment><![CDATA[convert int4 to char]]></comment>
		</function>
		<function name="cideq" id="Function_1af28b22" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cideq(cid, cid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$cideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="cidin" id="Function_1e6b6733" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidout" id="Function_260fa4a3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr" id="Function_25b0676e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr(inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_to_cidr$function$
]]></string>
			<comment><![CDATA[convert inet to cidr]]></comment>
		</function>
		<function name="cidr_in" id="Function_279a7787" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr_out" id="Function_e8bcf39" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr_recv" id="Function_19945a5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_recv(internal)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidr_send" id="Function_8e2b169" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidr_send(cidr)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidrecv" id="Function_19eb6bea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidrecv(internal)
 RETURNS cid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cidsend" id="Function_38ba978c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cidsend(cid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle" id="Function_7887fe3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle(box)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(polygon)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_circle$function$
CREATE OR REPLACE FUNCTION pg_catalog.circle(point, double precision)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cr_circle$function$
]]></string>
			<comment><![CDATA[convert point and radius to circle]]></comment>
		</function>
		<function name="circle_001" id="Function_2f822946" isSystem="false" >
			<comment><![CDATA[convert polygon to circle]]></comment>
		</function>
		<function name="circle_002" id="Function_2637f289" isSystem="false" >
			<comment><![CDATA[convert box to circle]]></comment>
		</function>
		<function name="circle_above" id="Function_2f2e56ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_above(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</function>
		<function name="circle_add_pt" id="Function_224ad8e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_add_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_add_pt$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="circle_below" id="Function_2495a226" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_below(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</function>
		<function name="circle_center" id="Function_322c03fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_center(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="circle_contain" id="Function_24184169" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contain(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="circle_contain_pt" id="Function_14e8d1e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contain_pt(circle, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="circle_contained" id="Function_f519428" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_contained(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="circle_distance" id="Function_2bd579a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_distance(circle, circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="circle_div_pt" id="Function_397b29c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_div_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_div_pt$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="circle_eq" id="Function_23b9bc19" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_eq(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="circle_ge" id="Function_26f2a1d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_ge(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="circle_gt" id="Function_d604225" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_gt(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="circle_in" id="Function_333002c2" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_le" id="Function_1fcfac7d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_le(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="circle_left" id="Function_3dce9df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_left(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="circle_lt" id="Function_2399b8a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_lt(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="circle_mul_pt" id="Function_6ee8f62" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_mul_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_mul_pt$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="circle_ne" id="Function_2184d222" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_ne(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$circle_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="circle_out" id="Function_2d3983ee" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_overabove" id="Function_23d301d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overabove(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</function>
		<function name="circle_overbelow" id="Function_1c2b5aa9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overbelow(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</function>
		<function name="circle_overlap" id="Function_345c04e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overlap(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="circle_overleft" id="Function_2aa0522b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overleft(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="circle_overright" id="Function_c230a29" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_overright(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="circle_recv" id="Function_6aecd96" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_recv(internal)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_right" id="Function_26227f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_right(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="circle_same" id="Function_222b8629" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_same(circle, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="circle_send" id="Function_2767b418" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_send(circle)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="circle_sub_pt" id="Function_183bc839" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.circle_sub_pt(circle, point)
 RETURNS circle
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_sub_pt$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="clock_timestamp" id="Function_2a7f4f2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.clock_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STRICT
AS $function$clock_timestamp$function$
]]></string>
			<comment><![CDATA[current clock time]]></comment>
		</function>
		<function name="close_lb" id="Function_13ae1d68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_lb(line, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_lb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_ls" id="Function_5e47543" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_ls(line, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_ls$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_lseg" id="Function_1f68a0b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_lseg(lseg, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_lseg$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_pb" id="Function_1d3c1fb5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_pb(point, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_pb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_pl" id="Function_83da76a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_pl(point, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_pl$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_ps" id="Function_b723584" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_ps(point, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_ps$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_sb" id="Function_22ac3577" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_sb(lseg, box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_sb$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="close_sl" id="Function_1d36f398" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.close_sl(lseg, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$close_sl$function$
]]></string>
			<comment><![CDATA[implementation of ## operator]]></comment>
		</function>
		<function name="col_description" id="Function_36b46863" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.col_description(oid, integer)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = 'pg_catalog.pg_class'::pg_catalog.regclass and objsubid = $2$function$
]]></string>
			<comment><![CDATA[get description for table column]]></comment>
		</function>
		<function name="concat" id="Function_28fe9318" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.concat(VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_concat$function$
]]></string>
			<comment><![CDATA[concatenate values]]></comment>
		</function>
		<function name="concat_ws" id="Function_3832d16a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.concat_ws(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_concat_ws$function$
]]></string>
			<comment><![CDATA[concatenate values with separators]]></comment>
		</function>
		<function name="contjoinsel" id="Function_2bf747c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.contjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$contjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for containment comparison operators]]></comment>
		</function>
		<function name="contsel" id="Function_17d218df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.contsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$contsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for containment comparison operators]]></comment>
		</function>
		<function name="convert" id="Function_1ad30c55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert(bytea, name, name)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_convert$function$
]]></string>
			<comment><![CDATA[convert string with specified encoding names]]></comment>
		</function>
		<function name="convert_from" id="Function_1b836789" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert_from(bytea, name)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_convert_from$function$
]]></string>
			<comment><![CDATA[convert string with specified source encoding name]]></comment>
		</function>
		<function name="convert_to" id="Function_652f17e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.convert_to(text, name)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_convert_to$function$
]]></string>
			<comment><![CDATA[convert string with specified destination encoding name]]></comment>
		</function>
		<function name="corr" id="Function_2664b3f8" isSystem="false" >
			<comment><![CDATA[correlation coefficient]]></comment>
		</function>
		<function name="cos" id="Function_197fc73f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cos(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcos$function$
]]></string>
			<comment><![CDATA[cosine]]></comment>
		</function>
		<function name="cot" id="Function_14a8a11d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cot(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcot$function$
]]></string>
			<comment><![CDATA[cotangent]]></comment>
		</function>
		<function name="count" id="Function_3a60422b" isSystem="false" >
			<comment><![CDATA[number of input rows for which the input expression is not null]]></comment>
		</function>
		<function name="count_001" id="Function_29db371" isSystem="false" >
			<comment><![CDATA[number of input rows]]></comment>
		</function>
		<function name="covar_pop" id="Function_1ab6d487" isSystem="false" >
			<comment><![CDATA[population covariance]]></comment>
		</function>
		<function name="covar_samp" id="Function_22960a31" isSystem="false" >
			<comment><![CDATA[sample covariance]]></comment>
		</function>
		<function name="cstring_in" id="Function_356d8b40" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cstring_out" id="Function_12942870" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cstring_recv" id="Function_1196d7b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cstring_send" id="Function_3498de8a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="cume_dist" id="Function_3a89171e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_cume_dist$function$
]]></string>
			<comment><![CDATA[fractional row number within partition]]></comment>
		</function>
		<function name="cume_dist_001" id="Function_3a56e2ee" isSystem="false" >
			<comment><![CDATA[cumulative distribution of hypothetical row]]></comment>
		</function>
		<function name="cume_dist_final" id="Function_16e4fd32" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cume_dist_final(internal, VARIADIC "any")
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_cume_dist_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="current_database" id="Function_17980b63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_database()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_database$function$
]]></string>
			<comment><![CDATA[name of the current database]]></comment>
		</function>
		<function name="current_query" id="Function_2fad9f01" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_query()
 RETURNS text
 LANGUAGE internal
AS $function$current_query$function$
]]></string>
			<comment><![CDATA[get the currently executing query]]></comment>
		</function>
		<function name="current_schema" id="Function_1ce0e910" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."current_schema"()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_schema$function$
]]></string>
			<comment><![CDATA[current schema name]]></comment>
		</function>
		<function name="current_schemas" id="Function_37c15745" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_schemas(boolean)
 RETURNS name[]
 LANGUAGE internal
 STABLE STRICT
AS $function$current_schemas$function$
]]></string>
			<comment><![CDATA[current schema search list]]></comment>
		</function>
		<function name="current_setting" id="Function_1ba6039e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.current_setting(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$show_config_by_name$function$
]]></string>
			<comment><![CDATA[SHOW X as a function]]></comment>
		</function>
		<function name="current_user" id="Function_16115a95" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."current_user"()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_user$function$
]]></string>
			<comment><![CDATA[current user name]]></comment>
		</function>
		<function name="currtid" id="Function_1888dea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currtid(oid, tid)
 RETURNS tid
 LANGUAGE internal
 STRICT
AS $function$currtid_byreloid$function$
]]></string>
			<comment><![CDATA[latest tid of a tuple]]></comment>
		</function>
		<function name="currtid2" id="Function_288889d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currtid2(text, tid)
 RETURNS tid
 LANGUAGE internal
 STRICT
AS $function$currtid_byrelname$function$
]]></string>
			<comment><![CDATA[latest tid of a tuple]]></comment>
		</function>
		<function name="currval" id="Function_5e52610" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.currval(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$currval_oid$function$
]]></string>
			<comment><![CDATA[sequence current value]]></comment>
		</function>
		<function name="cursor_to_xml" id="Function_1d497573" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cursor_to_xml(cursor refcursor, count integer, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$cursor_to_xml$function$
]]></string>
			<comment><![CDATA[map rows from cursor to XML]]></comment>
		</function>
		<function name="cursor_to_xmlschema" id="Function_38b9298d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.cursor_to_xmlschema(cursor refcursor, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$cursor_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map cursor structure to XML Schema]]></comment>
		</function>
		<function name="database_to_xml" id="Function_3614adb4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xml(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$database_to_xml$function$
]]></string>
			<comment><![CDATA[map database contents to XML]]></comment>
		</function>
		<function name="database_to_xml_and_xmlschema" id="Function_3b7f9186" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xml_and_xmlschema(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$database_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map database contents and structure to XML and XML Schema]]></comment>
		</function>
		<function name="database_to_xmlschema" id="Function_a4a24af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.database_to_xmlschema(nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$database_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map database structure to XML Schema]]></comment>
		</function>
		<function name="date" id="Function_26266263" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date(abstime)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$abstime_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp without time zone)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_date$function$
CREATE OR REPLACE FUNCTION pg_catalog.date(timestamp with time zone)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_date$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to date]]></comment>
		</function>
		<function name="date_001" id="Function_15561186" isSystem="false" >
			<comment><![CDATA[convert abstime to date]]></comment>
		</function>
		<function name="date_002" id="Function_f282129" isSystem="false" >
			<comment><![CDATA[convert timestamp to date]]></comment>
		</function>
		<function name="date_cmp" id="Function_3835e86b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp(date, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="date_cmp_timestamp" id="Function_1c1061b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp_timestamp(date, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_cmp_timestamp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="date_cmp_timestamptz" id="Function_adeb052" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_cmp_timestamptz(date, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$date_cmp_timestamptz$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="date_eq" id="Function_d970747" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="date_eq_timestamp" id="Function_2079df8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_eq_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="date_eq_timestamptz" id="Function_2b3d17ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_eq_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_eq_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="date_ge" id="Function_2b0e7bb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="date_ge_timestamp" id="Function_182a810a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_ge_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="date_ge_timestamptz" id="Function_38be0611" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ge_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_ge_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="date_gt" id="Function_3a966634" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="date_gt_timestamp" id="Function_28b339ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_gt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="date_gt_timestamptz" id="Function_1a66c8bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_gt_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_gt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="date_in" id="Function_2cea69bf" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_larger" id="Function_333556ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_larger(date, date)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="date_le" id="Function_222ce610" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="date_le_timestamp" id="Function_132b0a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_le_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="date_le_timestamptz" id="Function_18d5ac5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_le_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_le_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="date_lt" id="Function_2c131adb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="date_lt_timestamp" id="Function_178b700d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_lt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="date_lt_timestamptz" id="Function_21c52334" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_lt_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_lt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="date_mi" id="Function_3848c0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mi(date, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="date_mi_interval" id="Function_1d77eb29" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mi_interval(date, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="date_mii" id="Function_19334774" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_mii(date, integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_mii$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="date_ne" id="Function_18376645" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne(date, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$date_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="date_ne_timestamp" id="Function_17ce73ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne_timestamp(date, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_ne_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="date_ne_timestamptz" id="Function_204e969" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_ne_timestamptz(date, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$date_ne_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="date_out" id="Function_234b89c3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_part" id="Function_162137b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, interval)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, abstime)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp with time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, reltime)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as pg_catalog.interval))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, date)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.date_part($1, cast($2 as timestamp without time zone))$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, time without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_part$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_part(text, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_part$function$
]]></string>
			<comment><![CDATA[extract field from timestamp with time zone]]></comment>
		</function>
		<function name="date_part_001" id="Function_2e629707" isSystem="false" >
			<comment><![CDATA[extract field from interval]]></comment>
		</function>
		<function name="date_part_002" id="Function_38fed0cc" isSystem="false" >
			<comment><![CDATA[extract field from time with time zone]]></comment>
		</function>
		<function name="date_part_003" id="Function_19fc0a53" isSystem="false" >
			<comment><![CDATA[extract field from abstime]]></comment>
		</function>
		<function name="date_part_004" id="Function_1c750045" isSystem="false" >
			<comment><![CDATA[extract field from reltime]]></comment>
		</function>
		<function name="date_part_005" id="Function_f6e0bfb" isSystem="false" >
			<comment><![CDATA[extract field from date]]></comment>
		</function>
		<function name="date_part_006" id="Function_1c86ed27" isSystem="false" >
			<comment><![CDATA[extract field from time]]></comment>
		</function>
		<function name="date_part_007" id="Function_2bff5e6b" isSystem="false" >
			<comment><![CDATA[extract field from timestamp]]></comment>
		</function>
		<function name="date_pl_interval" id="Function_3138c906" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_pl_interval(date, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="date_pli" id="Function_30ad22fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_pli(date, integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_pli$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="date_recv" id="Function_11b68e5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_recv(internal)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_send" id="Function_445b521" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_send(date)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="date_smaller" id="Function_1d8ad940" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_smaller(date, date)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="date_sortsupport" id="Function_1722320c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="date_trunc" id="Function_11d07a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.date_trunc(text, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_trunc$function$
]]></string>
			<comment><![CDATA[truncate timestamp with time zone to specified units]]></comment>
		</function>
		<function name="date_trunc_001" id="Function_a1cd8bc" isSystem="false" >
			<comment><![CDATA[truncate interval to specified units]]></comment>
		</function>
		<function name="date_trunc_002" id="Function_3169376f" isSystem="false" >
			<comment><![CDATA[truncate timestamp to specified units]]></comment>
		</function>
		<function name="daterange" id="Function_23e56119" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.daterange(date, date, text)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[daterange constructor]]></comment>
		</function>
		<function name="daterange_001" id="Function_13a39ee0" isSystem="false" >
			<comment><![CDATA[daterange constructor]]></comment>
		</function>
		<function name="daterange_canonical" id="Function_2658e015" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange_canonical(daterange)
 RETURNS daterange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$daterange_canonical$function$
]]></string>
			<comment><![CDATA[convert a date range to canonical form]]></comment>
		</function>
		<function name="daterange_subdiff" id="Function_a3f2f05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.daterange_subdiff(date, date)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$daterange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two date values]]></comment>
		</function>
		<function name="datetime_pl" id="Function_14781951" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.datetime_pl(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datetime_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="datetimetz_pl" id="Function_761d32a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.datetimetz_pl(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datetimetz_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="dcbrt" id="Function_35e462b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dcbrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dcbrt$function$
]]></string>
			<comment><![CDATA[implementation of ||/ operator]]></comment>
		</function>
		<function name="decode" id="Function_31b0900c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.decode(text, text)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$binary_decode$function$
]]></string>
			<comment><![CDATA[convert ascii-encoded text string into bytea value]]></comment>
		</function>
		<function name="degrees" id="Function_360e91a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.degrees(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$degrees$function$
]]></string>
			<comment><![CDATA[radians to degrees]]></comment>
		</function>
		<function name="dense_rank" id="Function_17d613e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_dense_rank$function$
]]></string>
			<comment><![CDATA[integer rank without gaps]]></comment>
		</function>
		<function name="dense_rank_001" id="Function_104df46c" isSystem="false" >
			<comment><![CDATA[rank of hypothetical row without gaps]]></comment>
		</function>
		<function name="dense_rank_final" id="Function_2cd70e31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dense_rank_final(internal, VARIADIC "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_dense_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="dexp" id="Function_17c608de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dexp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dexp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="diagonal" id="Function_32aebc4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.diagonal(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_diagonal$function$
]]></string>
			<comment><![CDATA[box diagonal]]></comment>
		</function>
		<function name="diameter" id="Function_a3d53c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.diameter(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_diameter$function$
]]></string>
			<comment><![CDATA[diameter of circle]]></comment>
		</function>
		<function name="dispell_init" id="Function_6d75575" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dispell_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dispell_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dispell_lexize" id="Function_c4141ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dispell_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dispell_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dist_cpoly" id="Function_2b22292d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_cpoly(circle, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_cpoly$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_lb" id="Function_39828f16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_lb(line, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_lb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_pb" id="Function_39bea123" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pb(point, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_pb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_pc" id="Function_30659572" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pc(point, circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_pc$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_pl" id="Function_2a879ce0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_pl(point, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_pl$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_ppath" id="Function_1ee7e620" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ppath(point, path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_ppath$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_ps" id="Function_28dade34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_ps(point, lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_ps$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_sb" id="Function_3a8be838" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_sb(lseg, box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_sb$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="dist_sl" id="Function_14813d3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dist_sl(lseg, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dist_sl$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="div" id="Function_2d49fd7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.div(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_div_trunc$function$
]]></string>
			<comment><![CDATA[trunc(x/y)]]></comment>
		</function>
		<function name="dlog1" id="Function_3aa7e1ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dlog1(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog1$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="dlog10" id="Function_13ff16c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dlog10(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog10$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</function>
		<function name="domain_in" id="Function_2197ad75" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="domain_recv" id="Function_22779d52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.domain_recv(internal, oid, integer)
 RETURNS "any"
 LANGUAGE internal
 STABLE
AS $function$domain_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="dpow" id="Function_6d862bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dpow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
]]></string>
			<comment><![CDATA[implementation of ^ operator]]></comment>
		</function>
		<function name="dround" id="Function_265c5640" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dround(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dround$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</function>
		<function name="dsimple_init" id="Function_2030b47" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsimple_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsimple_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dsimple_lexize" id="Function_ca72cb5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsimple_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsimple_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dsnowball_init" id="Function_2a3e488a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsnowball_init(internal)
 RETURNS internal
 LANGUAGE c
 STRICT
AS '$libdir/dict_snowball', $function$dsnowball_init$function$
]]></string>
		</function>
		<function name="dsnowball_lexize" id="Function_2d539e6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsnowball_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE c
 STRICT
AS '$libdir/dict_snowball', $function$dsnowball_lexize$function$
]]></string>
		</function>
		<function name="dsqrt" id="Function_35e873aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsqrt$function$
]]></string>
			<comment><![CDATA[implementation of |/ operator]]></comment>
		</function>
		<function name="dsynonym_init" id="Function_335dc3df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsynonym_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsynonym_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dsynonym_lexize" id="Function_2cd50879" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dsynonym_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsynonym_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="dtrunc" id="Function_38a5e85b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.dtrunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtrunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</function>
		<function name="elem_contained_by_range" id="Function_2a05efb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.elem_contained_by_range(anyelement, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$elem_contained_by_range$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="encode" id="Function_26540f45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.encode(bytea, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$binary_encode$function$
]]></string>
			<comment><![CDATA[convert bytea value into some ascii-only text string]]></comment>
		</function>
		<function name="enum_cmp" id="Function_72757f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_cmp(anyenum, anyenum)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="enum_eq" id="Function_1f5675b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_eq(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="enum_first" id="Function_14c4383b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_first(anyenum)
 RETURNS anyenum
 LANGUAGE internal
 STABLE
AS $function$enum_first$function$
]]></string>
			<comment><![CDATA[first value of the input enum type]]></comment>
		</function>
		<function name="enum_ge" id="Function_985c70d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_ge(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="enum_gt" id="Function_68e3432" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_gt(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="enum_in" id="Function_78bd987" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_larger" id="Function_8952a03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_larger(anyenum, anyenum)
 RETURNS anyenum
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="enum_last" id="Function_35ca115f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_last(anyenum)
 RETURNS anyenum
 LANGUAGE internal
 STABLE
AS $function$enum_last$function$
]]></string>
			<comment><![CDATA[last value of the input enum type]]></comment>
		</function>
		<function name="enum_le" id="Function_1b7d7c26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_le(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="enum_lt" id="Function_287d6d63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_lt(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="enum_ne" id="Function_8cbe536" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_ne(anyenum, anyenum)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="enum_out" id="Function_185111ff" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_range" id="Function_1887bac2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE
AS $function$enum_range_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.enum_range(anyenum, anyenum)
 RETURNS anyarray
 LANGUAGE internal
 STABLE
AS $function$enum_range_bounds$function$
]]></string>
			<comment><![CDATA[range between the two given enum values, as an ordered array]]></comment>
		</function>
		<function name="enum_range_001" id="Function_35b7552" isSystem="false" >
			<comment><![CDATA[range of the given enum type, as an ordered array]]></comment>
		</function>
		<function name="enum_recv" id="Function_823db1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_recv(internal, oid)
 RETURNS anyenum
 LANGUAGE internal
 STABLE STRICT
AS $function$enum_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_send" id="Function_2480afb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_send(anyenum)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$enum_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="enum_smaller" id="Function_1ad376a7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.enum_smaller(anyenum, anyenum)
 RETURNS anyenum
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$enum_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="eqjoinsel" id="Function_2b45af50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.eqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$eqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of = and related operators]]></comment>
		</function>
		<function name="eqsel" id="Function_3b31e101" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.eqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$eqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of = and related operators]]></comment>
		</function>
		<function name="euc_cn_to_mic" id="Function_6acbb61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_cn_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_cn_and_mic', $function$euc_cn_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_CN to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_cn_to_utf8" id="Function_211b0b5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_cn_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_cn', $function$euc_cn_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_CN to UTF8]]></comment>
		</function>
		<function name="euc_jis_2004_to_shift_jis_2004" id="Function_da67718" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jis_2004_to_shift_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc2004_sjis2004', $function$euc_jis_2004_to_shift_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JIS_2004 to SHIFT_JIS_2004]]></comment>
		</function>
		<function name="euc_jis_2004_to_utf8" id="Function_11fdca1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jis_2004_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc2004', $function$euc_jis_2004_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JIS_2004 to UTF8]]></comment>
		</function>
		<function name="euc_jp_to_mic" id="Function_69bc39d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$euc_jp_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_jp_to_sjis" id="Function_34323e56" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$euc_jp_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to SJIS]]></comment>
		</function>
		<function name="euc_jp_to_utf8" id="Function_8cb6f78" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_jp_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_jp', $function$euc_jp_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_JP to UTF8]]></comment>
		</function>
		<function name="euc_kr_to_mic" id="Function_1f3f8975" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_kr_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_kr_and_mic', $function$euc_kr_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_KR to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_kr_to_utf8" id="Function_287cc8a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_kr_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_kr', $function$euc_kr_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_KR to UTF8]]></comment>
		</function>
		<function name="euc_tw_to_big5" id="Function_193507" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$euc_tw_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to BIG5]]></comment>
		</function>
		<function name="euc_tw_to_mic" id="Function_147008b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$euc_tw_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to MULE_INTERNAL]]></comment>
		</function>
		<function name="euc_tw_to_utf8" id="Function_be32ec5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.euc_tw_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_tw', $function$euc_tw_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for EUC_TW to UTF8]]></comment>
		</function>
		<function name="event_trigger_in" id="Function_22060d66" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="event_trigger_out" id="Function_cab799f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="every" id="Function_2586fc7c" isSystem="false" >
			<comment><![CDATA[boolean-and aggregate]]></comment>
		</function>
		<function name="exp" id="Function_e31a4a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.exp(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dexp$function$
CREATE OR REPLACE FUNCTION pg_catalog.exp(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_exp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="exp_001" id="Function_f440313" isSystem="false" >
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="factorial" id="Function_13dda37c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.factorial(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_fac$function$
]]></string>
			<comment><![CDATA[factorial]]></comment>
		</function>
		<function name="family" id="Function_2b517f04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.family(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_family$function$
]]></string>
			<comment><![CDATA[address family (4 for IPv4, 6 for IPv6)]]></comment>
		</function>
		<function name="fdw_handler_in" id="Function_1f6cfb0e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="fdw_handler_out" id="Function_104e516" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="first_value" id="Function_7c5d109" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.first_value(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_first_value$function$
]]></string>
			<comment><![CDATA[fetch the first row value]]></comment>
		</function>
		<function name="float4" id="Function_10bd399b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4(bigint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i8tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(smallint)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i2tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i4tof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(double precision)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtof$function$
CREATE OR REPLACE FUNCTION pg_catalog.float4(numeric)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float4$function$
]]></string>
			<comment><![CDATA[convert numeric to float4]]></comment>
		</function>
		<function name="float48div" id="Function_1c5e8e9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48div(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float48eq" id="Function_cb5ad30" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48eq(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float48ge" id="Function_1bf7d82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48ge(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float48gt" id="Function_16a11e60" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48gt(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float48le" id="Function_2028ab46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48le(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float48lt" id="Function_1238c4ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48lt(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float48mi" id="Function_3a4787d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48mi(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float48mul" id="Function_219dc975" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48mul(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float48ne" id="Function_2131e702" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48ne(real, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float48ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float48pl" id="Function_26378de5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float48pl(real, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float48pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float4_001" id="Function_2c3b231d" isSystem="false" >
			<comment><![CDATA[convert int2 to float4]]></comment>
		</function>
		<function name="float4_002" id="Function_36ac4fc7" isSystem="false" >
			<comment><![CDATA[convert float8 to float4]]></comment>
		</function>
		<function name="float4_003" id="Function_1da206a5" isSystem="false" >
			<comment><![CDATA[convert int4 to float4]]></comment>
		</function>
		<function name="float4_004" id="Function_3b094eb8" isSystem="false" >
			<comment><![CDATA[convert int8 to float4]]></comment>
		</function>
		<function name="float4_accum" id="Function_3a54809f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4_accum(double precision[], real)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="float4abs" id="Function_19d50d5e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4abs(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="float4div" id="Function_2f29d393" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4div(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float4eq" id="Function_4338d4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4eq(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float4ge" id="Function_1856e1fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4ge(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float4gt" id="Function_21dee97" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4gt(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float4in" id="Function_1bfa4c2b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4larger" id="Function_2c56ad5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4larger(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="float4le" id="Function_2907e0c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4le(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float4lt" id="Function_22e16e2a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4lt(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float4mi" id="Function_2c497296" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4mi(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float4mul" id="Function_29b8a6fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4mul(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float4ne" id="Function_1638e651" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4ne(real, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float4ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float4out" id="Function_1abbbdcd" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4pl" id="Function_311d270d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4pl(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float4recv" id="Function_10323290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4recv(internal)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4send" id="Function_176abe75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4send(real)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float4smaller" id="Function_26f90254" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4smaller(real, real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="float4um" id="Function_2d5e5c84" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4um(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float4up" id="Function_23ab1b60" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float4up(real)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float8" id="Function_1800d2ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8(bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i8tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(smallint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i2tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i4tod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ftod$function$
CREATE OR REPLACE FUNCTION pg_catalog.float8(numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_float8$function$
]]></string>
			<comment><![CDATA[convert numeric to float8]]></comment>
		</function>
		<function name="float84div" id="Function_145bf2e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84div(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float84eq" id="Function_a00eca4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84eq(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float84ge" id="Function_1e0199d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84ge(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float84gt" id="Function_19323278" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84gt(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float84le" id="Function_22585b49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84le(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float84lt" id="Function_39f88ff7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84lt(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float84mi" id="Function_51652f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84mi(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float84mul" id="Function_1246ea14" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84mul(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float84ne" id="Function_178b541a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84ne(double precision, real)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float84ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float84pl" id="Function_12e09204" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float84pl(double precision, real)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float84pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float8_001" id="Function_39b2873d" isSystem="false" >
			<comment><![CDATA[convert int2 to float8]]></comment>
		</function>
		<function name="float8_002" id="Function_2efff9fb" isSystem="false" >
			<comment><![CDATA[convert float4 to float8]]></comment>
		</function>
		<function name="float8_003" id="Function_14e4d46d" isSystem="false" >
			<comment><![CDATA[convert int4 to float8]]></comment>
		</function>
		<function name="float8_004" id="Function_2e280fad" isSystem="false" >
			<comment><![CDATA[convert int8 to float8]]></comment>
		</function>
		<function name="float8_accum" id="Function_2347015e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_accum(double precision[], double precision)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="float8_avg" id="Function_8e49aa5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_avg(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_corr" id="Function_2a2f539d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_corr(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_corr$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_covar_pop" id="Function_70094ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_covar_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_covar_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_covar_samp" id="Function_22a1d80c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_covar_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_covar_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_accum" id="Function_268add48" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_accum(double precision[], double precision, double precision)
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="float8_regr_avgx" id="Function_2cfa69e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_avgx(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_avgx$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_avgy" id="Function_23d32372" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_avgy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_avgy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_intercept" id="Function_33fa41ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_intercept(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_intercept$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_r2" id="Function_ba01bc1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_r2(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_r2$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_slope" id="Function_3aac2f2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_slope(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_slope$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_sxx" id="Function_184d042d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_sxx(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_sxx$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_sxy" id="Function_1b441527" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_sxy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_sxy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_regr_syy" id="Function_38d86a46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_regr_syy(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_regr_syy$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_stddev_pop" id="Function_3a42c168" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_stddev_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_stddev_samp" id="Function_13fc2a12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_stddev_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_var_pop" id="Function_2a4dd748" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_var_pop(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8_var_samp" id="Function_34c2dce5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8_var_samp(double precision[])
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="float8abs" id="Function_1b663777" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8abs(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="float8div" id="Function_1c0c215b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8div(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="float8eq" id="Function_2a84f473" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8eq(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="float8ge" id="Function_fc98ae6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8ge(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="float8gt" id="Function_1bf09903" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8gt(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="float8in" id="Function_29d40857" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8larger" id="Function_22e958ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8larger(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="float8le" id="Function_22cf665" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8le(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="float8lt" id="Function_203aaac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8lt(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="float8mi" id="Function_16a8e56b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8mi(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float8mul" id="Function_1baede76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8mul(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="float8ne" id="Function_12319ef2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8ne(double precision, double precision)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$float8ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="float8out" id="Function_124ee7e0" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8pl" id="Function_c22c995" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8pl(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="float8recv" id="Function_19c53540" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8recv(internal)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8send" id="Function_c476fcf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8send(double precision)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="float8smaller" id="Function_3881d21e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8smaller(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="float8um" id="Function_dd98f37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8um(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="float8up" id="Function_1ac5e35" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.float8up(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="floor" id="Function_159bfe4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.floor(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dfloor$function$
CREATE OR REPLACE FUNCTION pg_catalog.floor(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_floor$function$
]]></string>
			<comment><![CDATA[largest integer <= value]]></comment>
		</function>
		<function name="floor_001" id="Function_29aabba2" isSystem="false" >
			<comment><![CDATA[largest integer <= value]]></comment>
		</function>
		<function name="flt4_mul_cash" id="Function_12d1400c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.flt4_mul_cash(real, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$flt4_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="flt8_mul_cash" id="Function_8c60a24" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.flt8_mul_cash(double precision, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$flt8_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="fmgr_c_validator" id="Function_99d9173" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_c_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE STRICT
AS $function$fmgr_c_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="fmgr_internal_validator" id="Function_1eff57fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_internal_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE STRICT
AS $function$fmgr_internal_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="fmgr_sql_validator" id="Function_65e3bb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.fmgr_sql_validator(oid)
 RETURNS void
 LANGUAGE internal
 STABLE STRICT
AS $function$fmgr_sql_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="format" id="Function_49d8675" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format(text)
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_format_nv$function$
CREATE OR REPLACE FUNCTION pg_catalog.format(text, VARIADIC "any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$text_format$function$
]]></string>
			<comment><![CDATA[format text message]]></comment>
		</function>
		<function name="format_001" id="Function_63a1228" isSystem="false" >
			<comment><![CDATA[format text message]]></comment>
		</function>
		<function name="format_type" id="Function_14adcaa6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.format_type(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$format_type$function$
]]></string>
			<comment><![CDATA[format a type oid and atttypmod to canonical SQL]]></comment>
		</function>
		<function name="gb18030_to_utf8" id="Function_105fce4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gb18030_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gb18030', $function$gb18030_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for GB18030 to UTF8]]></comment>
		</function>
		<function name="gbk_to_utf8" id="Function_7cd73fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gbk_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gbk', $function$gbk_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for GBK to UTF8]]></comment>
		</function>
		<function name="generate_series" id="Function_2267ccb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(bigint, bigint, bigint)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(integer, integer, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_step_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp without time zone, timestamp without time zone, interval)
 RETURNS SETOF timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_series_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_series(timestamp with time zone, timestamp with time zone, interval)
 RETURNS SETOF timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$generate_series_timestamptz$function$
]]></string>
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_001" id="Function_1f8d3089" isSystem="false" >
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_002" id="Function_1cca0328" isSystem="false" >
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_003" id="Function_31ef05e1" isSystem="false" >
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_004" id="Function_1be4048a" isSystem="false" >
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_series_005" id="Function_feba5b7" isSystem="false" >
			<comment><![CDATA[non-persistent series generator]]></comment>
		</function>
		<function name="generate_subscripts" id="Function_be87934" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_subscripts_nodir$function$
CREATE OR REPLACE FUNCTION pg_catalog.generate_subscripts(anyarray, integer, boolean)
 RETURNS SETOF integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$generate_subscripts$function$
]]></string>
			<comment><![CDATA[array subscripts generator]]></comment>
		</function>
		<function name="generate_subscripts_001" id="Function_3877a60e" isSystem="false" >
			<comment><![CDATA[array subscripts generator]]></comment>
		</function>
		<function name="get_bit" id="Function_ca79c2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bytea, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaGetBit$function$
CREATE OR REPLACE FUNCTION pg_catalog.get_bit(bit, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitgetbit$function$
]]></string>
			<comment><![CDATA[get bit]]></comment>
		</function>
		<function name="get_bit_001" id="Function_36712d0d" isSystem="false" >
			<comment><![CDATA[get bit]]></comment>
		</function>
		<function name="get_byte" id="Function_1962385a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_byte(bytea, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaGetByte$function$
]]></string>
			<comment><![CDATA[get byte]]></comment>
		</function>
		<function name="get_current_ts_config" id="Function_209d9693" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.get_current_ts_config()
 RETURNS regconfig
 LANGUAGE internal
 STABLE STRICT
AS $function$get_current_ts_config$function$
]]></string>
			<comment><![CDATA[get current tsearch configuration]]></comment>
		</function>
		<function name="getdatabaseencoding" id="Function_3b8c1909" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.getdatabaseencoding()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$getdatabaseencoding$function$
]]></string>
			<comment><![CDATA[encoding name of current database]]></comment>
		</function>
		<function name="getpgusername" id="Function_322c998a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.getpgusername()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$current_user$function$
]]></string>
			<comment><![CDATA[deprecated, use current_user instead]]></comment>
		</function>
		<function name="gin_cmp_prefix" id="Function_3aba1f6c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_cmp_prefix(text, text, smallint, internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_cmp_prefix$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="gin_cmp_tslexeme" id="Function_1b0908fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_cmp_tslexeme(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_cmp_tslexeme$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="gin_compare_jsonb" id="Function_424c2be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_compare_jsonb(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_compare_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_consistent_jsonb" id="Function_28ccacd3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_consistent_jsonb(internal, smallint, anyarray, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_consistent_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_consistent_jsonb_path" id="Function_6773096" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_consistent_jsonb_path(internal, smallint, anyarray, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_consistent_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb" id="Function_270d783e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb_path" id="Function_1041c3e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_path(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb_query" id="Function_8650102" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_query(anyarray, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb_query$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_jsonb_query_path" id="Function_27281098" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_jsonb_query_path(anyarray, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_jsonb_query_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_extract_tsquery" id="Function_3b6cd934" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsquery_5args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsquery(tsquery, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsquery$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_extract_tsquery_001" id="Function_118efd9f" isSystem="false" >
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="gin_extract_tsvector" id="Function_d927a57" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsvector_2args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_extract_tsvector(tsvector, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_extract_tsvector$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_extract_tsvector_001" id="Function_1d09a479" isSystem="false" >
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="gin_triconsistent_jsonb" id="Function_1ca69d6f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_triconsistent_jsonb(internal, smallint, anyarray, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_triconsistent_jsonb$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_triconsistent_jsonb_path" id="Function_10278ad9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_triconsistent_jsonb_path(internal, smallint, anyarray, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_triconsistent_jsonb_path$function$
]]></string>
			<comment><![CDATA[GIN support]]></comment>
		</function>
		<function name="gin_tsquery_consistent" id="Function_2f93b185" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_tsquery_consistent_6args$function$
CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_consistent(internal, smallint, tsquery, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_tsquery_consistent$function$
]]></string>
			<comment><![CDATA[GIN tsvector support (obsolete)]]></comment>
		</function>
		<function name="gin_tsquery_consistent_001" id="Function_7ec3505" isSystem="false" >
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="gin_tsquery_triconsistent" id="Function_1f77add4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gin_tsquery_triconsistent(internal, smallint, tsquery, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gin_tsquery_triconsistent$function$
]]></string>
			<comment><![CDATA[GIN tsvector support]]></comment>
		</function>
		<function name="ginarrayconsistent" id="Function_30a6704f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayconsistent(internal, smallint, anyarray, integer, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarrayconsistent$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginarrayextract" id="Function_1738604d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarrayextract_2args$function$
CREATE OR REPLACE FUNCTION pg_catalog.ginarrayextract(anyarray, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginarrayextract_001" id="Function_bb1f143" isSystem="false" >
			<comment><![CDATA[GIN array support (obsolete)]]></comment>
		</function>
		<function name="ginarraytriconsistent" id="Function_12114dac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginarraytriconsistent(internal, smallint, anyarray, integer, internal, internal, internal)
 RETURNS "char"
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginarraytriconsistent$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginbeginscan" id="Function_329397f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginbeginscan$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginbuild" id="Function_3a4f9ef0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginbuild$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginbuildempty" id="Function_22a232ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginbuildempty$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginbulkdelete" id="Function_2b340e8d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginbulkdelete$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="gincostestimate" id="Function_3a8727e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gincostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gincostestimate$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginendscan" id="Function_1186e4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginendscan$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="gingetbitmap" id="Function_3a4be0f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gingetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$gingetbitmap$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="gininsert" id="Function_67c729b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gininsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$gininsert$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginmarkpos" id="Function_279d4452" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginmarkpos$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginoptions" id="Function_cf4e949" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$ginoptions$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginqueryarrayextract" id="Function_3081325b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginqueryarrayextract(anyarray, internal, smallint, internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ginqueryarrayextract$function$
]]></string>
			<comment><![CDATA[GIN array support]]></comment>
		</function>
		<function name="ginrescan" id="Function_1c98a95e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginrescan$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginrestrpos" id="Function_29564805" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$ginrestrpos$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="ginvacuumcleanup" id="Function_339820bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ginvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$ginvacuumcleanup$function$
]]></string>
			<comment><![CDATA[gin(internal)]]></comment>
		</function>
		<function name="gist_box_compress" id="Function_cdc4bbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_consistent" id="Function_1bba741d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_consistent(internal, box, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_decompress" id="Function_c8e02ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_penalty" id="Function_a72004e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_picksplit" id="Function_18903c93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_same" id="Function_146564c3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_same(box, box, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_box_union" id="Function_2f70360f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_box_union(internal, internal)
 RETURNS box
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_box_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_circle_compress" id="Function_896cf0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_circle_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_circle_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_circle_consistent" id="Function_16e2d1e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_circle_consistent(internal, circle, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_circle_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_point_compress" id="Function_ea6c4a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_point_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_point_consistent" id="Function_305d2f9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_consistent(internal, point, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_point_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_point_distance" id="Function_22b3fd26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_point_distance(internal, point, integer, oid)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_point_distance$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_poly_compress" id="Function_1f00ccf9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_poly_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_poly_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gist_poly_consistent" id="Function_2dcb4f89" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gist_poly_consistent(internal, polygon, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gist_poly_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="gistbeginscan" id="Function_2b1dc96f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistbeginscan$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistbuild" id="Function_c5bdaef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistbuild$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistbuildempty" id="Function_1ce358cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistbuildempty$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistbulkdelete" id="Function_aa3fb84" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistbulkdelete$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistcostestimate" id="Function_2b808196" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistcostestimate$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistendscan" id="Function_36a3efd7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistendscan$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistgetbitmap" id="Function_1de2a80e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistgetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$gistgetbitmap$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistgettuple" id="Function_1052482b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistgettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$gistgettuple$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistinsert" id="Function_272e54f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistinsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$gistinsert$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistmarkpos" id="Function_327ce0b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistmarkpos$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistoptions" id="Function_2ec1ba23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$gistoptions$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistrescan" id="Function_1a367cb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistrescan$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistrestrpos" id="Function_2ce83f88" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$gistrestrpos$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gistvacuumcleanup" id="Function_23ab55ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gistvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$gistvacuumcleanup$function$
]]></string>
			<comment><![CDATA[gist(internal)]]></comment>
		</function>
		<function name="gtsquery_compress" id="Function_358c2b26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_compress$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_consistent" id="Function_31f0b19a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_consistent(internal, internal, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_consistent$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_decompress" id="Function_29a93750" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_decompress$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_penalty" id="Function_174b0ba4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_penalty$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_picksplit" id="Function_18ffc01b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_picksplit$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_same" id="Function_2dbe26fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_same(bigint, bigint, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_same$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsquery_union" id="Function_35268f9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsquery_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsquery_union$function$
]]></string>
			<comment><![CDATA[GiST tsquery support]]></comment>
		</function>
		<function name="gtsvector_compress" id="Function_2ba88a7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_compress$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_consistent" id="Function_1710d985" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_consistent(internal, gtsvector, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_consistent$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_decompress" id="Function_9422623" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_decompress$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_penalty" id="Function_30570547" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_penalty$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_picksplit" id="Function_1d1bdf4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_picksplit$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_same" id="Function_28c845dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_same(gtsvector, gtsvector, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_same$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvector_union" id="Function_309186f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.gtsvector_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$gtsvector_union$function$
]]></string>
			<comment><![CDATA[GiST tsvector support]]></comment>
		</function>
		<function name="gtsvectorin" id="Function_3cb9e72" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="gtsvectorout" id="Function_2916d0a6" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="has_any_column_privilege" id="Function_27bf2225" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_any_column_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$has_any_column_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on any column by username, rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_001" id="Function_22ec40ba" isSystem="false" >
			<comment><![CDATA[user privilege on any column by username, rel oid]]></comment>
		</function>
		<function name="has_any_column_privilege_002" id="Function_1fc31c7b" isSystem="false" >
			<comment><![CDATA[user privilege on any column by user oid, rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_003" id="Function_9856e89" isSystem="false" >
			<comment><![CDATA[user privilege on any column by user oid, rel oid]]></comment>
		</function>
		<function name="has_any_column_privilege_004" id="Function_445b638" isSystem="false" >
			<comment><![CDATA[current user privilege on any column by rel name]]></comment>
		</function>
		<function name="has_any_column_privilege_005" id="Function_2ad952d2" isSystem="false" >
			<comment><![CDATA[current user privilege on any column by rel oid]]></comment>
		</function>
		<function name="has_column_privilege" id="Function_35db234d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(name, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_id_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_id_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_id_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_id_id_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(text, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_name_attnum$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_column_privilege(oid, smallint, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_column_privilege_id_attnum$function$
]]></string>
			<comment><![CDATA[user privilege on column by username, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_001" id="Function_35baa58" isSystem="false" >
			<comment><![CDATA[user privilege on column by username, rel name, col attnum]]></comment>
		</function>
		<function name="has_column_privilege_002" id="Function_1c90fe80" isSystem="false" >
			<comment><![CDATA[user privilege on column by username, rel oid, col name]]></comment>
		</function>
		<function name="has_column_privilege_003" id="Function_3574c499" isSystem="false" >
			<comment><![CDATA[user privilege on column by username, rel oid, col attnum]]></comment>
		</function>
		<function name="has_column_privilege_004" id="Function_2b0d808f" isSystem="false" >
			<comment><![CDATA[user privilege on column by user oid, rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_005" id="Function_2a5ca579" isSystem="false" >
			<comment><![CDATA[user privilege on column by user oid, rel name, col attnum]]></comment>
		</function>
		<function name="has_column_privilege_006" id="Function_169ce312" isSystem="false" >
			<comment><![CDATA[user privilege on column by user oid, rel oid, col name]]></comment>
		</function>
		<function name="has_column_privilege_007" id="Function_63c1304" isSystem="false" >
			<comment><![CDATA[user privilege on column by user oid, rel oid, col attnum]]></comment>
		</function>
		<function name="has_column_privilege_008" id="Function_3d921cf" isSystem="false" >
			<comment><![CDATA[current user privilege on column by rel name, col name]]></comment>
		</function>
		<function name="has_column_privilege_009" id="Function_2c655172" isSystem="false" >
			<comment><![CDATA[current user privilege on column by rel name, col attnum]]></comment>
		</function>
		<function name="has_column_privilege_010" id="Function_b915286" isSystem="false" >
			<comment><![CDATA[current user privilege on column by rel oid, col name]]></comment>
		</function>
		<function name="has_column_privilege_011" id="Function_8cad70c" isSystem="false" >
			<comment><![CDATA[current user privilege on column by rel oid, col attnum]]></comment>
		</function>
		<function name="has_database_privilege" id="Function_315a7db7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_database_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_database_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on database by username, database name]]></comment>
		</function>
		<function name="has_database_privilege_001" id="Function_115acb24" isSystem="false" >
			<comment><![CDATA[user privilege on database by username, database oid]]></comment>
		</function>
		<function name="has_database_privilege_002" id="Function_1acbeee5" isSystem="false" >
			<comment><![CDATA[user privilege on database by user oid, database name]]></comment>
		</function>
		<function name="has_database_privilege_003" id="Function_3b8c112b" isSystem="false" >
			<comment><![CDATA[user privilege on database by user oid, database oid]]></comment>
		</function>
		<function name="has_database_privilege_004" id="Function_26aea8df" isSystem="false" >
			<comment><![CDATA[current user privilege on database by database name]]></comment>
		</function>
		<function name="has_database_privilege_005" id="Function_1141a3a1" isSystem="false" >
			<comment><![CDATA[current user privilege on database by database oid]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege" id="Function_2724a667" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_foreign_data_wrapper_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_foreign_data_wrapper_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_001" id="Function_12abc146" isSystem="false" >
			<comment><![CDATA[user privilege on foreign data wrapper by username, foreign data wrapper oid]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_002" id="Function_1aa610d4" isSystem="false" >
			<comment><![CDATA[user privilege on foreign data wrapper by user oid, foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_003" id="Function_f436068" isSystem="false" >
			<comment><![CDATA[user privilege on foreign data wrapper by user oid, foreign data wrapper oid]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_004" id="Function_156405d3" isSystem="false" >
			<comment><![CDATA[current user privilege on foreign data wrapper by foreign data wrapper name]]></comment>
		</function>
		<function name="has_foreign_data_wrapper_privilege_005" id="Function_1678962e" isSystem="false" >
			<comment><![CDATA[current user privilege on foreign data wrapper by foreign data wrapper oid]]></comment>
		</function>
		<function name="has_function_privilege" id="Function_265e851a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_function_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_function_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on function by username, function name]]></comment>
		</function>
		<function name="has_function_privilege_001" id="Function_252f97d3" isSystem="false" >
			<comment><![CDATA[user privilege on function by username, function oid]]></comment>
		</function>
		<function name="has_function_privilege_002" id="Function_e225290" isSystem="false" >
			<comment><![CDATA[user privilege on function by user oid, function name]]></comment>
		</function>
		<function name="has_function_privilege_003" id="Function_1d931f65" isSystem="false" >
			<comment><![CDATA[user privilege on function by user oid, function oid]]></comment>
		</function>
		<function name="has_function_privilege_004" id="Function_a30bf8c" isSystem="false" >
			<comment><![CDATA[current user privilege on function by function name]]></comment>
		</function>
		<function name="has_function_privilege_005" id="Function_2c14b387" isSystem="false" >
			<comment><![CDATA[current user privilege on function by function oid]]></comment>
		</function>
		<function name="has_language_privilege" id="Function_7668bc8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_language_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_language_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on language by username, language name]]></comment>
		</function>
		<function name="has_language_privilege_001" id="Function_128f50d2" isSystem="false" >
			<comment><![CDATA[user privilege on language by username, language oid]]></comment>
		</function>
		<function name="has_language_privilege_002" id="Function_1d38c826" isSystem="false" >
			<comment><![CDATA[user privilege on language by user oid, language name]]></comment>
		</function>
		<function name="has_language_privilege_003" id="Function_33b7d240" isSystem="false" >
			<comment><![CDATA[user privilege on language by user oid, language oid]]></comment>
		</function>
		<function name="has_language_privilege_004" id="Function_1032a19c" isSystem="false" >
			<comment><![CDATA[current user privilege on language by language name]]></comment>
		</function>
		<function name="has_language_privilege_005" id="Function_30eacf47" isSystem="false" >
			<comment><![CDATA[current user privilege on language by language oid]]></comment>
		</function>
		<function name="has_schema_privilege" id="Function_3a0d6364" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_schema_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_schema_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on schema by username, schema name]]></comment>
		</function>
		<function name="has_schema_privilege_001" id="Function_6136362" isSystem="false" >
			<comment><![CDATA[user privilege on schema by username, schema oid]]></comment>
		</function>
		<function name="has_schema_privilege_002" id="Function_e5d417f" isSystem="false" >
			<comment><![CDATA[user privilege on schema by user oid, schema name]]></comment>
		</function>
		<function name="has_schema_privilege_003" id="Function_38a9c05b" isSystem="false" >
			<comment><![CDATA[user privilege on schema by user oid, schema oid]]></comment>
		</function>
		<function name="has_schema_privilege_004" id="Function_9ff2071" isSystem="false" >
			<comment><![CDATA[current user privilege on schema by schema name]]></comment>
		</function>
		<function name="has_schema_privilege_005" id="Function_3651639f" isSystem="false" >
			<comment><![CDATA[current user privilege on schema by schema oid]]></comment>
		</function>
		<function name="has_sequence_privilege" id="Function_14443d64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_sequence_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_sequence_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on sequence by username, seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_001" id="Function_1586ce7d" isSystem="false" >
			<comment><![CDATA[user privilege on sequence by username, seq oid]]></comment>
		</function>
		<function name="has_sequence_privilege_002" id="Function_26a352af" isSystem="false" >
			<comment><![CDATA[user privilege on sequence by user oid, seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_003" id="Function_98b7df5" isSystem="false" >
			<comment><![CDATA[user privilege on sequence by user oid, seq oid]]></comment>
		</function>
		<function name="has_sequence_privilege_004" id="Function_2504e2d4" isSystem="false" >
			<comment><![CDATA[current user privilege on sequence by seq name]]></comment>
		</function>
		<function name="has_sequence_privilege_005" id="Function_2f75bb6f" isSystem="false" >
			<comment><![CDATA[current user privilege on sequence by seq oid]]></comment>
		</function>
		<function name="has_server_privilege" id="Function_18ed6552" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_server_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_server_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on server by username, server name]]></comment>
		</function>
		<function name="has_server_privilege_001" id="Function_31994f50" isSystem="false" >
			<comment><![CDATA[user privilege on server by username, server oid]]></comment>
		</function>
		<function name="has_server_privilege_002" id="Function_3fb8d12" isSystem="false" >
			<comment><![CDATA[user privilege on server by user oid, server name]]></comment>
		</function>
		<function name="has_server_privilege_003" id="Function_29b337ee" isSystem="false" >
			<comment><![CDATA[user privilege on server by user oid, server oid]]></comment>
		</function>
		<function name="has_server_privilege_004" id="Function_256130a" isSystem="false" >
			<comment><![CDATA[current user privilege on server by server name]]></comment>
		</function>
		<function name="has_server_privilege_005" id="Function_158b9bce" isSystem="false" >
			<comment><![CDATA[current user privilege on server by server oid]]></comment>
		</function>
		<function name="has_table_privilege" id="Function_2c69327b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_table_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_table_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on relation by username, rel name]]></comment>
		</function>
		<function name="has_table_privilege_001" id="Function_25fcd4" isSystem="false" >
			<comment><![CDATA[user privilege on relation by username, rel oid]]></comment>
		</function>
		<function name="has_table_privilege_002" id="Function_3b3313c0" isSystem="false" >
			<comment><![CDATA[user privilege on relation by user oid, rel name]]></comment>
		</function>
		<function name="has_table_privilege_003" id="Function_19872310" isSystem="false" >
			<comment><![CDATA[user privilege on relation by user oid, rel oid]]></comment>
		</function>
		<function name="has_table_privilege_004" id="Function_17626bd2" isSystem="false" >
			<comment><![CDATA[current user privilege on relation by rel name]]></comment>
		</function>
		<function name="has_table_privilege_005" id="Function_3948c1d6" isSystem="false" >
			<comment><![CDATA[current user privilege on relation by rel oid]]></comment>
		</function>
		<function name="has_tablespace_privilege" id="Function_51130ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_tablespace_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_tablespace_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on tablespace by username, tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_001" id="Function_12897135" isSystem="false" >
			<comment><![CDATA[user privilege on tablespace by username, tablespace oid]]></comment>
		</function>
		<function name="has_tablespace_privilege_002" id="Function_5ccf0e5" isSystem="false" >
			<comment><![CDATA[user privilege on tablespace by user oid, tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_003" id="Function_2808c00e" isSystem="false" >
			<comment><![CDATA[user privilege on tablespace by user oid, tablespace oid]]></comment>
		</function>
		<function name="has_tablespace_privilege_004" id="Function_2f7d78b" isSystem="false" >
			<comment><![CDATA[current user privilege on tablespace by tablespace name]]></comment>
		</function>
		<function name="has_tablespace_privilege_005" id="Function_181f4164" isSystem="false" >
			<comment><![CDATA[current user privilege on tablespace by tablespace oid]]></comment>
		</function>
		<function name="has_type_privilege" id="Function_1dd5b226" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.has_type_privilege(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$has_type_privilege_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on type by username, type name]]></comment>
		</function>
		<function name="has_type_privilege_001" id="Function_19467832" isSystem="false" >
			<comment><![CDATA[user privilege on type by username, type oid]]></comment>
		</function>
		<function name="has_type_privilege_002" id="Function_3681386d" isSystem="false" >
			<comment><![CDATA[user privilege on type by user oid, type name]]></comment>
		</function>
		<function name="has_type_privilege_003" id="Function_12a2582b" isSystem="false" >
			<comment><![CDATA[user privilege on type by user oid, type oid]]></comment>
		</function>
		<function name="has_type_privilege_004" id="Function_bd480ae" isSystem="false" >
			<comment><![CDATA[current user privilege on type by type name]]></comment>
		</function>
		<function name="has_type_privilege_005" id="Function_15debb33" isSystem="false" >
			<comment><![CDATA[current user privilege on type by type oid]]></comment>
		</function>
		<function name="hash_aclitem" id="Function_486b99a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_aclitem(aclitem)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_aclitem$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hash_array" id="Function_3b697451" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_array(anyarray)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_array$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hash_numeric" id="Function_328bc707" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_numeric(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_numeric$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hash_range" id="Function_3386a44" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hash_range(anyrange)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hash_range$function$
]]></string>
			<comment><![CDATA[hash a range]]></comment>
		</function>
		<function name="hashbeginscan" id="Function_1e3270c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashbeginscan$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashbpchar" id="Function_31b7b439" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbpchar(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashbpchar$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashbuild" id="Function_2fdf96b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashbuild$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashbuildempty" id="Function_12d13248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashbuildempty$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashbulkdelete" id="Function_3a0483bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashbulkdelete$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashchar" id="Function_3f9ce58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashchar("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashchar$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashcostestimate" id="Function_3aa8c8aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashcostestimate$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashendscan" id="Function_213a7141" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashendscan$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashenum" id="Function_27c0924c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashenum(anyenum)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashenum$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashfloat4" id="Function_35830fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashfloat4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashfloat4$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashfloat8" id="Function_4ac6dde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashfloat8(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashfloat8$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashgetbitmap" id="Function_1911e51" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashgetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$hashgetbitmap$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashgettuple" id="Function_a916507" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashgettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$hashgettuple$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashinet" id="Function_3916e105" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashinet(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashinet$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashinsert" id="Function_63888d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashinsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$hashinsert$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashint2" id="Function_2feda0ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint2(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint2$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashint2vector" id="Function_133b4b13" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint2vector(int2vector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint2vector$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashint4" id="Function_368f0511" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint4(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint4$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashint8" id="Function_316f598e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashint8(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashint8$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashmacaddr" id="Function_114b87d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashmacaddr(macaddr)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashmacaddr$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashmarkpos" id="Function_381f9269" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashmarkpos$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashname" id="Function_263f7274" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashname(name)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashname$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashoid" id="Function_1f76ffa5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoid(oid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashoid$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashoidvector" id="Function_2a9daa40" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoidvector(oidvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashoidvector$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashoptions" id="Function_1764cdbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$hashoptions$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashrescan" id="Function_120452a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashrescan$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashrestrpos" id="Function_5528c3a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$hashrestrpos$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashtext" id="Function_2f418032" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashtext(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashtext$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="hashvacuumcleanup" id="Function_a0baad4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$hashvacuumcleanup$function$
]]></string>
			<comment><![CDATA[hash(internal)]]></comment>
		</function>
		<function name="hashvarlena" id="Function_38415fc1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hashvarlena(internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashvarlena$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="height" id="Function_203f7a57" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.height(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_height$function$
]]></string>
			<comment><![CDATA[box height]]></comment>
		</function>
		<function name="host" id="Function_3978aecb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.host(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_host$function$
]]></string>
			<comment><![CDATA[show address octets only]]></comment>
		</function>
		<function name="hostmask" id="Function_2bbba3b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.hostmask(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_hostmask$function$
]]></string>
			<comment><![CDATA[hostmask of address]]></comment>
		</function>
		<function name="iclikejoinsel" id="Function_13434bdc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iclikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$iclikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of ILIKE]]></comment>
		</function>
		<function name="iclikesel" id="Function_261ab870" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iclikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$iclikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of ILIKE]]></comment>
		</function>
		<function name="icnlikejoinsel" id="Function_300633b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icnlikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icnlikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of NOT ILIKE]]></comment>
		</function>
		<function name="icnlikesel" id="Function_188ded9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icnlikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icnlikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of NOT ILIKE]]></comment>
		</function>
		<function name="icregexeqjoinsel" id="Function_3494f871" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexeqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexeqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of case-insensitive regex match]]></comment>
		</function>
		<function name="icregexeqsel" id="Function_11c0b21c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexeqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexeqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of case-insensitive regex match]]></comment>
		</function>
		<function name="icregexnejoinsel" id="Function_5790835" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexnejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexnejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of case-insensitive regex non-match]]></comment>
		</function>
		<function name="icregexnesel" id="Function_36e62250" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.icregexnesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$icregexnesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of case-insensitive regex non-match]]></comment>
		</function>
		<function name="inet_client_addr" id="Function_2ee78c03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_client_addr()
 RETURNS inet
 LANGUAGE internal
 STABLE
AS $function$inet_client_addr$function$
]]></string>
			<comment><![CDATA[inet address of the client]]></comment>
		</function>
		<function name="inet_client_port" id="Function_10646b76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_client_port()
 RETURNS integer
 LANGUAGE internal
 STABLE
AS $function$inet_client_port$function$
]]></string>
			<comment><![CDATA[client's port number for this connection]]></comment>
		</function>
		<function name="inet_gist_compress" id="Function_28a5910a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_consistent" id="Function_379703e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_consistent(internal, inet, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_decompress" id="Function_181fa2f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_penalty" id="Function_2adff1cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_picksplit" id="Function_342de6f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_same" id="Function_334ff613" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_same(inet, inet, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_gist_union" id="Function_13777075" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_gist_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_gist_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="inet_in" id="Function_34d48ad0" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_out" id="Function_7a724a5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_recv" id="Function_37bb5ad1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_recv(internal)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_send" id="Function_396ffa0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_send(inet)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="inet_server_addr" id="Function_22b9dc5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_server_addr()
 RETURNS inet
 LANGUAGE internal
 STABLE
AS $function$inet_server_addr$function$
]]></string>
			<comment><![CDATA[inet address of the server]]></comment>
		</function>
		<function name="inet_server_port" id="Function_37c6189" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inet_server_port()
 RETURNS integer
 LANGUAGE internal
 STABLE
AS $function$inet_server_port$function$
]]></string>
			<comment><![CDATA[server's port number for this connection]]></comment>
		</function>
		<function name="inetand" id="Function_1d8146ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetand(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetand$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="inetmi" id="Function_30a3e4c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetmi(inet, inet)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetmi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="inetmi_int8" id="Function_27b8be5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetmi_int8(inet, bigint)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetmi_int8$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="inetnot" id="Function_1c6e22ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetnot(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetnot$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="inetor" id="Function_15b0ded3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetor(inet, inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetor$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="inetpl" id="Function_172171f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inetpl(inet, bigint)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inetpl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="initcap" id="Function_e667756" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.initcap(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$initcap$function$
]]></string>
			<comment><![CDATA[capitalize each word]]></comment>
		</function>
		<function name="int2" id="Function_2ea68c2e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2(bigint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i4toi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(real)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ftoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(double precision)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtoi2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int2(numeric)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int2$function$
]]></string>
			<comment><![CDATA[convert numeric to int2]]></comment>
		</function>
		<function name="int24div" id="Function_351105e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24div(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int24eq" id="Function_3b1b65d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24eq(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int24ge" id="Function_27f5078c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24ge(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int24gt" id="Function_13323828" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24gt(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int24le" id="Function_36d6ddf5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24le(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int24lt" id="Function_1a308d82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24lt(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int24mi" id="Function_3974f181" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24mi(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int24mul" id="Function_3abb17b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24mul(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int24ne" id="Function_3986aca5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24ne(smallint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int24ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int24pl" id="Function_4582dcf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int24pl(smallint, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int24pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int28div" id="Function_2df20bb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28div(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int28eq" id="Function_39a0aab5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28eq(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int28ge" id="Function_b08f6b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28ge(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int28gt" id="Function_1549b920" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28gt(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int28le" id="Function_956c6e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28le(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int28lt" id="Function_21b0ba4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28lt(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int28mi" id="Function_4289270" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28mi(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int28mul" id="Function_1cf8aa85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28mul(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int28ne" id="Function_81b7b9b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28ne(smallint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int28ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int28pl" id="Function_92eaca4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int28pl(smallint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int2_001" id="Function_5d33ea6" isSystem="false" >
			<comment><![CDATA[convert float8 to int2]]></comment>
		</function>
		<function name="int2_002" id="Function_3b1bad62" isSystem="false" >
			<comment><![CDATA[convert float4 to int2]]></comment>
		</function>
		<function name="int2_003" id="Function_fe1e20" isSystem="false" >
			<comment><![CDATA[convert int4 to int2]]></comment>
		</function>
		<function name="int2_004" id="Function_197c1dbb" isSystem="false" >
			<comment><![CDATA[convert int8 to int2]]></comment>
		</function>
		<function name="int2_accum" id="Function_290d6908" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_accum(internal, smallint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int2_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_accum_inv" id="Function_2ce1f8bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_accum_inv(internal, smallint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int2_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_avg_accum" id="Function_2d0897de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_avg_accum(bigint[], smallint)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_avg_accum_inv" id="Function_1cf7ef30" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_avg_accum_inv(bigint[], smallint)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2_mul_cash" id="Function_2054a11d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_mul_cash(smallint, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int2_sum" id="Function_213d2943" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2_sum(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$int2_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int2abs" id="Function_2a571960" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2abs(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="int2and" id="Function_b85569d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2and(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="int2div" id="Function_1e5100a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2div(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int2eq" id="Function_3af21ba2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2eq(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int2ge" id="Function_2edbb835" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2ge(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int2gt" id="Function_137a736e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2gt(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int2in" id="Function_244cd4a2" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2int4_sum" id="Function_ea854e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2int4_sum(bigint[])
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2int4_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="int2larger" id="Function_24a89c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2larger(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="int2le" id="Function_b011e0a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2le(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int2lt" id="Function_2260d787" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2lt(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int2mi" id="Function_3183266c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mi(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int2mod" id="Function_2ddc1299" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="int2mul" id="Function_33c4aadc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2mul(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int2ne" id="Function_1dab5fb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2ne(smallint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int2ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int2not" id="Function_17f699ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2not(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="int2or" id="Function_29a12eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2or(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="int2out" id="Function_3a3905e7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2pl" id="Function_70f2cbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2pl(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int2recv" id="Function_18a52584" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2recv(internal)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2send" id="Function_297d4ee8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2send(smallint)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2shl" id="Function_235b6bca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2shl(smallint, integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="int2shr" id="Function_2daa6f71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2shr(smallint, integer)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="int2smaller" id="Function_a7e0a06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2smaller(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="int2um" id="Function_1f782aea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2um(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int2up" id="Function_fafe943" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2up(smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int2vectoreq" id="Function_c9fc4e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectoreq(int2vector, int2vector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectoreq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int2vectorin" id="Function_2ebe9e18" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2vectorout" id="Function_2779e6f5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2vectorrecv" id="Function_396b108f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorrecv(internal)
 RETURNS int2vector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2vectorsend" id="Function_d10ba93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2vectorsend(int2vector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2vectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int2xor" id="Function_192fee76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int2xor(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="int4" id="Function_31bd4f9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4("char")
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$chartoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i2toi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(double precision)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(real)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ftoi4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bigint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int4$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4(boolean)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bool_int4$function$
]]></string>
			<comment><![CDATA[convert bitstring to int4]]></comment>
		</function>
		<function name="int42div" id="Function_15b24ab0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42div(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int42eq" id="Function_34c73247" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42eq(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int42ge" id="Function_6dacfbe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42ge(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int42gt" id="Function_1afdd112" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42gt(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int42le" id="Function_323bad4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42le(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int42lt" id="Function_2195d6c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42lt(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int42mi" id="Function_41643a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42mi(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int42mul" id="Function_e70c188" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42mul(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int42ne" id="Function_34df2bae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42ne(integer, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int42ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int42pl" id="Function_136848ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int42pl(integer, smallint)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int42pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int48div" id="Function_35ab9f2f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48div(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int48eq" id="Function_11fc4691" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48eq(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int48ge" id="Function_31010fea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48ge(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int48gt" id="Function_fc7c414" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48gt(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int48le" id="Function_b0e339a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48le(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int48lt" id="Function_93d2ce7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48lt(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int48mi" id="Function_323bb726" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48mi(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int48mul" id="Function_28f1cd5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48mul(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int48ne" id="Function_2aa2586b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48ne(integer, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int48ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int48pl" id="Function_d2d03f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int48pl(integer, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int4_001" id="Function_9b60e0c" isSystem="false" >
			<comment><![CDATA[convert numeric to int4]]></comment>
		</function>
		<function name="int4_002" id="Function_39f2fe3a" isSystem="false" >
			<comment><![CDATA[convert boolean to int4]]></comment>
		</function>
		<function name="int4_003" id="Function_376e8bb8" isSystem="false" >
			<comment><![CDATA[convert int2 to int4]]></comment>
		</function>
		<function name="int4_004" id="Function_2ba0e57f" isSystem="false" >
			<comment><![CDATA[convert float8 to int4]]></comment>
		</function>
		<function name="int4_005" id="Function_38e43005" isSystem="false" >
			<comment><![CDATA[convert float4 to int4]]></comment>
		</function>
		<function name="int4_006" id="Function_2dff14a" isSystem="false" >
			<comment><![CDATA[convert int8 to int4]]></comment>
		</function>
		<function name="int4_007" id="Function_8782e30" isSystem="false" >
			<comment><![CDATA[convert char to int4]]></comment>
		</function>
		<function name="int4_accum" id="Function_3171ae67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_accum(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int4_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_accum_inv" id="Function_2605494d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_accum_inv(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int4_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_avg_accum" id="Function_1bd6d449" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_avg_accum(bigint[], integer)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_avg_accum_inv" id="Function_59c0659" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_avg_accum_inv(bigint[], integer)
 RETURNS bigint[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_avg_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4_mul_cash" id="Function_3f2d041" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_mul_cash(integer, money)
 RETURNS money
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_mul_cash$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int4_sum" id="Function_1cb2214b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4_sum(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$int4_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int4abs" id="Function_2f5856ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4abs(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="int4and" id="Function_313d4b87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4and(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="int4div" id="Function_2f2abca3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4div(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int4eq" id="Function_260f60f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4eq(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int4ge" id="Function_1b00cee9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4ge(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int4gt" id="Function_3af0a564" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4gt(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int4in" id="Function_25dd0dd6" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4inc" id="Function_1df590a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4inc(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4inc$function$
]]></string>
			<comment><![CDATA[increment]]></comment>
		</function>
		<function name="int4larger" id="Function_31d59ed5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4larger(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="int4le" id="Function_1bc5fdd2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4le(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int4lt" id="Function_26734f1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4lt(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int4mi" id="Function_e0ecc12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mi(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int4mod" id="Function_2278cd05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="int4mul" id="Function_168e8dd6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4mul(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int4ne" id="Function_2e6409d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4ne(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int4ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int4not" id="Function_24f74017" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4not(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="int4or" id="Function_1eca6349" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4or(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="int4out" id="Function_10e654b4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4pl" id="Function_1b5eb176" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4pl(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int4range" id="Function_17297359" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int4range(integer, integer, text)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[int4range constructor]]></comment>
		</function>
		<function name="int4range_001" id="Function_32184a1f" isSystem="false" >
			<comment><![CDATA[int4range constructor]]></comment>
		</function>
		<function name="int4range_canonical" id="Function_2fd90ad6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range_canonical(int4range)
 RETURNS int4range
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4range_canonical$function$
]]></string>
			<comment><![CDATA[convert an int4 range to canonical form]]></comment>
		</function>
		<function name="int4range_subdiff" id="Function_21940b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4range_subdiff(integer, integer)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4range_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two int4 values]]></comment>
		</function>
		<function name="int4recv" id="Function_1d69666e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4recv(internal)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4send" id="Function_93bcca9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4send(integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int4shl" id="Function_7eee103" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4shl(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="int4shr" id="Function_2c5fbf7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4shr(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="int4smaller" id="Function_22c0842b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4smaller(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="int4um" id="Function_552d125" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4um(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int4up" id="Function_1c450d55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4up(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int4xor" id="Function_6a333a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int4xor(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="int8" id="Function_20e2783f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8(smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int28$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int48$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(oid)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(real)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ftoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtoi8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(bit)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bittoint8$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8(numeric)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_int8$function$
]]></string>
			<comment><![CDATA[convert oid to int8]]></comment>
		</function>
		<function name="int82div" id="Function_7013f93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82div(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int82eq" id="Function_31fe6b46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82eq(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int82ge" id="Function_81394f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82ge(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int82gt" id="Function_381b4f0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82gt(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int82le" id="Function_3a5c4f2a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82le(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int82lt" id="Function_33c9ecdc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82lt(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int82mi" id="Function_23153b47" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82mi(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int82mul" id="Function_12276b91" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82mul(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int82ne" id="Function_81f21f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82ne(bigint, smallint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int82ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int82pl" id="Function_21efdaa3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int82pl(bigint, smallint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int82pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int84div" id="Function_1084f25c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84div(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int84eq" id="Function_16bc76e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84eq(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int84ge" id="Function_2bae9a41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84ge(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int84gt" id="Function_1c5e2a56" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84gt(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int84le" id="Function_1b2585d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84le(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int84lt" id="Function_292e3c04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84lt(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int84mi" id="Function_12448bdf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84mi(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int84mul" id="Function_1d88bdb6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84mul(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int84ne" id="Function_37967089" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84ne(bigint, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int84ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int84pl" id="Function_2ab5d2b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int84pl(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int84pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8_001" id="Function_2123ea9" isSystem="false" >
			<comment><![CDATA[convert numeric to int8]]></comment>
		</function>
		<function name="int8_002" id="Function_fd3b88c" isSystem="false" >
			<comment><![CDATA[convert bitstring to int8]]></comment>
		</function>
		<function name="int8_003" id="Function_1f3f8edc" isSystem="false" >
			<comment><![CDATA[convert int4 to int8]]></comment>
		</function>
		<function name="int8_004" id="Function_18242e7f" isSystem="false" >
			<comment><![CDATA[convert float8 to int8]]></comment>
		</function>
		<function name="int8_005" id="Function_21e7277a" isSystem="false" >
			<comment><![CDATA[convert float4 to int8]]></comment>
		</function>
		<function name="int8_006" id="Function_fe49323" isSystem="false" >
			<comment><![CDATA[convert int2 to int8]]></comment>
		</function>
		<function name="int8_accum" id="Function_5b89a17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_accum(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8_accum_inv" id="Function_d6dc8c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_accum_inv(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8_avg" id="Function_28a297a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg(bigint[])
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="int8_avg_accum" id="Function_940c79d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_avg_accum(internal, bigint)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8_sum" id="Function_33b606fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8_sum(numeric, bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$int8_sum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8abs" id="Function_199d30a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8abs(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="int8and" id="Function_c9bbcdc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8and(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="int8dec" id="Function_32513d80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8dec(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8dec$function$
]]></string>
			<comment><![CDATA[decrement]]></comment>
		</function>
		<function name="int8dec_any" id="Function_31aaa442" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8dec_any(bigint, "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8dec_any$function$
]]></string>
			<comment><![CDATA[decrement, ignores second argument]]></comment>
		</function>
		<function name="int8div" id="Function_2f17c0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8div(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="int8eq" id="Function_25579f08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8eq(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="int8ge" id="Function_27563a41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8ge(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="int8gt" id="Function_32ecd4f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8gt(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="int8in" id="Function_1f3623db" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8inc" id="Function_2ddd97c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8inc$function$
]]></string>
			<comment><![CDATA[increment]]></comment>
		</function>
		<function name="int8inc_any" id="Function_1521e4fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc_any(bigint, "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8inc_any$function$
]]></string>
			<comment><![CDATA[increment, ignores second argument]]></comment>
		</function>
		<function name="int8inc_float8_float8" id="Function_103115e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8inc_float8_float8(bigint, double precision, double precision)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8inc_float8_float8$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="int8larger" id="Function_17aa19c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8larger(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="int8le" id="Function_33d14de7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8le(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="int8lt" id="Function_ecc675a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8lt(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="int8mi" id="Function_16eda8d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mi(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int8mod" id="Function_8de9ee4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="int8mul" id="Function_26874d39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8mul(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="int8ne" id="Function_37b884e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8ne(bigint, bigint)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$int8ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="int8not" id="Function_309348f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8not(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="int8or" id="Function_37d650da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8or(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="int8out" id="Function_4954649" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8pl" id="Function_27ec5535" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8pl(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8pl_inet" id="Function_2b861ff9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8pl_inet(bigint, inet)
 RETURNS inet
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8range" id="Function_1c7e7211" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.int8range(bigint, bigint, text)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[int8range constructor]]></comment>
		</function>
		<function name="int8range_001" id="Function_112bb297" isSystem="false" >
			<comment><![CDATA[int8range constructor]]></comment>
		</function>
		<function name="int8range_canonical" id="Function_36610257" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range_canonical(int8range)
 RETURNS int8range
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8range_canonical$function$
]]></string>
			<comment><![CDATA[convert an int8 range to canonical form]]></comment>
		</function>
		<function name="int8range_subdiff" id="Function_ad5ffa3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8range_subdiff(bigint, bigint)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8range_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two int8 values]]></comment>
		</function>
		<function name="int8recv" id="Function_23f2682b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8recv(internal)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8send" id="Function_68ba9a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8send(bigint)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="int8shl" id="Function_21e4f3c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8shl(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8shl$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="int8shr" id="Function_248ab872" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8shr(bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8shr$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="int8smaller" id="Function_6d478c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8smaller(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="int8um" id="Function_f322708" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8um(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="int8up" id="Function_3270b283" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8up(bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8up$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="int8xor" id="Function_379dee23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.int8xor(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8xor$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="integer_pl_date" id="Function_1b48f831" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.integer_pl_date(integer, date)
 RETURNS date
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="inter_lb" id="Function_22755e4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_lb(line, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inter_lb$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="inter_sb" id="Function_100cf10c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_sb(lseg, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inter_sb$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="inter_sl" id="Function_18f1f9a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.inter_sl(lseg, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inter_sl$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="internal_in" id="Function_15dc8f49" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="internal_out" id="Function_16272c05" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval" id="Function_13994e96" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."interval"(reltime)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltime_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(time without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_interval$function$
CREATE OR REPLACE FUNCTION pg_catalog."interval"(interval, integer)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_scale$function$
]]></string>
			<comment><![CDATA[convert reltime to interval]]></comment>
		</function>
		<function name="interval_001" id="Function_64c30f2" isSystem="false" >
			<comment><![CDATA[adjust interval precision]]></comment>
		</function>
		<function name="interval_002" id="Function_55b96b2" isSystem="false" >
			<comment><![CDATA[convert time to interval]]></comment>
		</function>
		<function name="interval_accum" id="Function_bbe91e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_accum(interval[], interval)
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="interval_accum_inv" id="Function_1a889d80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_accum_inv(interval[], interval)
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="interval_avg" id="Function_fd7b0d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_avg(interval[])
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="interval_cmp" id="Function_f4de4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_cmp(interval, interval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="interval_div" id="Function_132c3105" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_div(interval, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="interval_eq" id="Function_182a1e6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_eq(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="interval_ge" id="Function_11451fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_ge(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="interval_gt" id="Function_1f5e7c03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_gt(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="interval_hash" id="Function_19d8d6cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_hash(interval)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="interval_in" id="Function_c3fa65c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_larger" id="Function_7a7325f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_larger(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="interval_le" id="Function_28472dc2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_le(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="interval_lt" id="Function_380e14d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_lt(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="interval_mi" id="Function_10571124" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_mi(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="interval_mul" id="Function_21b8462c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_mul(interval, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="interval_ne" id="Function_3430566a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_ne(interval, interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$interval_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="interval_out" id="Function_310bd4ed" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_pl" id="Function_16f52218" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_pl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_date" id="Function_1a865e47" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_date(interval, date)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_time" id="Function_546e7a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_time(interval, time without time zone)
 RETURNS time without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_timestamp" id="Function_2a6aa1e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timestamp(interval, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_timestamptz" id="Function_a6c532d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timestamptz(interval, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_pl_timetz" id="Function_22005da0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_pl_timetz(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select $2 + $1$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="interval_recv" id="Function_aa12248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_recv(internal, oid, integer)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_send" id="Function_22aff2a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_send(interval)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="interval_smaller" id="Function_458e72d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_smaller(interval, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="interval_transform" id="Function_366710da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_transform$function$
]]></string>
			<comment><![CDATA[transform an interval length coercion]]></comment>
		</function>
		<function name="interval_um" id="Function_39369bbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.interval_um(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_um$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="intervaltypmodin" id="Function_d162e79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.intervaltypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$intervaltypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="intervaltypmodout" id="Function_256e4862" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="intinterval" id="Function_276b99" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.intinterval(abstime, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$intinterval$function$
]]></string>
			<comment><![CDATA[implementation of <?> operator]]></comment>
		</function>
		<function name="isclosed" id="Function_b14f2d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isclosed(path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_isclosed$function$
]]></string>
			<comment><![CDATA[path closed?]]></comment>
		</function>
		<function name="isempty" id="Function_17fa7c17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isempty(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_empty$function$
]]></string>
			<comment><![CDATA[is the range empty?]]></comment>
		</function>
		<function name="isfinite" id="Function_27885c9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isfinite(abstime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_finite$function$
CREATE OR REPLACE FUNCTION pg_catalog.isfinite(interval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_finite$function$
]]></string>
			<comment><![CDATA[finite date?]]></comment>
		</function>
		<function name="isfinite_001" id="Function_18114aaf" isSystem="false" >
			<comment><![CDATA[finite timestamp?]]></comment>
		</function>
		<function name="isfinite_002" id="Function_a76d27c" isSystem="false" >
			<comment><![CDATA[finite interval?]]></comment>
		</function>
		<function name="isfinite_003" id="Function_2185f02a" isSystem="false" >
			<comment><![CDATA[finite timestamp?]]></comment>
		</function>
		<function name="isfinite_004" id="Function_19cdfb62" isSystem="false" >
			<comment><![CDATA[finite abstime?]]></comment>
		</function>
		<function name="ishorizontal" id="Function_8600fbd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_horizontal$function$
CREATE OR REPLACE FUNCTION pg_catalog.ishorizontal(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[horizontally aligned]]></comment>
		</function>
		<function name="ishorizontal_001" id="Function_270540a" isSystem="false" >
			<comment><![CDATA[horizontal]]></comment>
		</function>
		<function name="ishorizontal_002" id="Function_209f1465" isSystem="false" >
			<comment><![CDATA[horizontal]]></comment>
		</function>
		<function name="iso8859_1_to_utf8" id="Function_399d314d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso8859_1_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859_1', $function$iso8859_1_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN1 to UTF8]]></comment>
		</function>
		<function name="iso8859_to_utf8" id="Function_bc444e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso8859_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859', $function$iso8859_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-8 to UTF8]]></comment>
		</function>
		<function name="iso_to_koi8r" id="Function_1dd56f5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to KOI8R]]></comment>
		</function>
		<function name="iso_to_mic" id="Function_3a6741b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to MULE_INTERNAL]]></comment>
		</function>
		<function name="iso_to_win1251" id="Function_52bec9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to WIN1251]]></comment>
		</function>
		<function name="iso_to_win866" id="Function_3ab4503b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.iso_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$iso_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for ISO-8859-5 to WIN866]]></comment>
		</function>
		<function name="isopen" id="Function_4db2811" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isopen(path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_isopen$function$
]]></string>
			<comment><![CDATA[path open?]]></comment>
		</function>
		<function name="isparallel" id="Function_25e20905" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isparallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_parallel$function$
CREATE OR REPLACE FUNCTION pg_catalog.isparallel(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_parallel$function$
]]></string>
			<comment><![CDATA[parallel]]></comment>
		</function>
		<function name="isparallel_001" id="Function_9c32235" isSystem="false" >
			<comment><![CDATA[parallel]]></comment>
		</function>
		<function name="isperp" id="Function_39b1e0b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isperp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_perp$function$
CREATE OR REPLACE FUNCTION pg_catalog.isperp(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_perp$function$
]]></string>
			<comment><![CDATA[perpendicular]]></comment>
		</function>
		<function name="isperp_001" id="Function_660f258" isSystem="false" >
			<comment><![CDATA[perpendicular]]></comment>
		</function>
		<function name="isvertical" id="Function_bd80360" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.isvertical(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_vertical$function$
CREATE OR REPLACE FUNCTION pg_catalog.isvertical(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[vertically aligned]]></comment>
		</function>
		<function name="isvertical_001" id="Function_1fc275f6" isSystem="false" >
			<comment><![CDATA[vertical]]></comment>
		</function>
		<function name="isvertical_002" id="Function_1d6d5981" isSystem="false" >
			<comment><![CDATA[vertical]]></comment>
		</function>
		<function name="johab_to_utf8" id="Function_e7452ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.johab_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_johab', $function$johab_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for JOHAB to UTF8]]></comment>
		</function>
		<function name="json_agg" id="Function_2bfd17a4" isSystem="false" >
			<comment><![CDATA[aggregate input into json]]></comment>
		</function>
		<function name="json_agg_finalfn" id="Function_2616efe0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_agg_finalfn(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE
AS $function$json_agg_finalfn$function$
]]></string>
			<comment><![CDATA[json aggregate final function]]></comment>
		</function>
		<function name="json_agg_transfn" id="Function_d2b348e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_agg_transfn(internal, anyelement)
 RETURNS internal
 LANGUAGE internal
 STABLE
AS $function$json_agg_transfn$function$
]]></string>
			<comment><![CDATA[json aggregate transition function]]></comment>
		</function>
		<function name="json_array_element" id="Function_1f8ea99f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_element(from_json json, element_index integer)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_array_element$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="json_array_element_text" id="Function_efa33c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_element_text(from_json json, element_index integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_array_element_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="json_array_elements" id="Function_17d3ea85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_elements(from_json json, OUT value json)
 RETURNS SETOF json
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_array_elements$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</function>
		<function name="json_array_elements_text" id="Function_1b17ea38" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_elements_text(from_json json, OUT value text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_array_elements_text$function$
]]></string>
			<comment><![CDATA[elements of json array]]></comment>
		</function>
		<function name="json_array_length" id="Function_2e4495ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_array_length(json)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_array_length$function$
]]></string>
			<comment><![CDATA[length of json array]]></comment>
		</function>
		<function name="json_build_array" id="Function_27ce87f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_array()
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_array_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_build_array(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_array$function$
]]></string>
			<comment><![CDATA[build a json array from any inputs]]></comment>
		</function>
		<function name="json_build_array_001" id="Function_3a41c457" isSystem="false" >
			<comment><![CDATA[build an empty json array]]></comment>
		</function>
		<function name="json_build_object" id="Function_70c07ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_build_object()
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_object_noargs$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_build_object(VARIADIC "any")
 RETURNS json
 LANGUAGE internal
 STABLE
AS $function$json_build_object$function$
]]></string>
			<comment><![CDATA[build a json object from pairwise key/value inputs]]></comment>
		</function>
		<function name="json_build_object_001" id="Function_35460075" isSystem="false" >
			<comment><![CDATA[build an empty json object]]></comment>
		</function>
		<function name="json_each" id="Function_2ddce3ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_each(from_json json, OUT key text, OUT value json)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_each$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</function>
		<function name="json_each_text" id="Function_8653fb4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_each_text(from_json json, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_each_text$function$
]]></string>
			<comment><![CDATA[key value pairs of a json object]]></comment>
		</function>
		<function name="json_extract_path" id="Function_39db538" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_extract_path(from_json json, VARIADIC path_elems text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_extract_path$function$
]]></string>
			<comment><![CDATA[get value from json with path elements]]></comment>
		</function>
		<function name="json_extract_path_text" id="Function_fc96f0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_extract_path_text(from_json json, VARIADIC path_elems text[])
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_extract_path_text$function$
]]></string>
			<comment><![CDATA[get value from json as text with path elements]]></comment>
		</function>
		<function name="json_in" id="Function_2351edb3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_object" id="Function_27696feb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object$function$
CREATE OR REPLACE FUNCTION pg_catalog.json_object(text[], text[])
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object_two_arg$function$
]]></string>
			<comment><![CDATA[map text array of key value pairs to json object]]></comment>
		</function>
		<function name="json_object_001" id="Function_34b025f5" isSystem="false" >
			<comment><![CDATA[map text arrays of keys and values to json object]]></comment>
		</function>
		<function name="json_object_agg" id="Function_1ef063d7" isSystem="false" >
			<comment><![CDATA[aggregate input into a json object]]></comment>
		</function>
		<function name="json_object_agg_finalfn" id="Function_8972de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_agg_finalfn(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE
AS $function$json_object_agg_finalfn$function$
]]></string>
			<comment><![CDATA[json object aggregate final function]]></comment>
		</function>
		<function name="json_object_agg_transfn" id="Function_2bc22d42" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_agg_transfn(internal, "any", "any")
 RETURNS internal
 LANGUAGE internal
 STABLE
AS $function$json_object_agg_transfn$function$
]]></string>
			<comment><![CDATA[json object aggregate transition function]]></comment>
		</function>
		<function name="json_object_field" id="Function_1e37d918" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_field(from_json json, field_name text)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object_field$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="json_object_field_text" id="Function_8ce8cc5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_field_text(from_json json, field_name text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_object_field_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="json_object_keys" id="Function_14a7d9b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_object_keys(json)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$json_object_keys$function$
]]></string>
			<comment><![CDATA[get json object keys]]></comment>
		</function>
		<function name="json_out" id="Function_efa9d28" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_populate_record" id="Function_dd99fae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_populate_record(base anyelement, from_json json, use_json_as_text boolean DEFAULT false)
 RETURNS anyelement
 LANGUAGE internal
 STABLE
AS $function$json_populate_record$function$
]]></string>
			<comment><![CDATA[get record fields from a json object]]></comment>
		</function>
		<function name="json_populate_recordset" id="Function_e3aa937" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_populate_recordset(base anyelement, from_json json, use_json_as_text boolean DEFAULT false)
 RETURNS SETOF anyelement
 LANGUAGE internal
 STABLE ROWS 100
AS $function$json_populate_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a json array of objects]]></comment>
		</function>
		<function name="json_recv" id="Function_66db74e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_recv(internal)
 RETURNS json
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_send" id="Function_32db0379" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_send(json)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="json_to_record" id="Function_a4a87b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_to_record(json)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$json_to_record$function$
]]></string>
			<comment><![CDATA[get record fields from a json object]]></comment>
		</function>
		<function name="json_to_recordset" id="Function_e155c6f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_to_recordset(json)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 100
AS $function$json_to_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a json array of objects]]></comment>
		</function>
		<function name="json_typeof" id="Function_45e680e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.json_typeof(json)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$json_typeof$function$
]]></string>
			<comment><![CDATA[get the type of a json value]]></comment>
		</function>
		<function name="jsonb_array_element" id="Function_535c8f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_element(from_json jsonb, element_index integer)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_array_element$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="jsonb_array_element_text" id="Function_1e58d0fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_element_text(from_json jsonb, element_index integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_array_element_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="jsonb_array_elements" id="Function_2571c8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_elements(from_json jsonb, OUT value jsonb)
 RETURNS SETOF jsonb
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_array_elements$function$
]]></string>
			<comment><![CDATA[elements of a jsonb array]]></comment>
		</function>
		<function name="jsonb_array_elements_text" id="Function_13cb56fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_elements_text(from_json jsonb, OUT value text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_array_elements_text$function$
]]></string>
			<comment><![CDATA[elements of jsonb array]]></comment>
		</function>
		<function name="jsonb_array_length" id="Function_27de5238" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_array_length(jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_array_length$function$
]]></string>
			<comment><![CDATA[length of jsonb array]]></comment>
		</function>
		<function name="jsonb_cmp" id="Function_c503b33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_cmp(jsonb, jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="jsonb_contained" id="Function_37ef6b04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_contained(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="jsonb_contains" id="Function_48d585f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_contains(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_contains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="jsonb_each" id="Function_2f4e82da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_each(from_json jsonb, OUT key text, OUT value jsonb)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_each$function$
]]></string>
			<comment><![CDATA[key value pairs of a jsonb object]]></comment>
		</function>
		<function name="jsonb_each_text" id="Function_1d0fecb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_each_text(from_json jsonb, OUT key text, OUT value text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_each_text$function$
]]></string>
			<comment><![CDATA[key value pairs of a jsonb object]]></comment>
		</function>
		<function name="jsonb_eq" id="Function_3381f0aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_eq(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="jsonb_exists" id="Function_12b54b4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists(jsonb, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_exists$function$
]]></string>
			<comment><![CDATA[implementation of ? operator]]></comment>
		</function>
		<function name="jsonb_exists_all" id="Function_293f6620" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists_all(jsonb, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_exists_all$function$
]]></string>
			<comment><![CDATA[implementation of ?& operator]]></comment>
		</function>
		<function name="jsonb_exists_any" id="Function_22b1f6f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_exists_any(jsonb, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_exists_any$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="jsonb_extract_path" id="Function_9e8dff3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_extract_path(from_json jsonb, VARIADIC path_elems text[])
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_extract_path$function$
]]></string>
			<comment><![CDATA[get value from jsonb with path elements]]></comment>
		</function>
		<function name="jsonb_extract_path_text" id="Function_74a464" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_extract_path_text(from_json jsonb, VARIADIC path_elems text[])
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_extract_path_text$function$
]]></string>
			<comment><![CDATA[get value from jsonb as text with path elements]]></comment>
		</function>
		<function name="jsonb_ge" id="Function_7620dca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_ge(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="jsonb_gt" id="Function_a8cba1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_gt(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="jsonb_hash" id="Function_288e4b0a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_hash(jsonb)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="jsonb_in" id="Function_1fe198de" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_le" id="Function_12edf218" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_le(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="jsonb_lt" id="Function_37df9b63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_lt(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="jsonb_ne" id="Function_8da61a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_ne(jsonb, jsonb)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="jsonb_object_field" id="Function_2e03998d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_field(from_json jsonb, field_name text)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_object_field$function$
]]></string>
			<comment><![CDATA[implementation of -> operator]]></comment>
		</function>
		<function name="jsonb_object_field_text" id="Function_3788f628" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_field_text(from_json jsonb, field_name text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_object_field_text$function$
]]></string>
			<comment><![CDATA[implementation of ->> operator]]></comment>
		</function>
		<function name="jsonb_object_keys" id="Function_3704e59c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_object_keys(jsonb)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$jsonb_object_keys$function$
]]></string>
			<comment><![CDATA[get jsonb object keys]]></comment>
		</function>
		<function name="jsonb_out" id="Function_94692bf" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_populate_record" id="Function_21583c61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_populate_record(anyelement, jsonb)
 RETURNS anyelement
 LANGUAGE internal
 STABLE
AS $function$jsonb_populate_record$function$
]]></string>
			<comment><![CDATA[get record fields from a jsonb object]]></comment>
		</function>
		<function name="jsonb_populate_recordset" id="Function_3a69f082" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_populate_recordset(anyelement, jsonb)
 RETURNS SETOF anyelement
 LANGUAGE internal
 STABLE ROWS 100
AS $function$jsonb_populate_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a jsonb array of objects]]></comment>
		</function>
		<function name="jsonb_recv" id="Function_2dca3bd3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_recv(internal)
 RETURNS jsonb
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_send" id="Function_250b9b4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_send(jsonb)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="jsonb_to_record" id="Function_2e53b480" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_to_record(jsonb)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$jsonb_to_record$function$
]]></string>
			<comment><![CDATA[get record fields from a json object]]></comment>
		</function>
		<function name="jsonb_to_recordset" id="Function_11f863c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_to_recordset(jsonb)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 100
AS $function$jsonb_to_recordset$function$
]]></string>
			<comment><![CDATA[get set of records with fields from a json array of objects]]></comment>
		</function>
		<function name="jsonb_typeof" id="Function_3a3252d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.jsonb_typeof(jsonb)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$jsonb_typeof$function$
]]></string>
			<comment><![CDATA[get the type of a jsonb value]]></comment>
		</function>
		<function name="justify_days" id="Function_205d4f6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_days(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_justify_days$function$
]]></string>
			<comment><![CDATA[promote groups of 30 days to numbers of months]]></comment>
		</function>
		<function name="justify_hours" id="Function_2df4f06a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_hours(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_justify_hours$function$
]]></string>
			<comment><![CDATA[promote groups of 24 hours to numbers of days]]></comment>
		</function>
		<function name="justify_interval" id="Function_4c87935" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.justify_interval(interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_justify_interval$function$
]]></string>
			<comment><![CDATA[promote groups of 24 hours to numbers of days and promote groups of 30 days to numbers of months]]></comment>
		</function>
		<function name="koi8r_to_iso" id="Function_2f04a156" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to ISO-8859-5]]></comment>
		</function>
		<function name="koi8r_to_mic" id="Function_72bd449" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to MULE_INTERNAL]]></comment>
		</function>
		<function name="koi8r_to_utf8" id="Function_18568ba3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$koi8r_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to UTF8]]></comment>
		</function>
		<function name="koi8r_to_win1251" id="Function_761d8ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to WIN1251]]></comment>
		</function>
		<function name="koi8r_to_win866" id="Function_277f8ce4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8r_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$koi8r_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8R to WIN866]]></comment>
		</function>
		<function name="koi8u_to_utf8" id="Function_25158b03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.koi8u_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$koi8u_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for KOI8U to UTF8]]></comment>
		</function>
		<function name="lag" id="Function_24bbe007" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lag$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lag_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lag(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lag_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the preceding row value]]></comment>
		</function>
		<function name="lag_001" id="Function_59ef995" isSystem="false" >
			<comment><![CDATA[fetch the Nth preceding row value]]></comment>
		</function>
		<function name="lag_002" id="Function_1f794cf6" isSystem="false" >
			<comment><![CDATA[fetch the Nth preceding row value with default]]></comment>
		</function>
		<function name="language_handler_in" id="Function_147968b5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="language_handler_out" id="Function_32eeb1e7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="last_value" id="Function_26e27095" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.last_value(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_last_value$function$
]]></string>
			<comment><![CDATA[fetch the last row value]]></comment>
		</function>
		<function name="lastval" id="Function_92e6748" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lastval()
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lastval$function$
]]></string>
			<comment><![CDATA[current value from last used sequence]]></comment>
		</function>
		<function name="latin1_to_mic" id="Function_2f4b22b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin1_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$latin1_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN1 to MULE_INTERNAL]]></comment>
		</function>
		<function name="latin2_to_mic" id="Function_245f1b75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin2_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$latin2_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN2 to MULE_INTERNAL]]></comment>
		</function>
		<function name="latin2_to_win1250" id="Function_1f39f46a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin2_to_win1250(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$latin2_to_win1250$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN2 to WIN1250]]></comment>
		</function>
		<function name="latin3_to_mic" id="Function_1c68468e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin3_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$latin3_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN3 to MULE_INTERNAL]]></comment>
		</function>
		<function name="latin4_to_mic" id="Function_30815ac4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.latin4_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$latin4_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for LATIN4 to MULE_INTERNAL]]></comment>
		</function>
		<function name="lead" id="Function_27d99498" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lead$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lead_with_offset$function$
CREATE OR REPLACE FUNCTION pg_catalog.lead(anyelement, integer, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_lead_with_offset_and_default$function$
]]></string>
			<comment><![CDATA[fetch the following row value]]></comment>
		</function>
		<function name="lead_001" id="Function_313649ff" isSystem="false" >
			<comment><![CDATA[fetch the Nth following row value]]></comment>
		</function>
		<function name="lead_002" id="Function_2f8ca241" isSystem="false" >
			<comment><![CDATA[fetch the Nth following row value with default]]></comment>
		</function>
		<function name="left" id="Function_281ccd1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."left"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_left$function$
]]></string>
			<comment><![CDATA[extract the first n characters]]></comment>
		</function>
		<function name="length" id="Function_24277c6d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_length$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea, name)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$length_in_encoding$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitlength$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.length(tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_length$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="length_001" id="Function_23b27892" isSystem="false" >
			<comment><![CDATA[character length]]></comment>
		</function>
		<function name="length_002" id="Function_14fe4831" isSystem="false" >
			<comment><![CDATA[distance between endpoints]]></comment>
		</function>
		<function name="length_003" id="Function_124fc50e" isSystem="false" >
			<comment><![CDATA[sum of path segments]]></comment>
		</function>
		<function name="length_004" id="Function_28f29357" isSystem="false" >
			<comment><![CDATA[bitstring length]]></comment>
		</function>
		<function name="length_005" id="Function_17429f6f" isSystem="false" >
			<comment><![CDATA[length of string in specified encoding]]></comment>
		</function>
		<function name="length_006" id="Function_33016c76" isSystem="false" >
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="length_007" id="Function_2ee33a44" isSystem="false" >
			<comment><![CDATA[number of lexemes]]></comment>
		</function>
		<function name="like" id="Function_536a0b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."like"(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytealike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$namelike$function$
CREATE OR REPLACE FUNCTION pg_catalog."like"(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[matches LIKE expression]]></comment>
		</function>
		<function name="like_001" id="Function_352ca215" isSystem="false" >
			<comment><![CDATA[matches LIKE expression]]></comment>
		</function>
		<function name="like_002" id="Function_11cf622a" isSystem="false" >
			<comment><![CDATA[matches LIKE expression]]></comment>
		</function>
		<function name="like_escape" id="Function_2e1e17ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.like_escape(bytea, bytea)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$like_escape_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.like_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$like_escape$function$
]]></string>
			<comment><![CDATA[convert LIKE pattern to use backslash escapes]]></comment>
		</function>
		<function name="like_escape_001" id="Function_b502790" isSystem="false" >
			<comment><![CDATA[convert LIKE pattern to use backslash escapes]]></comment>
		</function>
		<function name="likejoinsel" id="Function_68a85e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.likejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$likejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of LIKE]]></comment>
		</function>
		<function name="likesel" id="Function_19a398fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.likesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$likesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of LIKE]]></comment>
		</function>
		<function name="line" id="Function_c8a69d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line(point, point)
 RETURNS line
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_construct_pp$function$
]]></string>
			<comment><![CDATA[construct line from points]]></comment>
		</function>
		<function name="line_distance" id="Function_1c5d92d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_distance(line, line)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="line_eq" id="Function_f4678f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_eq(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="line_horizontal" id="Function_5246c6d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_horizontal(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_horizontal$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</function>
		<function name="line_in" id="Function_2b01a384" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_interpt" id="Function_1996b194" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_interpt(line, line)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_interpt$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="line_intersect" id="Function_237429af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_intersect(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_intersect$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="line_out" id="Function_2daf54ef" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_parallel" id="Function_f2b39c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_parallel(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_parallel$function$
]]></string>
			<comment><![CDATA[implementation of ?|| operator]]></comment>
		</function>
		<function name="line_perp" id="Function_2b3957df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_perp(line, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_perp$function$
]]></string>
			<comment><![CDATA[implementation of ?-| operator]]></comment>
		</function>
		<function name="line_recv" id="Function_2c51d62c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_recv(internal)
 RETURNS line
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_send" id="Function_2562689f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_send(line)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="line_vertical" id="Function_112d451e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.line_vertical(line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$line_vertical$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="ln" id="Function_3604ba06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ln(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ln(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ln$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="ln_001" id="Function_202b1240" isSystem="false" >
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="lo_close" id="Function_16604290" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_close(integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_close$function$
]]></string>
			<comment><![CDATA[large object close]]></comment>
		</function>
		<function name="lo_creat" id="Function_2026f04e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_creat(integer)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_creat$function$
]]></string>
			<comment><![CDATA[large object create]]></comment>
		</function>
		<function name="lo_create" id="Function_29156a3d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_create(oid)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_create$function$
]]></string>
			<comment><![CDATA[large object create]]></comment>
		</function>
		<function name="lo_export" id="Function_18e69edd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_export(oid, text)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_export$function$
]]></string>
			<comment><![CDATA[large object export]]></comment>
		</function>
		<function name="lo_from_bytea" id="Function_16782ef3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_from_bytea(oid, bytea)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_from_bytea$function$
]]></string>
			<comment><![CDATA[create new large object with given content]]></comment>
		</function>
		<function name="lo_get" id="Function_1c102705" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get$function$
CREATE OR REPLACE FUNCTION pg_catalog.lo_get(oid, bigint, integer)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$lo_get_fragment$function$
]]></string>
			<comment><![CDATA[read entire large object]]></comment>
		</function>
		<function name="lo_get_001" id="Function_15bb05b" isSystem="false" >
			<comment><![CDATA[read large object from offset for length]]></comment>
		</function>
		<function name="lo_import" id="Function_17d898d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import$function$
CREATE OR REPLACE FUNCTION pg_catalog.lo_import(text, oid)
 RETURNS oid
 LANGUAGE internal
 STRICT
AS $function$lo_import_with_oid$function$
]]></string>
			<comment><![CDATA[large object import]]></comment>
		</function>
		<function name="lo_import_001" id="Function_27a77813" isSystem="false" >
			<comment><![CDATA[large object import]]></comment>
		</function>
		<function name="lo_lseek" id="Function_3a5bcf9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_lseek(integer, integer, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_lseek$function$
]]></string>
			<comment><![CDATA[large object seek]]></comment>
		</function>
		<function name="lo_lseek64" id="Function_1a794fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_lseek64(integer, bigint, integer)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lo_lseek64$function$
]]></string>
			<comment><![CDATA[large object seek (64 bit)]]></comment>
		</function>
		<function name="lo_open" id="Function_d11a270" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_open(oid, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_open$function$
]]></string>
			<comment><![CDATA[large object open]]></comment>
		</function>
		<function name="lo_put" id="Function_19d80911" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_put(oid, bigint, bytea)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$lo_put$function$
]]></string>
			<comment><![CDATA[write data at offset]]></comment>
		</function>
		<function name="lo_tell" id="Function_e34d319" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_tell(integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_tell$function$
]]></string>
			<comment><![CDATA[large object position]]></comment>
		</function>
		<function name="lo_tell64" id="Function_3b083014" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_tell64(integer)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$lo_tell64$function$
]]></string>
			<comment><![CDATA[large object position (64 bit)]]></comment>
		</function>
		<function name="lo_truncate" id="Function_2f8b095b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_truncate(integer, integer)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_truncate$function$
]]></string>
			<comment><![CDATA[truncate large object]]></comment>
		</function>
		<function name="lo_truncate64" id="Function_18cbed5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_truncate64(integer, bigint)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_truncate64$function$
]]></string>
			<comment><![CDATA[truncate large object (64 bit)]]></comment>
		</function>
		<function name="lo_unlink" id="Function_5933d78" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lo_unlink(oid)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lo_unlink$function$
]]></string>
			<comment><![CDATA[large object unlink (delete)]]></comment>
		</function>
		<function name="log" id="Function_26b71877" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.log(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dlog10$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.log(10, $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.log(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_log$function$
]]></string>
			<comment><![CDATA[base 10 logarithm]]></comment>
		</function>
		<function name="log_001" id="Function_1174e118" isSystem="false" >
			<comment><![CDATA[logarithm base m of n]]></comment>
		</function>
		<function name="log_002" id="Function_18104cff" isSystem="false" >
			<comment><![CDATA[base 10 logarithm]]></comment>
		</function>
		<function name="loread" id="Function_1db072b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.loread(integer, integer)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$loread$function$
]]></string>
			<comment><![CDATA[large object read]]></comment>
		</function>
		<function name="lower" id="Function_7509cbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lower$function$
CREATE OR REPLACE FUNCTION pg_catalog.lower(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lower$function$
]]></string>
			<comment><![CDATA[lower bound of range]]></comment>
		</function>
		<function name="lower_001" id="Function_b1c6950" isSystem="false" >
			<comment><![CDATA[lowercase]]></comment>
		</function>
		<function name="lower_inc" id="Function_2126a27d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower_inc(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lower_inc$function$
]]></string>
			<comment><![CDATA[is the range's lower bound inclusive?]]></comment>
		</function>
		<function name="lower_inf" id="Function_17a0aa1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lower_inf(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lower_inf$function$
]]></string>
			<comment><![CDATA[is the range's lower bound infinite?]]></comment>
		</function>
		<function name="lowrite" id="Function_388fee41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lowrite(integer, bytea)
 RETURNS integer
 LANGUAGE internal
 STRICT
AS $function$lowrite$function$
]]></string>
			<comment><![CDATA[large object write]]></comment>
		</function>
		<function name="lpad" id="Function_1a297323" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.lpad($1, $2, ' ')$function$
CREATE OR REPLACE FUNCTION pg_catalog.lpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lpad$function$
]]></string>
			<comment><![CDATA[left-pad string to length]]></comment>
		</function>
		<function name="lpad_001" id="Function_14f0c83a" isSystem="false" >
			<comment><![CDATA[left-pad string to length]]></comment>
		</function>
		<function name="lseg" id="Function_855de8a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg(box)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_diagonal$function$
CREATE OR REPLACE FUNCTION pg_catalog.lseg(point, point)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_construct$function$
]]></string>
			<comment><![CDATA[diagonal of]]></comment>
		</function>
		<function name="lseg_001" id="Function_351fa7ca" isSystem="false" >
			<comment><![CDATA[convert points to line segment]]></comment>
		</function>
		<function name="lseg_center" id="Function_21bbbfcc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_center(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="lseg_distance" id="Function_34255685" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_distance(lseg, lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="lseg_eq" id="Function_1c6e28b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_eq(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="lseg_ge" id="Function_142d6047" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_ge(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="lseg_gt" id="Function_239d03a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_gt(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="lseg_horizontal" id="Function_178e8e04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_horizontal(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_horizontal$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</function>
		<function name="lseg_in" id="Function_2585473e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_interpt" id="Function_16407daf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_interpt(lseg, lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_interpt$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="lseg_intersect" id="Function_107ebb74" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_intersect(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_intersect$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="lseg_le" id="Function_2a4430a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_le(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="lseg_length" id="Function_122ed2bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_length(lseg)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_length$function$
]]></string>
			<comment><![CDATA[implementation of @-@ operator]]></comment>
		</function>
		<function name="lseg_lt" id="Function_31949947" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_lt(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="lseg_ne" id="Function_1f5bdcbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_ne(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$lseg_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="lseg_out" id="Function_2e051ad1" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_parallel" id="Function_342e54f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_parallel(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_parallel$function$
]]></string>
			<comment><![CDATA[implementation of ?|| operator]]></comment>
		</function>
		<function name="lseg_perp" id="Function_39e0ae3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_perp(lseg, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_perp$function$
]]></string>
			<comment><![CDATA[implementation of ?-| operator]]></comment>
		</function>
		<function name="lseg_recv" id="Function_9b35fbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_recv(internal)
 RETURNS lseg
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_send" id="Function_bdc3cd0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_send(lseg)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="lseg_vertical" id="Function_13474db4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.lseg_vertical(lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_vertical$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="ltrim" id="Function_2894d726" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ltrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ltrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ltrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from left end of string]]></comment>
		</function>
		<function name="ltrim_001" id="Function_4d4cdbe" isSystem="false" >
			<comment><![CDATA[trim spaces from left end of string]]></comment>
		</function>
		<function name="macaddr_and" id="Function_19b48129" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_and(macaddr, macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_and$function$
]]></string>
			<comment><![CDATA[implementation of & operator]]></comment>
		</function>
		<function name="macaddr_cmp" id="Function_1445b679" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_cmp(macaddr, macaddr)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="macaddr_eq" id="Function_1f9bad9c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_eq(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="macaddr_ge" id="Function_25ef68a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_ge(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="macaddr_gt" id="Function_6a14813" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_gt(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="macaddr_in" id="Function_33249f36" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="macaddr_le" id="Function_13275504" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_le(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="macaddr_lt" id="Function_2d7019b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_lt(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="macaddr_ne" id="Function_1c7955a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_ne(macaddr, macaddr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$macaddr_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="macaddr_not" id="Function_24e7b2b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_not(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_not$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="macaddr_or" id="Function_e3a5b39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_or(macaddr, macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_or$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="macaddr_out" id="Function_19b5d17e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="macaddr_recv" id="Function_180855cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_recv(internal)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="macaddr_send" id="Function_1c147e32" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.macaddr_send(macaddr)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="make_date" id="Function_7c55a31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_date(year integer, month integer, day integer)
 RETURNS date
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_date$function$
]]></string>
			<comment><![CDATA[construct date]]></comment>
		</function>
		<function name="make_interval" id="Function_19c8367b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_interval(years integer DEFAULT 0, months integer DEFAULT 0, weeks integer DEFAULT 0, days integer DEFAULT 0, hours integer DEFAULT 0, mins integer DEFAULT 0, secs double precision DEFAULT 0.0)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_interval$function$
]]></string>
			<comment><![CDATA[construct interval]]></comment>
		</function>
		<function name="make_time" id="Function_1c4c3ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_time(hour integer, min integer, sec double precision)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_time$function$
]]></string>
			<comment><![CDATA[construct time]]></comment>
		</function>
		<function name="make_timestamp" id="Function_394df408" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamp(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$make_timestamp$function$
]]></string>
			<comment><![CDATA[construct timestamp]]></comment>
		</function>
		<function name="make_timestamptz" id="Function_377f3a78" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$make_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.make_timestamptz(year integer, month integer, mday integer, hour integer, min integer, sec double precision, timezone text)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$make_timestamptz_at_timezone$function$
]]></string>
			<comment><![CDATA[construct timestamp with time zone]]></comment>
		</function>
		<function name="make_timestamptz_001" id="Function_49b4ecc" isSystem="false" >
			<comment><![CDATA[construct timestamp with time zone]]></comment>
		</function>
		<function name="makeaclitem" id="Function_315de4fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.makeaclitem(oid, oid, text, boolean)
 RETURNS aclitem
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$makeaclitem$function$
]]></string>
			<comment><![CDATA[make ACL item]]></comment>
		</function>
		<function name="masklen" id="Function_1b3827b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.masklen(inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_masklen$function$
]]></string>
			<comment><![CDATA[netmask length]]></comment>
		</function>
		<function name="max" id="Function_2cb004f0" isSystem="false" >
			<comment><![CDATA[maximum value of all anyarray input values]]></comment>
		</function>
		<function name="max_001" id="Function_160d2513" isSystem="false" >
			<comment><![CDATA[maximum value of all bigint input values]]></comment>
		</function>
		<function name="max_002" id="Function_12500162" isSystem="false" >
			<comment><![CDATA[maximum value of all integer input values]]></comment>
		</function>
		<function name="max_003" id="Function_1aece14e" isSystem="false" >
			<comment><![CDATA[maximum value of all smallint input values]]></comment>
		</function>
		<function name="max_004" id="Function_28a3e262" isSystem="false" >
			<comment><![CDATA[maximum value of all oid input values]]></comment>
		</function>
		<function name="max_005" id="Function_16dcf8fc" isSystem="false" >
			<comment><![CDATA[maximum value of all float4 input values]]></comment>
		</function>
		<function name="max_006" id="Function_1f3d93ad" isSystem="false" >
			<comment><![CDATA[maximum value of all float8 input values]]></comment>
		</function>
		<function name="max_007" id="Function_38df784e" isSystem="false" >
			<comment><![CDATA[maximum value of all abstime input values]]></comment>
		</function>
		<function name="max_008" id="Function_3a5f7930" isSystem="false" >
			<comment><![CDATA[maximum value of all date input values]]></comment>
		</function>
		<function name="max_009" id="Function_3e724f7" isSystem="false" >
			<comment><![CDATA[maximum value of all time input values]]></comment>
		</function>
		<function name="max_010" id="Function_118fe8d" isSystem="false" >
			<comment><![CDATA[maximum value of all time with time zone input values]]></comment>
		</function>
		<function name="max_011" id="Function_31768e05" isSystem="false" >
			<comment><![CDATA[maximum value of all money input values]]></comment>
		</function>
		<function name="max_012" id="Function_30721cb5" isSystem="false" >
			<comment><![CDATA[maximum value of all timestamp input values]]></comment>
		</function>
		<function name="max_013" id="Function_1bba2861" isSystem="false" >
			<comment><![CDATA[maximum value of all timestamp with time zone input values]]></comment>
		</function>
		<function name="max_014" id="Function_2e3eebbb" isSystem="false" >
			<comment><![CDATA[maximum value of all interval input values]]></comment>
		</function>
		<function name="max_015" id="Function_2e5fde50" isSystem="false" >
			<comment><![CDATA[maximum value of all text input values]]></comment>
		</function>
		<function name="max_016" id="Function_1d7746f8" isSystem="false" >
			<comment><![CDATA[maximum value of all numeric input values]]></comment>
		</function>
		<function name="max_017" id="Function_1949bb45" isSystem="false" >
			<comment><![CDATA[maximum value of all bpchar input values]]></comment>
		</function>
		<function name="max_018" id="Function_15667dd3" isSystem="false" >
			<comment><![CDATA[maximum value of all tid input values]]></comment>
		</function>
		<function name="max_019" id="Function_9fcd255" isSystem="false" >
			<comment><![CDATA[maximum value of all enum input values]]></comment>
		</function>
		<function name="md5" id="Function_297693e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.md5(bytea)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$md5_bytea$function$
CREATE OR REPLACE FUNCTION pg_catalog.md5(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$md5_text$function$
]]></string>
			<comment><![CDATA[MD5 hash]]></comment>
		</function>
		<function name="md5_001" id="Function_5c93158" isSystem="false" >
			<comment><![CDATA[MD5 hash]]></comment>
		</function>
		<function name="mic_to_ascii" id="Function_177ffaf9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_ascii(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/ascii_and_mic', $function$mic_to_ascii$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to SQL_ASCII]]></comment>
		</function>
		<function name="mic_to_big5" id="Function_12852ba1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$mic_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to BIG5]]></comment>
		</function>
		<function name="mic_to_euc_cn" id="Function_350d8251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_cn(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_cn_and_mic', $function$mic_to_euc_cn$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_CN]]></comment>
		</function>
		<function name="mic_to_euc_jp" id="Function_10ca4eb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$mic_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_JP]]></comment>
		</function>
		<function name="mic_to_euc_kr" id="Function_b7e7b46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_kr(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_kr_and_mic', $function$mic_to_euc_kr$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_KR]]></comment>
		</function>
		<function name="mic_to_euc_tw" id="Function_3446dd80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_tw_and_big5', $function$mic_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to EUC_TW]]></comment>
		</function>
		<function name="mic_to_iso" id="Function_3a4666e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to ISO-8859-5]]></comment>
		</function>
		<function name="mic_to_koi8r" id="Function_19beb62b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to KOI8R]]></comment>
		</function>
		<function name="mic_to_latin1" id="Function_17f05f43" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin1(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin1$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN1]]></comment>
		</function>
		<function name="mic_to_latin2" id="Function_3657b0f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin2(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$mic_to_latin2$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN2]]></comment>
		</function>
		<function name="mic_to_latin3" id="Function_302e4c7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin3(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin3$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN3]]></comment>
		</function>
		<function name="mic_to_latin4" id="Function_177d2e17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_latin4(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin_and_mic', $function$mic_to_latin4$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to LATIN4]]></comment>
		</function>
		<function name="mic_to_sjis" id="Function_d9a74b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$mic_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to SJIS]]></comment>
		</function>
		<function name="mic_to_win1250" id="Function_2e13dbb1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win1250(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$mic_to_win1250$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN1250]]></comment>
		</function>
		<function name="mic_to_win1251" id="Function_68e0dc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN1251]]></comment>
		</function>
		<function name="mic_to_win866" id="Function_15d6546c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mic_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$mic_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for MULE_INTERNAL to WIN866]]></comment>
		</function>
		<function name="min" id="Function_39974910" isSystem="false" >
			<comment><![CDATA[minimum value of all anyarray input values]]></comment>
		</function>
		<function name="min_001" id="Function_2a244e11" isSystem="false" >
			<comment><![CDATA[minimum value of all bigint input values]]></comment>
		</function>
		<function name="min_002" id="Function_8e94008" isSystem="false" >
			<comment><![CDATA[minimum value of all integer input values]]></comment>
		</function>
		<function name="min_003" id="Function_12b9aa49" isSystem="false" >
			<comment><![CDATA[minimum value of all smallint input values]]></comment>
		</function>
		<function name="min_004" id="Function_f6239a2" isSystem="false" >
			<comment><![CDATA[minimum value of all oid input values]]></comment>
		</function>
		<function name="min_005" id="Function_99d8032" isSystem="false" >
			<comment><![CDATA[minimum value of all float4 input values]]></comment>
		</function>
		<function name="min_006" id="Function_12452437" isSystem="false" >
			<comment><![CDATA[minimum value of all float8 input values]]></comment>
		</function>
		<function name="min_007" id="Function_56931f9" isSystem="false" >
			<comment><![CDATA[minimum value of all abstime input values]]></comment>
		</function>
		<function name="min_008" id="Function_2e48f971" isSystem="false" >
			<comment><![CDATA[minimum value of all date input values]]></comment>
		</function>
		<function name="min_009" id="Function_300bdab8" isSystem="false" >
			<comment><![CDATA[minimum value of all time input values]]></comment>
		</function>
		<function name="min_010" id="Function_252eca26" isSystem="false" >
			<comment><![CDATA[minimum value of all time with time zone input values]]></comment>
		</function>
		<function name="min_011" id="Function_305fe86c" isSystem="false" >
			<comment><![CDATA[minimum value of all money input values]]></comment>
		</function>
		<function name="min_012" id="Function_2e6fec47" isSystem="false" >
			<comment><![CDATA[minimum value of all timestamp input values]]></comment>
		</function>
		<function name="min_013" id="Function_a822ef6" isSystem="false" >
			<comment><![CDATA[minimum value of all timestamp with time zone input values]]></comment>
		</function>
		<function name="min_014" id="Function_12b49912" isSystem="false" >
			<comment><![CDATA[minimum value of all interval input values]]></comment>
		</function>
		<function name="min_015" id="Function_243d79f8" isSystem="false" >
			<comment><![CDATA[minimum value of all text values]]></comment>
		</function>
		<function name="min_016" id="Function_11b5d8b0" isSystem="false" >
			<comment><![CDATA[minimum value of all numeric input values]]></comment>
		</function>
		<function name="min_017" id="Function_168ba95a" isSystem="false" >
			<comment><![CDATA[minimum value of all bpchar input values]]></comment>
		</function>
		<function name="min_018" id="Function_8b613fa" isSystem="false" >
			<comment><![CDATA[minimum value of all tid input values]]></comment>
		</function>
		<function name="min_019" id="Function_2c9ed7f6" isSystem="false" >
			<comment><![CDATA[minimum value of all enum input values]]></comment>
		</function>
		<function name="mktinterval" id="Function_212ec493" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mktinterval(abstime, abstime)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$mktinterval$function$
]]></string>
			<comment><![CDATA[implementation of <#> operator]]></comment>
		</function>
		<function name="mod" id="Function_3219404e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mod(bigint, bigint)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(smallint, smallint)
 RETURNS smallint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(integer, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4mod$function$
CREATE OR REPLACE FUNCTION pg_catalog.mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mod_001" id="Function_24e9575f" isSystem="false" >
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mod_002" id="Function_f4204f2" isSystem="false" >
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mod_003" id="Function_239811db" isSystem="false" >
			<comment><![CDATA[modulus]]></comment>
		</function>
		<function name="mode" id="Function_61555d9" isSystem="false" >
			<comment><![CDATA[most common value]]></comment>
		</function>
		<function name="mode_final" id="Function_31582b1a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mode_final(internal, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE
AS $function$mode_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="money" id="Function_22078ef1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.money(bigint)
 RETURNS money
 LANGUAGE internal
 STABLE STRICT
AS $function$int8_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(integer)
 RETURNS money
 LANGUAGE internal
 STABLE STRICT
AS $function$int4_cash$function$
CREATE OR REPLACE FUNCTION pg_catalog.money(numeric)
 RETURNS money
 LANGUAGE internal
 STABLE STRICT
AS $function$numeric_cash$function$
]]></string>
			<comment><![CDATA[convert int4 to money]]></comment>
		</function>
		<function name="money_001" id="Function_38c9d965" isSystem="false" >
			<comment><![CDATA[convert int8 to money]]></comment>
		</function>
		<function name="money_002" id="Function_21df0424" isSystem="false" >
			<comment><![CDATA[convert numeric to money]]></comment>
		</function>
		<function name="mul_d_interval" id="Function_3a43e185" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.mul_d_interval(double precision, interval)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$mul_d_interval$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="name" id="Function_1ef6c815" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.name(text)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpchar_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.name(character varying)
 RETURNS name
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_name$function$
]]></string>
			<comment><![CDATA[convert varchar to name]]></comment>
		</function>
		<function name="name_001" id="Function_2951fdf0" isSystem="false" >
			<comment><![CDATA[convert text to name]]></comment>
		</function>
		<function name="name_002" id="Function_34c8d383" isSystem="false" >
			<comment><![CDATA[convert char(n) to name]]></comment>
		</function>
		<function name="nameeq" id="Function_21f8599b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameeq(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$nameeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="namege" id="Function_311f0fac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namege(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="namegt" id="Function_4d8cc78" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namegt(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="nameiclike" id="Function_527a797" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameiclike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameiclike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</function>
		<function name="nameicnlike" id="Function_16dfb6bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicnlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameicnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</function>
		<function name="nameicregexeq" id="Function_27b54ef4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicregexeq(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameicregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</function>
		<function name="nameicregexne" id="Function_23a18749" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameicregexne(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameicregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</function>
		<function name="namein" id="Function_37f1f176" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="namele" id="Function_1e7538a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namele(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="namelike" id="Function_1532d186" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namelike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$namelike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="namelt" id="Function_68e7952" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namelt(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="namene" id="Function_3b528f39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namene(name, name)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$namene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="namenlike" id="Function_3402f374" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namenlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$namenlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="nameout" id="Function_3b22c6e5" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="namerecv" id="Function_1eabf244" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namerecv(internal)
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$namerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="nameregexeq" id="Function_291bd4f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameregexeq(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="nameregexne" id="Function_31bd6812" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nameregexne(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$nameregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</function>
		<function name="namesend" id="Function_6b5de56" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.namesend(name)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$namesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="neqjoinsel" id="Function_103e3bd3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.neqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$neqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of <> and related operators]]></comment>
		</function>
		<function name="neqsel" id="Function_1a451a69" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.neqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$neqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of <> and related operators]]></comment>
		</function>
		<function name="netmask" id="Function_2e00b051" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.netmask(inet)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_netmask$function$
]]></string>
			<comment><![CDATA[netmask of address]]></comment>
		</function>
		<function name="network" id="Function_2a6d0164" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network(inet)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_network$function$
]]></string>
			<comment><![CDATA[network part of address]]></comment>
		</function>
		<function name="network_cmp" id="Function_34033af5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_cmp(inet, inet)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="network_eq" id="Function_8ad4c12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_eq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="network_ge" id="Function_29097134" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_ge(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="network_gt" id="Function_2970d8f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_gt(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="network_le" id="Function_18641cb1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_le(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="network_lt" id="Function_2521df11" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_lt(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="network_ne" id="Function_113e85b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_ne(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$network_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="network_overlap" id="Function_2e5d73f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_overlap(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="network_sub" id="Function_8569661" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_sub(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_sub$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="network_subeq" id="Function_203adb7c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_subeq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_subeq$function$
]]></string>
			<comment><![CDATA[implementation of <<= operator]]></comment>
		</function>
		<function name="network_sup" id="Function_d40dc43" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_sup(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_sup$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="network_supeq" id="Function_49823c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.network_supeq(inet, inet)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_supeq$function$
]]></string>
			<comment><![CDATA[implementation of >>= operator]]></comment>
		</function>
		<function name="networkjoinsel" id="Function_61355f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.networkjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$networkjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for network operators]]></comment>
		</function>
		<function name="networksel" id="Function_6a71861" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.networksel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$networksel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for network operators]]></comment>
		</function>
		<function name="nextval" id="Function_218f2bc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nextval(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$nextval_oid$function$
]]></string>
			<comment><![CDATA[sequence next value]]></comment>
		</function>
		<function name="nlikejoinsel" id="Function_9e69514" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nlikejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$nlikejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of NOT LIKE]]></comment>
		</function>
		<function name="nlikesel" id="Function_24429cc0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nlikesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$nlikesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of NOT LIKE]]></comment>
		</function>
		<function name="notlike" id="Function_1654c214" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.notlike(bytea, bytea)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteanlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(name, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$namenlike$function$
CREATE OR REPLACE FUNCTION pg_catalog.notlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[does not match LIKE expression]]></comment>
		</function>
		<function name="notlike_001" id="Function_3b419e3c" isSystem="false" >
			<comment><![CDATA[does not match LIKE expression]]></comment>
		</function>
		<function name="notlike_002" id="Function_8f7a8c1" isSystem="false" >
			<comment><![CDATA[does not match LIKE expression]]></comment>
		</function>
		<function name="now" id="Function_2ae2aee5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.now()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$now$function$
]]></string>
			<comment><![CDATA[current transaction time]]></comment>
		</function>
		<function name="npoints" id="Function_b6dc9ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_npoints$function$
CREATE OR REPLACE FUNCTION pg_catalog.npoints(polygon)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_npoints$function$
]]></string>
			<comment><![CDATA[number of points]]></comment>
		</function>
		<function name="npoints_001" id="Function_20e303ee" isSystem="false" >
			<comment><![CDATA[number of points]]></comment>
		</function>
		<function name="nth_value" id="Function_186f299c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.nth_value(anyelement, integer)
 RETURNS anyelement
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_nth_value$function$
]]></string>
			<comment><![CDATA[fetch the Nth row value]]></comment>
		</function>
		<function name="ntile" id="Function_234313d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ntile(integer)
 RETURNS integer
 LANGUAGE internal
 WINDOW IMMUTABLE STRICT
AS $function$window_ntile$function$
]]></string>
			<comment><![CDATA[split rows into N groups]]></comment>
		</function>
		<function name="numeric" id="Function_b00cd5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."numeric"(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(smallint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int2_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$int4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(real)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float4_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(double precision)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$float8_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(money)
 RETURNS numeric
 LANGUAGE internal
 STABLE STRICT
AS $function$cash_numeric$function$
CREATE OR REPLACE FUNCTION pg_catalog."numeric"(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric$function$
]]></string>
			<comment><![CDATA[adjust numeric to typmod precision/scale]]></comment>
		</function>
		<function name="numeric_001" id="Function_f0cecb8" isSystem="false" >
			<comment><![CDATA[convert int4 to numeric]]></comment>
		</function>
		<function name="numeric_002" id="Function_8bfc10" isSystem="false" >
			<comment><![CDATA[convert float4 to numeric]]></comment>
		</function>
		<function name="numeric_003" id="Function_380d77f7" isSystem="false" >
			<comment><![CDATA[convert float8 to numeric]]></comment>
		</function>
		<function name="numeric_004" id="Function_2a7d3a8b" isSystem="false" >
			<comment><![CDATA[convert int8 to numeric]]></comment>
		</function>
		<function name="numeric_005" id="Function_17a135da" isSystem="false" >
			<comment><![CDATA[convert int2 to numeric]]></comment>
		</function>
		<function name="numeric_006" id="Function_1911bff5" isSystem="false" >
			<comment><![CDATA[convert money to numeric]]></comment>
		</function>
		<function name="numeric_abs" id="Function_2b4fad0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_abs(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_abs$function$
]]></string>
			<comment><![CDATA[implementation of @ operator]]></comment>
		</function>
		<function name="numeric_accum" id="Function_26d2e2a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_accum(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="numeric_accum_inv" id="Function_327bbb27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_accum_inv(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_accum_inv$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="numeric_add" id="Function_7979698" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_add(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="numeric_avg" id="Function_21e991ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_avg$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_avg_accum" id="Function_9bcb509" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_avg_accum(internal, numeric)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_avg_accum$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="numeric_cmp" id="Function_7caf31b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_cmp(numeric, numeric)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="numeric_div" id="Function_344c7bfa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_div(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="numeric_div_trunc" id="Function_1322b4ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_div_trunc(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_div_trunc$function$
]]></string>
			<comment><![CDATA[trunc(x/y)]]></comment>
		</function>
		<function name="numeric_eq" id="Function_34cb2d1a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_eq(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="numeric_exp" id="Function_2df21575" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_exp(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_exp$function$
]]></string>
			<comment><![CDATA[natural exponential (e^x)]]></comment>
		</function>
		<function name="numeric_fac" id="Function_325f3963" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_fac(bigint)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_fac$function$
]]></string>
			<comment><![CDATA[implementation of ! operator]]></comment>
		</function>
		<function name="numeric_ge" id="Function_2a664f6f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ge(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="numeric_gt" id="Function_383d1336" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_gt(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="numeric_in" id="Function_33d35b6d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_inc" id="Function_2b24d309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_inc(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_inc$function$
]]></string>
			<comment><![CDATA[increment by one]]></comment>
		</function>
		<function name="numeric_larger" id="Function_37d9bfce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_larger(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="numeric_le" id="Function_3b3737b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_le(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="numeric_ln" id="Function_232da0df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ln(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ln$function$
]]></string>
			<comment><![CDATA[natural logarithm]]></comment>
		</function>
		<function name="numeric_log" id="Function_30ec9b37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_log(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_log$function$
]]></string>
			<comment><![CDATA[logarithm base m of n]]></comment>
		</function>
		<function name="numeric_lt" id="Function_2570299e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_lt(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="numeric_mod" id="Function_387cbf4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_mod(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mod$function$
]]></string>
			<comment><![CDATA[implementation of % operator]]></comment>
		</function>
		<function name="numeric_mul" id="Function_32eb5834" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_mul(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="numeric_ne" id="Function_2102cffe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_ne(numeric, numeric)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="numeric_out" id="Function_26f83ba9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_power" id="Function_fdda7a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_power(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[implementation of ^ operator]]></comment>
		</function>
		<function name="numeric_recv" id="Function_faf608b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_recv(internal, oid, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_send" id="Function_15826bbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_send(numeric)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="numeric_smaller" id="Function_316d119d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_smaller(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="numeric_sqrt" id="Function_2a4945d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sqrt(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
		</function>
		<function name="numeric_stddev_pop" id="Function_3ab4d497" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_stddev_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_stddev_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_stddev_samp" id="Function_371ad51f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_stddev_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_stddev_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_sub" id="Function_29b47f4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sub(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="numeric_sum" id="Function_2385353a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_sum(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_sum$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_transform" id="Function_6277cc6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_transform$function$
]]></string>
			<comment><![CDATA[transform a numeric length coercion]]></comment>
		</function>
		<function name="numeric_uminus" id="Function_2edc5a94" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_uminus(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_uminus$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="numeric_uplus" id="Function_d9e77c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_uplus(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_uplus$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="numeric_var_pop" id="Function_1d33cb3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_var_pop(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_var_pop$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numeric_var_samp" id="Function_2aa8952d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numeric_var_samp(internal)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE
AS $function$numeric_var_samp$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="numerictypmodin" id="Function_346af434" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numerictypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numerictypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="numerictypmodout" id="Function_178e5563" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="numnode" id="Function_394b429b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numnode(tsquery)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_numnode$function$
]]></string>
			<comment><![CDATA[number of nodes]]></comment>
		</function>
		<function name="numrange" id="Function_3518b48d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.numrange(numeric, numeric, text)
 RETURNS numrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[numrange constructor]]></comment>
		</function>
		<function name="numrange_001" id="Function_eada100" isSystem="false" >
			<comment><![CDATA[numrange constructor]]></comment>
		</function>
		<function name="numrange_subdiff" id="Function_193a948e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.numrange_subdiff(numeric, numeric)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two numeric values]]></comment>
		</function>
		<function name="obj_description" id="Function_b149a1e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and objsubid = 0$function$
CREATE OR REPLACE FUNCTION pg_catalog.obj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_description where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11) and objsubid = 0$function$
]]></string>
			<comment><![CDATA[get description for object id and catalog name]]></comment>
		</function>
		<function name="obj_description_001" id="Function_1a8a4382" isSystem="false" >
			<comment><![CDATA[deprecated, use two-argument form instead]]></comment>
		</function>
		<function name="octet_length" id="Function_d020f34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(character)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bpcharoctetlen$function$
CREATE OR REPLACE FUNCTION pg_catalog.octet_length(bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitoctetlength$function$
]]></string>
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="octet_length_001" id="Function_23af6b5a" isSystem="false" >
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="octet_length_002" id="Function_4e39687" isSystem="false" >
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="octet_length_003" id="Function_17056a8e" isSystem="false" >
			<comment><![CDATA[octet length]]></comment>
		</function>
		<function name="oid" id="Function_262e47ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oid(bigint)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$i8tooid$function$
]]></string>
			<comment><![CDATA[convert int8 to oid]]></comment>
		</function>
		<function name="oideq" id="Function_18d182c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oideq(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="oidge" id="Function_166c7ea0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidge(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="oidgt" id="Function_2e747028" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidgt(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="oidin" id="Function_11bc8ec7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidlarger" id="Function_5b857a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidlarger(oid, oid)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="oidle" id="Function_233e875f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidle(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="oidlt" id="Function_2ca656f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidlt(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="oidne" id="Function_213e89ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidne(oid, oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$oidne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="oidout" id="Function_14a30a5f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidrecv" id="Function_132f2caf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidrecv(internal)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidsend" id="Function_1193ae82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidsend(oid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidsmaller" id="Function_17bec1a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidsmaller(oid, oid)
 RETURNS oid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="oidvectoreq" id="Function_25421313" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectoreq(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectoreq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="oidvectorge" id="Function_1323416d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorge(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="oidvectorgt" id="Function_24c744f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorgt(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="oidvectorin" id="Function_17649d4a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectorle" id="Function_27ca5ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorle(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="oidvectorlt" id="Function_3356febd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorlt(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="oidvectorne" id="Function_28ca24f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorne(oidvector, oidvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="oidvectorout" id="Function_3852b645" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectorrecv" id="Function_1c7e0b55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorrecv(internal)
 RETURNS oidvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectorsend" id="Function_20cd4096" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectorsend(oidvector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$oidvectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="oidvectortypes" id="Function_328e568a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.oidvectortypes(oidvector)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$oidvectortypes$function$
]]></string>
			<comment><![CDATA[print type names of oidvector field]]></comment>
		</function>
		<function name="on_pb" id="Function_2ff9d44" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_pb(point, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_pb$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_pl" id="Function_1beb5a5c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_pl(point, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_pl$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_ppath" id="Function_11053053" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_ppath(point, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_ppath$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_ps" id="Function_186d8877" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_ps(point, lseg)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_ps$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_sb" id="Function_6985966" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_sb(lseg, box)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_sb$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="on_sl" id="Function_33e05f08" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.on_sl(lseg, line)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$on_sl$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="opaque_in" id="Function_12a0a5a3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="opaque_out" id="Function_acd2d3c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="ordered_set_transition" id="Function_35af6e4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ordered_set_transition(internal, "any")
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$ordered_set_transition$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="ordered_set_transition_multi" id="Function_16c70870" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ordered_set_transition_multi(internal, VARIADIC "any")
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$ordered_set_transition_multi$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="overlaps" id="Function_18bb75ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time with time zone, time with time zone, time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, timestamp with time zone, timestamp with time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 STABLE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp with time zone, interval, timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE sql
 STABLE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, time without time zone, time without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(time without time zone, interval, time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE
AS $function$overlaps_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, timestamp without time zone, timestamp without time zone, interval)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1
AS $function$select ($1, $2) overlaps ($3, ($3 + $4))$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlaps"(timestamp without time zone, interval, timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1
AS $function$select ($1, ($1 + $2)) overlaps ($3, $4)$function$
]]></string>
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_001" id="Function_e9d5039" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_002" id="Function_2381014a" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_003" id="Function_1f05dd4d" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_004" id="Function_6965b76" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_005" id="Function_12e1f52c" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_006" id="Function_34f00835" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_007" id="Function_2d1b60bd" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_008" id="Function_14f2f348" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_009" id="Function_13fae6a0" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_010" id="Function_2476536f" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_011" id="Function_7be5f57" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlaps_012" id="Function_25edbb79" isSystem="false" >
			<comment><![CDATA[intervals overlap?]]></comment>
		</function>
		<function name="overlay" id="Function_a65724b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitoverlay_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bytea, bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(text, text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textoverlay$function$
CREATE OR REPLACE FUNCTION pg_catalog."overlay"(bit, bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitoverlay$function$
]]></string>
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_001" id="Function_39562308" isSystem="false" >
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_002" id="Function_2fd06a8d" isSystem="false" >
			<comment><![CDATA[substitute portion of bitstring]]></comment>
		</function>
		<function name="overlay_003" id="Function_2570cdd0" isSystem="false" >
			<comment><![CDATA[substitute portion of bitstring]]></comment>
		</function>
		<function name="overlay_004" id="Function_26cd9404" isSystem="false" >
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="overlay_005" id="Function_156a1e64" isSystem="false" >
			<comment><![CDATA[substitute portion of string]]></comment>
		</function>
		<function name="path" id="Function_2a10cb6c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path(polygon)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_path$function$
]]></string>
			<comment><![CDATA[convert polygon to path]]></comment>
		</function>
		<function name="path_add" id="Function_147a4243" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_add(path, path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="path_add_pt" id="Function_13943d71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_add_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_add_pt$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="path_center" id="Function_df79fa6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_center(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="path_contain_pt" id="Function_2619be0c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_contain_pt(path, point)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.on_ppath($2, $1)$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="path_distance" id="Function_2b6fac50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_distance(path, path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="path_div_pt" id="Function_39d5ec03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_div_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_div_pt$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="path_in" id="Function_1fb20cd8" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_inter" id="Function_36a752b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_inter(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_inter$function$
]]></string>
			<comment><![CDATA[implementation of ?# operator]]></comment>
		</function>
		<function name="path_length" id="Function_39d08d70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_length(path)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_length$function$
]]></string>
			<comment><![CDATA[implementation of @-@ operator]]></comment>
		</function>
		<function name="path_mul_pt" id="Function_344e13df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_mul_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_mul_pt$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="path_n_eq" id="Function_1f70a1b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_eq(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="path_n_ge" id="Function_387c865c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_ge(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="path_n_gt" id="Function_bef88c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_gt(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="path_n_le" id="Function_2d66672c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_le(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="path_n_lt" id="Function_25b741f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_n_lt(path, path)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_n_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="path_npoints" id="Function_372ec480" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_npoints(path)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_npoints$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="path_out" id="Function_1558e0bd" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_recv" id="Function_eefbf1b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_recv(internal)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_send" id="Function_d12ab29" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_send(path)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="path_sub_pt" id="Function_92ef8ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.path_sub_pt(path, point)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_sub_pt$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="pclose" id="Function_31879929" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pclose(path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_close$function$
]]></string>
			<comment><![CDATA[close path]]></comment>
		</function>
		<function name="percent_rank" id="Function_23d84904" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank()
 RETURNS double precision
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_percent_rank$function$
]]></string>
			<comment><![CDATA[fractional rank within partition]]></comment>
		</function>
		<function name="percent_rank_001" id="Function_862accc" isSystem="false" >
			<comment><![CDATA[fractional rank of hypothetical row]]></comment>
		</function>
		<function name="percent_rank_final" id="Function_1702b90f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percent_rank_final(internal, VARIADIC "any")
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_percent_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont" id="Function_a3a0269" isSystem="false" >
			<comment><![CDATA[continuous distribution percentile]]></comment>
		</function>
		<function name="percentile_cont_001" id="Function_29fd39af" isSystem="false" >
			<comment><![CDATA[continuous distribution percentile]]></comment>
		</function>
		<function name="percentile_cont_002" id="Function_20b1aa8d" isSystem="false" >
			<comment><![CDATA[multiple continuous percentiles]]></comment>
		</function>
		<function name="percentile_cont_003" id="Function_3a214c68" isSystem="false" >
			<comment><![CDATA[multiple continuous percentiles]]></comment>
		</function>
		<function name="percentile_cont_float8_final" id="Function_24c14a28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_float8_final(internal, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_float8_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont_float8_multi_final" id="Function_1f243f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_float8_multi_final(internal, double precision[])
 RETURNS double precision[]
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_float8_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont_interval_final" id="Function_300fa362" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_interval_final(internal, double precision)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_interval_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_cont_interval_multi_final" id="Function_20b4675f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_cont_interval_multi_final(internal, double precision[])
 RETURNS interval[]
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_cont_interval_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_disc" id="Function_1519c354" isSystem="false" >
			<comment><![CDATA[discrete percentile]]></comment>
		</function>
		<function name="percentile_disc_001" id="Function_1ebfe38a" isSystem="false" >
			<comment><![CDATA[multiple discrete percentiles]]></comment>
		</function>
		<function name="percentile_disc_final" id="Function_2efe87bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_disc_final(internal, double precision, anyelement)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_disc_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="percentile_disc_multi_final" id="Function_16ecf8c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.percentile_disc_multi_final(internal, double precision[], anyelement)
 RETURNS anyarray
 LANGUAGE internal
 IMMUTABLE
AS $function$percentile_disc_multi_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="pg_advisory_lock" id="Function_1d0da0a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_lock_001" id="Function_2e9b0a2f" isSystem="false" >
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_lock_shared" id="Function_24deb6f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_lock_shared(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_lock_shared_001" id="Function_27c8e196" isSystem="false" >
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock" id="Function_199d1714" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_int4$function$
]]></string>
			<comment><![CDATA[release exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock_001" id="Function_74e60c0" isSystem="false" >
			<comment><![CDATA[release exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock_all" id="Function_38aa9328" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_all()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_all$function$
]]></string>
			<comment><![CDATA[release all advisory locks]]></comment>
		</function>
		<function name="pg_advisory_unlock_shared" id="Function_12e562fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_unlock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_unlock_shared_int4$function$
]]></string>
			<comment><![CDATA[release shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_unlock_shared_001" id="Function_1178b00" isSystem="false" >
			<comment><![CDATA[release shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock" id="Function_15126b9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock_001" id="Function_d4d122b" isSystem="false" >
			<comment><![CDATA[obtain exclusive advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock_shared" id="Function_8a4ba64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(bigint)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_advisory_xact_lock_shared(integer, integer)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_advisory_xact_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_advisory_xact_lock_shared_001" id="Function_3b250801" isSystem="false" >
			<comment><![CDATA[obtain shared advisory lock]]></comment>
		</function>
		<function name="pg_available_extension_versions" id="Function_2ab9c762" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_available_extension_versions(OUT name name, OUT version text, OUT superuser boolean, OUT relocatable boolean, OUT schema name, OUT requires name[], OUT comment text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_available_extension_versions$function$
]]></string>
			<comment><![CDATA[list available extension versions]]></comment>
		</function>
		<function name="pg_available_extensions" id="Function_3752412b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_available_extensions(OUT name name, OUT default_version text, OUT comment text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_available_extensions$function$
]]></string>
			<comment><![CDATA[list available extensions]]></comment>
		</function>
		<function name="pg_backend_pid" id="Function_2877e41b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_backend_pid()
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_backend_pid$function$
]]></string>
			<comment><![CDATA[statistics: current backend PID]]></comment>
		</function>
		<function name="pg_backup_start_time" id="Function_23817d0b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_backup_start_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_backup_start_time$function$
]]></string>
			<comment><![CDATA[start time of an online backup]]></comment>
		</function>
		<function name="pg_cancel_backend" id="Function_216dbf31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_cancel_backend(integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_cancel_backend$function$
]]></string>
			<comment><![CDATA[cancel a server process' current query]]></comment>
		</function>
		<function name="pg_char_to_encoding" id="Function_31764046" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_char_to_encoding(name)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$PG_char_to_encoding$function$
]]></string>
			<comment><![CDATA[convert encoding name to encoding id]]></comment>
		</function>
		<function name="pg_client_encoding" id="Function_69f91dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_client_encoding()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_client_encoding$function$
]]></string>
			<comment><![CDATA[encoding name of current database]]></comment>
		</function>
		<function name="pg_collation_for" id="Function_3a621609" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_collation_for("any")
 RETURNS text
 LANGUAGE internal
 STABLE
AS $function$pg_collation_for$function$
]]></string>
			<comment><![CDATA[collation of the argument; implementation of the COLLATION FOR expression]]></comment>
		</function>
		<function name="pg_collation_is_visible" id="Function_2baf608" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_collation_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_collation_is_visible$function$
]]></string>
			<comment><![CDATA[is collation visible in search path?]]></comment>
		</function>
		<function name="pg_column_is_updatable" id="Function_e262469" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_column_is_updatable(regclass, smallint, boolean)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_column_is_updatable$function$
]]></string>
			<comment><![CDATA[is a column updatable]]></comment>
		</function>
		<function name="pg_column_size" id="Function_1ca23e7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_column_size("any")
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_column_size$function$
]]></string>
			<comment><![CDATA[bytes required to store the value, perhaps with compression]]></comment>
		</function>
		<function name="pg_conf_load_time" id="Function_2d749517" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_conf_load_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_conf_load_time$function$
]]></string>
			<comment><![CDATA[configuration load time]]></comment>
		</function>
		<function name="pg_conversion_is_visible" id="Function_383eb838" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_conversion_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_conversion_is_visible$function$
]]></string>
			<comment><![CDATA[is conversion visible in search path?]]></comment>
		</function>
		<function name="pg_create_logical_replication_slot" id="Function_353b0734" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_logical_replication_slot(slot_name name, plugin name, OUT slot_name text, OUT xlog_position pg_lsn)
 RETURNS record
 LANGUAGE internal
AS $function$pg_create_logical_replication_slot$function$
]]></string>
			<comment><![CDATA[set up a logical replication slot]]></comment>
		</function>
		<function name="pg_create_physical_replication_slot" id="Function_16565042" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_physical_replication_slot(slot_name name, OUT slot_name name, OUT xlog_position pg_lsn)
 RETURNS record
 LANGUAGE internal
AS $function$pg_create_physical_replication_slot$function$
]]></string>
			<comment><![CDATA[create a physical replication slot]]></comment>
		</function>
		<function name="pg_create_restore_point" id="Function_22b550ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_create_restore_point(text)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_create_restore_point$function$
]]></string>
			<comment><![CDATA[create a named restore point]]></comment>
		</function>
		<function name="pg_current_xlog_insert_location" id="Function_192d83e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_current_xlog_insert_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_current_xlog_insert_location$function$
]]></string>
			<comment><![CDATA[current xlog insert location]]></comment>
		</function>
		<function name="pg_current_xlog_location" id="Function_2dfa36db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_current_xlog_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_current_xlog_location$function$
]]></string>
			<comment><![CDATA[current xlog write location]]></comment>
		</function>
		<function name="pg_cursor" id="Function_93945c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_cursor(OUT name text, OUT statement text, OUT is_holdable boolean, OUT is_binary boolean, OUT is_scrollable boolean, OUT creation_time timestamp with time zone)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_cursor$function$
]]></string>
			<comment><![CDATA[get the open cursors for this session]]></comment>
		</function>
		<function name="pg_database_size" id="Function_2aa776f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(name)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_database_size_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_database_size(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_database_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified database]]></comment>
		</function>
		<function name="pg_database_size_001" id="Function_2144f136" isSystem="false" >
			<comment><![CDATA[total disk space usage for the specified database]]></comment>
		</function>
		<function name="pg_describe_object" id="Function_6097a0b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_describe_object(oid, oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_describe_object$function$
]]></string>
			<comment><![CDATA[get identification of SQL object]]></comment>
		</function>
		<function name="pg_drop_replication_slot" id="Function_3815ca57" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_drop_replication_slot(name)
 RETURNS void
 LANGUAGE internal
AS $function$pg_drop_replication_slot$function$
]]></string>
			<comment><![CDATA[drop a replication slot]]></comment>
		</function>
		<function name="pg_encoding_max_length" id="Function_34c0312d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_encoding_max_length(integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_encoding_max_length_sql$function$
]]></string>
			<comment><![CDATA[maximum octet length of a character in given encoding]]></comment>
		</function>
		<function name="pg_encoding_to_char" id="Function_bf1b60c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_encoding_to_char(integer)
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$PG_encoding_to_char$function$
]]></string>
			<comment><![CDATA[convert encoding id to encoding name]]></comment>
		</function>
		<function name="pg_event_trigger_dropped_objects" id="Function_d385fd4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_event_trigger_dropped_objects(OUT classid oid, OUT objid oid, OUT objsubid integer, OUT object_type text, OUT schema_name text, OUT object_name text, OUT object_identity text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_event_trigger_dropped_objects$function$
]]></string>
			<comment><![CDATA[list objects dropped by the current command]]></comment>
		</function>
		<function name="pg_export_snapshot" id="Function_16d5bf8d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_export_snapshot()
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_export_snapshot$function$
]]></string>
			<comment><![CDATA[export a snapshot]]></comment>
		</function>
		<function name="pg_extension_config_dump" id="Function_a75b485" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_extension_config_dump(regclass, text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_extension_config_dump$function$
]]></string>
			<comment><![CDATA[flag an extension's table contents to be emitted by pg_dump]]></comment>
		</function>
		<function name="pg_extension_update_paths" id="Function_2baf62dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_extension_update_paths(name name, OUT source text, OUT target text, OUT path text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 100
AS $function$pg_extension_update_paths$function$
]]></string>
			<comment><![CDATA[list an extension's version update paths]]></comment>
		</function>
		<function name="pg_filenode_relation" id="Function_1b6c1f2f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_filenode_relation(oid, oid)
 RETURNS regclass
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_filenode_relation$function$
]]></string>
			<comment><![CDATA[relation OID for filenode and tablespace]]></comment>
		</function>
		<function name="pg_function_is_visible" id="Function_1fd6d127" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_function_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_function_is_visible$function$
]]></string>
			<comment><![CDATA[is function visible in search path?]]></comment>
		</function>
		<function name="pg_get_constraintdef" id="Function_22dbffc5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_constraintdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_constraintdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_constraintdef_ext$function$
]]></string>
			<comment><![CDATA[constraint description]]></comment>
		</function>
		<function name="pg_get_constraintdef_001" id="Function_cfcef5d" isSystem="false" >
			<comment><![CDATA[constraint description with pretty-print option]]></comment>
		</function>
		<function name="pg_get_expr" id="Function_4de3f28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_expr$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_expr(pg_node_tree, oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_expr_ext$function$
]]></string>
			<comment><![CDATA[deparse an encoded expression]]></comment>
		</function>
		<function name="pg_get_expr_001" id="Function_3afa88a2" isSystem="false" >
			<comment><![CDATA[deparse an encoded expression with pretty-print option]]></comment>
		</function>
		<function name="pg_get_function_arg_default" id="Function_63fd13e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_arg_default(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_arg_default$function$
]]></string>
			<comment><![CDATA[function argument default]]></comment>
		</function>
		<function name="pg_get_function_arguments" id="Function_1725e368" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_arguments$function$
]]></string>
			<comment><![CDATA[argument list of a function]]></comment>
		</function>
		<function name="pg_get_function_identity_arguments" id="Function_1e0d72ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_identity_arguments(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_identity_arguments$function$
]]></string>
			<comment><![CDATA[identity argument list of a function]]></comment>
		</function>
		<function name="pg_get_function_result" id="Function_30d802ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_function_result(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_function_result$function$
]]></string>
			<comment><![CDATA[result type of a function]]></comment>
		</function>
		<function name="pg_get_functiondef" id="Function_17243394" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_functiondef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_functiondef$function$
]]></string>
			<comment><![CDATA[definition of a function]]></comment>
		</function>
		<function name="pg_get_indexdef" id="Function_396a938a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_indexdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_indexdef(oid, integer, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_indexdef_ext$function$
]]></string>
			<comment><![CDATA[index description]]></comment>
		</function>
		<function name="pg_get_indexdef_001" id="Function_1723ee52" isSystem="false" >
			<comment><![CDATA[index description (full create statement or single expression) with pretty-print option]]></comment>
		</function>
		<function name="pg_get_keywords" id="Function_2b1d5cc0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_keywords(OUT word text, OUT catcode "char", OUT catdesc text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT COST 10 ROWS 400
AS $function$pg_get_keywords$function$
]]></string>
			<comment><![CDATA[list of SQL keywords]]></comment>
		</function>
		<function name="pg_get_multixact_members" id="Function_3b506d07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_multixact_members(multixid xid, OUT xid xid, OUT mode text)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT
AS $function$pg_get_multixact_members$function$
]]></string>
			<comment><![CDATA[view members of a multixactid]]></comment>
		</function>
		<function name="pg_get_replication_slots" id="Function_2faa5d3a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_replication_slots(OUT slot_name name, OUT plugin name, OUT slot_type text, OUT datoid oid, OUT active boolean, OUT xmin xid, OUT catalog_xmin xid, OUT restart_lsn pg_lsn)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 10
AS $function$pg_get_replication_slots$function$
]]></string>
			<comment><![CDATA[information about replication slots currently in use]]></comment>
		</function>
		<function name="pg_get_ruledef" id="Function_37111db4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_ruledef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_ruledef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_ruledef_ext$function$
]]></string>
			<comment><![CDATA[source text of a rule]]></comment>
		</function>
		<function name="pg_get_ruledef_001" id="Function_faaad33" isSystem="false" >
			<comment><![CDATA[source text of a rule with pretty-print option]]></comment>
		</function>
		<function name="pg_get_serial_sequence" id="Function_3788233c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_serial_sequence(text, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_serial_sequence$function$
]]></string>
			<comment><![CDATA[name of sequence for a serial column]]></comment>
		</function>
		<function name="pg_get_triggerdef" id="Function_1bd4dbce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_triggerdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_triggerdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_triggerdef_ext$function$
]]></string>
			<comment><![CDATA[trigger description]]></comment>
		</function>
		<function name="pg_get_triggerdef_001" id="Function_24bb3448" isSystem="false" >
			<comment><![CDATA[trigger description with pretty-print option]]></comment>
		</function>
		<function name="pg_get_userbyid" id="Function_3b57e6fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_userbyid(oid)
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_userbyid$function$
]]></string>
			<comment><![CDATA[role name by OID (with fallback)]]></comment>
		</function>
		<function name="pg_get_viewdef" id="Function_2975b772" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(text, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_name_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, boolean)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_ext$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_get_viewdef(oid, integer)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_get_viewdef_wrap$function$
]]></string>
			<comment><![CDATA[select statement of a view]]></comment>
		</function>
		<function name="pg_get_viewdef_001" id="Function_3783b033" isSystem="false" >
			<comment><![CDATA[select statement of a view]]></comment>
		</function>
		<function name="pg_get_viewdef_002" id="Function_85b590e" isSystem="false" >
			<comment><![CDATA[select statement of a view with pretty-print option]]></comment>
		</function>
		<function name="pg_get_viewdef_003" id="Function_310383aa" isSystem="false" >
			<comment><![CDATA[select statement of a view with pretty-print option]]></comment>
		</function>
		<function name="pg_get_viewdef_004" id="Function_1356e666" isSystem="false" >
			<comment><![CDATA[select statement of a view with pretty-printing and specified line wrapping]]></comment>
		</function>
		<function name="pg_has_role" id="Function_a5370d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(name, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_name_id$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, name, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_id_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_has_role(oid, oid, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_has_role_id_id$function$
]]></string>
			<comment><![CDATA[user privilege on role by username, role name]]></comment>
		</function>
		<function name="pg_has_role_001" id="Function_16c4d405" isSystem="false" >
			<comment><![CDATA[user privilege on role by username, role oid]]></comment>
		</function>
		<function name="pg_has_role_002" id="Function_34c0d208" isSystem="false" >
			<comment><![CDATA[user privilege on role by user oid, role name]]></comment>
		</function>
		<function name="pg_has_role_003" id="Function_6af492" isSystem="false" >
			<comment><![CDATA[user privilege on role by user oid, role oid]]></comment>
		</function>
		<function name="pg_has_role_004" id="Function_2b0f4f54" isSystem="false" >
			<comment><![CDATA[current user privilege on role by role name]]></comment>
		</function>
		<function name="pg_has_role_005" id="Function_24aad305" isSystem="false" >
			<comment><![CDATA[current user privilege on role by role oid]]></comment>
		</function>
		<function name="pg_identify_object" id="Function_364b33c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_identify_object(classid oid, objid oid, subobjid integer, OUT type text, OUT schema text, OUT name text, OUT identity text)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_identify_object$function$
]]></string>
			<comment><![CDATA[get machine-parseable identification of SQL object]]></comment>
		</function>
		<function name="pg_indexes_size" id="Function_276f4f33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_indexes_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_indexes_size$function$
]]></string>
			<comment><![CDATA[disk space usage for all indexes attached to the specified table]]></comment>
		</function>
		<function name="pg_is_in_backup" id="Function_11abcbf2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_in_backup()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_is_in_backup$function$
]]></string>
			<comment><![CDATA[true if server is in online backup]]></comment>
		</function>
		<function name="pg_is_in_recovery" id="Function_33bbd7fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_in_recovery()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_is_in_recovery$function$
]]></string>
			<comment><![CDATA[true if server is in recovery]]></comment>
		</function>
		<function name="pg_is_other_temp_schema" id="Function_3a76ef53" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_other_temp_schema(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_is_other_temp_schema$function$
]]></string>
			<comment><![CDATA[is schema another session's temp schema?]]></comment>
		</function>
		<function name="pg_is_xlog_replay_paused" id="Function_1e919ab2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_is_xlog_replay_paused()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_is_xlog_replay_paused$function$
]]></string>
			<comment><![CDATA[true if xlog replay is paused]]></comment>
		</function>
		<function name="pg_last_xact_replay_timestamp" id="Function_38b47bdd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xact_replay_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STRICT
AS $function$pg_last_xact_replay_timestamp$function$
]]></string>
			<comment><![CDATA[timestamp of last replay xact]]></comment>
		</function>
		<function name="pg_last_xlog_receive_location" id="Function_377fc743" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xlog_receive_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_last_xlog_receive_location$function$
]]></string>
			<comment><![CDATA[current xlog flush location]]></comment>
		</function>
		<function name="pg_last_xlog_replay_location" id="Function_13429385" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_last_xlog_replay_location()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_last_xlog_replay_location$function$
]]></string>
			<comment><![CDATA[last xlog replay location]]></comment>
		</function>
		<function name="pg_listening_channels" id="Function_6308f0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_listening_channels()
 RETURNS SETOF text
 LANGUAGE internal
 STABLE STRICT ROWS 10
AS $function$pg_listening_channels$function$
]]></string>
			<comment><![CDATA[get the channels that the current backend listens to]]></comment>
		</function>
		<function name="pg_lock_status" id="Function_18b4e6a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lock_status(OUT locktype text, OUT database oid, OUT relation oid, OUT page integer, OUT tuple smallint, OUT virtualxid text, OUT transactionid xid, OUT classid oid, OUT objid oid, OUT objsubid smallint, OUT virtualtransaction text, OUT pid integer, OUT mode text, OUT granted boolean, OUT fastpath boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT
AS $function$pg_lock_status$function$
]]></string>
			<comment><![CDATA[view system lock information]]></comment>
		</function>
		<function name="pg_logical_slot_get_binary_changes" id="Function_7a71f27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_get_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data bytea)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_get_binary_changes$function$
]]></string>
			<comment><![CDATA[get binary changes from replication slot]]></comment>
		</function>
		<function name="pg_logical_slot_get_changes" id="Function_345b3383" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_get_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data text)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_get_changes$function$
]]></string>
			<comment><![CDATA[get changes from replication slot]]></comment>
		</function>
		<function name="pg_logical_slot_peek_binary_changes" id="Function_1612d890" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_peek_binary_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data bytea)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_peek_binary_changes$function$
]]></string>
			<comment><![CDATA[peek at binary changes from replication slot]]></comment>
		</function>
		<function name="pg_logical_slot_peek_changes" id="Function_215c293f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_logical_slot_peek_changes(slot_name name, upto_lsn pg_lsn, upto_nchanges integer, VARIADIC options text[] DEFAULT '{}'::text[], OUT location pg_lsn, OUT xid xid, OUT data text)
 RETURNS SETOF record
 LANGUAGE internal
 COST 1000
AS $function$pg_logical_slot_peek_changes$function$
]]></string>
			<comment><![CDATA[peek at changes from replication slot]]></comment>
		</function>
		<function name="pg_ls_dir" id="Function_3722c05b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ls_dir(text)
 RETURNS SETOF text
 LANGUAGE internal
 STRICT
AS $function$pg_ls_dir$function$
]]></string>
			<comment><![CDATA[list all files in a directory]]></comment>
		</function>
		<function name="pg_lsn_cmp" id="Function_3f4eef8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_cmp(pg_lsn, pg_lsn)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="pg_lsn_eq" id="Function_163a9eff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_eq(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="pg_lsn_ge" id="Function_1223e306" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_ge(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="pg_lsn_gt" id="Function_28e5dc3a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_gt(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="pg_lsn_hash" id="Function_177ab43b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_hash(pg_lsn)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="pg_lsn_in" id="Function_209bf89" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_lsn_le" id="Function_218d9743" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_le(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="pg_lsn_lt" id="Function_18990dc7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_lt(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="pg_lsn_mi" id="Function_113174b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_mi(pg_lsn, pg_lsn)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="pg_lsn_ne" id="Function_2d47a5c0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_ne(pg_lsn, pg_lsn)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="pg_lsn_out" id="Function_10492eff" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_lsn_recv" id="Function_4cc8a59" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_recv(internal)
 RETURNS pg_lsn
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_lsn_send" id="Function_30997827" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_lsn_send(pg_lsn)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_lsn_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_my_temp_schema" id="Function_81954be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_my_temp_schema()
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_my_temp_schema$function$
]]></string>
			<comment><![CDATA[get OID of current session's temp schema, if any]]></comment>
		</function>
		<function name="pg_node_tree_in" id="Function_374e3ec1" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_node_tree_out" id="Function_1129c854" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_node_tree_recv" id="Function_2c463aeb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_recv(internal)
 RETURNS pg_node_tree
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_node_tree_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_node_tree_send" id="Function_3b2488c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_node_tree_send(pg_node_tree)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_node_tree_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="pg_notify" id="Function_1d2c58d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_notify(text, text)
 RETURNS void
 LANGUAGE internal
AS $function$pg_notify$function$
]]></string>
			<comment><![CDATA[send a notification event]]></comment>
		</function>
		<function name="pg_opclass_is_visible" id="Function_107bd6e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_opclass_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_opclass_is_visible$function$
]]></string>
			<comment><![CDATA[is opclass visible in search path?]]></comment>
		</function>
		<function name="pg_operator_is_visible" id="Function_2d000b1e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_operator_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_operator_is_visible$function$
]]></string>
			<comment><![CDATA[is operator visible in search path?]]></comment>
		</function>
		<function name="pg_opfamily_is_visible" id="Function_3b0bce27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_opfamily_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_opfamily_is_visible$function$
]]></string>
			<comment><![CDATA[is opfamily visible in search path?]]></comment>
		</function>
		<function name="pg_options_to_table" id="Function_2b28147" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_options_to_table(options_array text[], OUT option_name text, OUT option_value text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT ROWS 3
AS $function$pg_options_to_table$function$
]]></string>
			<comment><![CDATA[convert generic options array to name/value table]]></comment>
		</function>
		<function name="pg_postmaster_start_time" id="Function_1eb1a50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_postmaster_start_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_postmaster_start_time$function$
]]></string>
			<comment><![CDATA[postmaster start time]]></comment>
		</function>
		<function name="pg_prepared_statement" id="Function_1cc7bbf8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_prepared_statement(OUT name text, OUT statement text, OUT prepare_time timestamp with time zone, OUT parameter_types regtype[], OUT from_sql boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_prepared_statement$function$
]]></string>
			<comment><![CDATA[get the prepared statements for this session]]></comment>
		</function>
		<function name="pg_prepared_xact" id="Function_218be91b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_prepared_xact(OUT transaction xid, OUT gid text, OUT prepared timestamp with time zone, OUT ownerid oid, OUT dbid oid)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT
AS $function$pg_prepared_xact$function$
]]></string>
			<comment><![CDATA[view two-phase transactions]]></comment>
		</function>
		<function name="pg_read_binary_file" id="Function_3f6467b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$pg_read_binary_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_binary_file(text, bigint, bigint)
 RETURNS bytea
 LANGUAGE internal
 STRICT
AS $function$pg_read_binary_file$function$
]]></string>
			<comment><![CDATA[read bytea from a file]]></comment>
		</function>
		<function name="pg_read_binary_file_001" id="Function_5b8e431" isSystem="false" >
			<comment><![CDATA[read bytea from a file]]></comment>
		</function>
		<function name="pg_read_file" id="Function_19117595" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_read_file_all$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_read_file(text, bigint, bigint)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_read_file$function$
]]></string>
			<comment><![CDATA[read text from a file]]></comment>
		</function>
		<function name="pg_read_file_001" id="Function_1b22ace3" isSystem="false" >
			<comment><![CDATA[read text from a file]]></comment>
		</function>
		<function name="pg_relation_filenode" id="Function_285287f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_filenode(regclass)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_relation_filenode$function$
]]></string>
			<comment><![CDATA[filenode identifier of relation]]></comment>
		</function>
		<function name="pg_relation_filepath" id="Function_36c807ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_filepath(regclass)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_relation_filepath$function$
]]></string>
			<comment><![CDATA[file path of relation]]></comment>
		</function>
		<function name="pg_relation_is_updatable" id="Function_2b51df58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_is_updatable(regclass, boolean)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_relation_is_updatable$function$
]]></string>
			<comment><![CDATA[is a relation insertable/updatable/deletable]]></comment>
		</function>
		<function name="pg_relation_size" id="Function_156fb222" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass)
 RETURNS bigint
 LANGUAGE sql
 STRICT COST 1
AS $function$select pg_catalog.pg_relation_size($1, 'main')$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_relation_size(regclass, text)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_relation_size$function$
]]></string>
			<comment><![CDATA[disk space usage for the main fork of the specified table or index]]></comment>
		</function>
		<function name="pg_relation_size_001" id="Function_35eb5e21" isSystem="false" >
			<comment><![CDATA[disk space usage for the specified fork of a table or index]]></comment>
		</function>
		<function name="pg_reload_conf" id="Function_4c240f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_reload_conf()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_reload_conf$function$
]]></string>
			<comment><![CDATA[reload configuration files]]></comment>
		</function>
		<function name="pg_rotate_logfile" id="Function_1627d49f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_rotate_logfile()
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_rotate_logfile$function$
]]></string>
			<comment><![CDATA[rotate log file]]></comment>
		</function>
		<function name="pg_sequence_parameters" id="Function_6825fd5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sequence_parameters(sequence_oid oid, OUT start_value bigint, OUT minimum_value bigint, OUT maximum_value bigint, OUT increment bigint, OUT cycle_option boolean)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_sequence_parameters$function$
]]></string>
			<comment><![CDATA[sequence parameters, for use by information schema]]></comment>
		</function>
		<function name="pg_show_all_settings" id="Function_1e04e769" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_show_all_settings(OUT name text, OUT setting text, OUT unit text, OUT category text, OUT short_desc text, OUT extra_desc text, OUT context text, OUT vartype text, OUT source text, OUT min_val text, OUT max_val text, OUT enumvals text[], OUT boot_val text, OUT reset_val text, OUT sourcefile text, OUT sourceline integer)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$show_all_settings$function$
]]></string>
			<comment><![CDATA[SHOW ALL as a function]]></comment>
		</function>
		<function name="pg_size_pretty" id="Function_1ad2b90b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(bigint)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_size_pretty$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_size_pretty(numeric)
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$pg_size_pretty_numeric$function$
]]></string>
			<comment><![CDATA[convert a long int to a human readable text using size units]]></comment>
		</function>
		<function name="pg_size_pretty_001" id="Function_5048325" isSystem="false" >
			<comment><![CDATA[convert a numeric to a human readable text using size units]]></comment>
		</function>
		<function name="pg_sleep" id="Function_29e29d3c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep(double precision)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_sleep$function$
]]></string>
			<comment><![CDATA[sleep for the specified time in seconds]]></comment>
		</function>
		<function name="pg_sleep_for" id="Function_206b4b00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep_for(interval)
 RETURNS void
 LANGUAGE sql
 STRICT COST 1
AS $function$select pg_catalog.pg_sleep(extract(epoch from pg_catalog.clock_timestamp() operator(pg_catalog.+) $1) operator(pg_catalog.-) extract(epoch from pg_catalog.clock_timestamp()))$function$
]]></string>
			<comment><![CDATA[sleep for the specified interval]]></comment>
		</function>
		<function name="pg_sleep_until" id="Function_1a62ff7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_sleep_until(timestamp with time zone)
 RETURNS void
 LANGUAGE sql
 STRICT COST 1
AS $function$select pg_catalog.pg_sleep(extract(epoch from $1) operator(pg_catalog.-) extract(epoch from pg_catalog.clock_timestamp()))$function$
]]></string>
			<comment><![CDATA[sleep until the specified time]]></comment>
		</function>
		<function name="pg_start_backup" id="Function_4997c5e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_start_backup(label text, fast boolean DEFAULT false)
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_start_backup$function$
]]></string>
			<comment><![CDATA[prepare for taking an online backup]]></comment>
		</function>
		<function name="pg_stat_clear_snapshot" id="Function_3a81e5e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_clear_snapshot()
 RETURNS void
 LANGUAGE internal
AS $function$pg_stat_clear_snapshot$function$
]]></string>
			<comment><![CDATA[statistics: discard current transaction's statistics snapshot]]></comment>
		</function>
		<function name="pg_stat_file" id="Function_2768bb0c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_file(filename text, OUT size bigint, OUT access timestamp with time zone, OUT modification timestamp with time zone, OUT change timestamp with time zone, OUT creation timestamp with time zone, OUT isdir boolean)
 RETURNS record
 LANGUAGE internal
 STRICT
AS $function$pg_stat_file$function$
]]></string>
			<comment><![CDATA[get information about file]]></comment>
		</function>
		<function name="pg_stat_get_activity" id="Function_2ffd286e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_activity(pid integer, OUT datid oid, OUT pid integer, OUT usesysid oid, OUT application_name text, OUT state text, OUT query text, OUT waiting boolean, OUT xact_start timestamp with time zone, OUT query_start timestamp with time zone, OUT backend_start timestamp with time zone, OUT state_change timestamp with time zone, OUT client_addr inet, OUT client_hostname text, OUT client_port integer, OUT backend_xid xid, OUT backend_xmin xid)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 100
AS $function$pg_stat_get_activity$function$
]]></string>
			<comment><![CDATA[statistics: information about currently active backends]]></comment>
		</function>
		<function name="pg_stat_get_analyze_count" id="Function_22ed0be6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_analyze_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_analyze_count$function$
]]></string>
			<comment><![CDATA[statistics: number of manual analyzes for a table]]></comment>
		</function>
		<function name="pg_stat_get_archiver" id="Function_7c5a254" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_archiver(OUT archived_count bigint, OUT last_archived_wal text, OUT last_archived_time timestamp with time zone, OUT failed_count bigint, OUT last_failed_wal text, OUT last_failed_time timestamp with time zone, OUT stats_reset timestamp with time zone)
 RETURNS record
 LANGUAGE internal
 STABLE
AS $function$pg_stat_get_archiver$function$
]]></string>
			<comment><![CDATA[statistics: information about WAL archiver]]></comment>
		</function>
		<function name="pg_stat_get_autoanalyze_count" id="Function_1fb7e41b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_autoanalyze_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_autoanalyze_count$function$
]]></string>
			<comment><![CDATA[statistics: number of auto analyzes for a table]]></comment>
		</function>
		<function name="pg_stat_get_autovacuum_count" id="Function_1bf51a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_autovacuum_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_autovacuum_count$function$
]]></string>
			<comment><![CDATA[statistics: number of auto vacuums for a table]]></comment>
		</function>
		<function name="pg_stat_get_backend_activity" id="Function_32147b70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_activity(integer)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_activity$function$
]]></string>
			<comment><![CDATA[statistics: current query of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_activity_start" id="Function_11b14834" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_activity_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_activity_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for current query of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_client_addr" id="Function_34624ec6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_client_addr(integer)
 RETURNS inet
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_client_addr$function$
]]></string>
			<comment><![CDATA[statistics: address of client connected to backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_client_port" id="Function_14923388" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_client_port(integer)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_client_port$function$
]]></string>
			<comment><![CDATA[statistics: port number of client connected to backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_dbid" id="Function_c754770" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_dbid(integer)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_dbid$function$
]]></string>
			<comment><![CDATA[statistics: database ID of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_idset" id="Function_1fdec8df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_idset()
 RETURNS SETOF integer
 LANGUAGE internal
 STABLE STRICT ROWS 100
AS $function$pg_stat_get_backend_idset$function$
]]></string>
			<comment><![CDATA[statistics: currently active backend IDs]]></comment>
		</function>
		<function name="pg_stat_get_backend_pid" id="Function_3b4708e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_pid(integer)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_pid$function$
]]></string>
			<comment><![CDATA[statistics: PID of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_start" id="Function_19d19d71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for current backend session]]></comment>
		</function>
		<function name="pg_stat_get_backend_userid" id="Function_361d9ab8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_userid(integer)
 RETURNS oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_userid$function$
]]></string>
			<comment><![CDATA[statistics: user ID of backend]]></comment>
		</function>
		<function name="pg_stat_get_backend_waiting" id="Function_395075f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_waiting(integer)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_waiting$function$
]]></string>
			<comment><![CDATA[statistics: is backend currently waiting for a lock]]></comment>
		</function>
		<function name="pg_stat_get_backend_xact_start" id="Function_6cf995b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_backend_xact_start(integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_backend_xact_start$function$
]]></string>
			<comment><![CDATA[statistics: start time for backend's current transaction]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_buf_written_checkpoints" id="Function_1ac76ec7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_buf_written_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_buf_written_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by the bgwriter during checkpoints]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_buf_written_clean" id="Function_31e271e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_buf_written_clean()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_buf_written_clean$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by the bgwriter for cleaning dirty buffers]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_maxwritten_clean" id="Function_1d629223" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_maxwritten_clean()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_maxwritten_clean$function$
]]></string>
			<comment><![CDATA[statistics: number of times the bgwriter stopped processing when it had written too many buffers while cleaning]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_requested_checkpoints" id="Function_3491677d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_requested_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_requested_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of backend requested checkpoints started by the bgwriter]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_stat_reset_time" id="Function_28f8b059" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_stat_reset_time()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_stat_reset_time$function$
]]></string>
			<comment><![CDATA[statistics: last reset for the bgwriter]]></comment>
		</function>
		<function name="pg_stat_get_bgwriter_timed_checkpoints" id="Function_318a5505" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_bgwriter_timed_checkpoints()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_bgwriter_timed_checkpoints$function$
]]></string>
			<comment><![CDATA[statistics: number of timed checkpoints started by the bgwriter]]></comment>
		</function>
		<function name="pg_stat_get_blocks_fetched" id="Function_2da13bfe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks fetched]]></comment>
		</function>
		<function name="pg_stat_get_blocks_hit" id="Function_2fede404" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks found in cache]]></comment>
		</function>
		<function name="pg_stat_get_buf_alloc" id="Function_d5f7c26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_alloc()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_buf_alloc$function$
]]></string>
			<comment><![CDATA[statistics: number of buffer allocations]]></comment>
		</function>
		<function name="pg_stat_get_buf_fsync_backend" id="Function_328e88c3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_fsync_backend()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_buf_fsync_backend$function$
]]></string>
			<comment><![CDATA[statistics: number of backend buffer writes that did their own fsync]]></comment>
		</function>
		<function name="pg_stat_get_buf_written_backend" id="Function_354509ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_buf_written_backend()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_buf_written_backend$function$
]]></string>
			<comment><![CDATA[statistics: number of buffers written by backends]]></comment>
		</function>
		<function name="pg_stat_get_checkpoint_sync_time" id="Function_2b9ed474" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_checkpoint_sync_time()
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_checkpoint_sync_time$function$
]]></string>
			<comment><![CDATA[statistics: checkpoint time spent synchronizing buffers to disk, in msec]]></comment>
		</function>
		<function name="pg_stat_get_checkpoint_write_time" id="Function_b37aaf5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_checkpoint_write_time()
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_checkpoint_write_time$function$
]]></string>
			<comment><![CDATA[statistics: checkpoint time spent writing buffers to disk, in msec]]></comment>
		</function>
		<function name="pg_stat_get_db_blk_read_time" id="Function_1754c3ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blk_read_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blk_read_time$function$
]]></string>
			<comment><![CDATA[statistics: block read time, in msec]]></comment>
		</function>
		<function name="pg_stat_get_db_blk_write_time" id="Function_1eee95f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blk_write_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blk_write_time$function$
]]></string>
			<comment><![CDATA[statistics: block write time, in msec]]></comment>
		</function>
		<function name="pg_stat_get_db_blocks_fetched" id="Function_6bedfb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: blocks fetched for database]]></comment>
		</function>
		<function name="pg_stat_get_db_blocks_hit" id="Function_33dbfe82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: blocks found in cache for database]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_all" id="Function_2e19562c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_all(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_all$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_bufferpin" id="Function_c2326bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_bufferpin(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_bufferpin$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by shared buffer pin]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_lock" id="Function_306c18b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_lock(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_lock$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by relation lock]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_snapshot" id="Function_2d5ba378" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_snapshot(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_snapshot$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by snapshot expiry]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_startup_deadlock" id="Function_27686e49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_startup_deadlock(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_startup_deadlock$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by buffer deadlock]]></comment>
		</function>
		<function name="pg_stat_get_db_conflict_tablespace" id="Function_23b70bc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_conflict_tablespace(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_conflict_tablespace$function$
]]></string>
			<comment><![CDATA[statistics: recovery conflicts in database caused by drop tablespace]]></comment>
		</function>
		<function name="pg_stat_get_db_deadlocks" id="Function_3042bd8a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_deadlocks(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_deadlocks$function$
]]></string>
			<comment><![CDATA[statistics: deadlocks detected in database]]></comment>
		</function>
		<function name="pg_stat_get_db_numbackends" id="Function_2bda9d5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_numbackends(oid)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_numbackends$function$
]]></string>
			<comment><![CDATA[statistics: number of backends in database]]></comment>
		</function>
		<function name="pg_stat_get_db_stat_reset_time" id="Function_2a79de92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_stat_reset_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_stat_reset_time$function$
]]></string>
			<comment><![CDATA[statistics: last reset for a database]]></comment>
		</function>
		<function name="pg_stat_get_db_temp_bytes" id="Function_3a1690d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_temp_bytes(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_temp_bytes$function$
]]></string>
			<comment><![CDATA[statistics: number of bytes in temporary files written]]></comment>
		</function>
		<function name="pg_stat_get_db_temp_files" id="Function_236a416" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_temp_files(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_temp_files$function$
]]></string>
			<comment><![CDATA[statistics: number of temporary files written]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_deleted" id="Function_1bc77f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: tuples deleted in database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_fetched" id="Function_cfe09d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: tuples fetched for database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_inserted" id="Function_258403d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: tuples inserted in database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_returned" id="Function_26853401" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: tuples returned for database]]></comment>
		</function>
		<function name="pg_stat_get_db_tuples_updated" id="Function_15193a5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: tuples updated in database]]></comment>
		</function>
		<function name="pg_stat_get_db_xact_commit" id="Function_1b18cc8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_xact_commit(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_xact_commit$function$
]]></string>
			<comment><![CDATA[statistics: transactions committed]]></comment>
		</function>
		<function name="pg_stat_get_db_xact_rollback" id="Function_1a0bea06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_db_xact_rollback(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_db_xact_rollback$function$
]]></string>
			<comment><![CDATA[statistics: transactions rolled back]]></comment>
		</function>
		<function name="pg_stat_get_dead_tuples" id="Function_4663097" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_dead_tuples(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_dead_tuples$function$
]]></string>
			<comment><![CDATA[statistics: number of dead tuples]]></comment>
		</function>
		<function name="pg_stat_get_function_calls" id="Function_1d8e3e6f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_calls(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_function_calls$function$
]]></string>
			<comment><![CDATA[statistics: number of function calls]]></comment>
		</function>
		<function name="pg_stat_get_function_self_time" id="Function_8e4f6a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_self_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_function_self_time$function$
]]></string>
			<comment><![CDATA[statistics: self execution time of function, in msec]]></comment>
		</function>
		<function name="pg_stat_get_function_total_time" id="Function_f9739d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_function_total_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_function_total_time$function$
]]></string>
			<comment><![CDATA[statistics: total execution time of function, in msec]]></comment>
		</function>
		<function name="pg_stat_get_last_analyze_time" id="Function_165bf50e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_analyze_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_analyze_time$function$
]]></string>
			<comment><![CDATA[statistics: last manual analyze time for a table]]></comment>
		</function>
		<function name="pg_stat_get_last_autoanalyze_time" id="Function_3abfc42c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_autoanalyze_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_autoanalyze_time$function$
]]></string>
			<comment><![CDATA[statistics: last auto analyze time for a table]]></comment>
		</function>
		<function name="pg_stat_get_last_autovacuum_time" id="Function_1d26e7f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_autovacuum_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_autovacuum_time$function$
]]></string>
			<comment><![CDATA[statistics: last auto vacuum time for a table]]></comment>
		</function>
		<function name="pg_stat_get_last_vacuum_time" id="Function_10975515" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_last_vacuum_time(oid)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_last_vacuum_time$function$
]]></string>
			<comment><![CDATA[statistics: last manual vacuum time for a table]]></comment>
		</function>
		<function name="pg_stat_get_live_tuples" id="Function_19863baa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_live_tuples(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_live_tuples$function$
]]></string>
			<comment><![CDATA[statistics: number of live tuples]]></comment>
		</function>
		<function name="pg_stat_get_mod_since_analyze" id="Function_3b8dada8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_mod_since_analyze(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_mod_since_analyze$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples changed since last analyze]]></comment>
		</function>
		<function name="pg_stat_get_numscans" id="Function_1b1272f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_numscans(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_numscans$function$
]]></string>
			<comment><![CDATA[statistics: number of scans done for table/index]]></comment>
		</function>
		<function name="pg_stat_get_tuples_deleted" id="Function_11190856" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples deleted]]></comment>
		</function>
		<function name="pg_stat_get_tuples_fetched" id="Function_2e488de9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples fetched by idxscan]]></comment>
		</function>
		<function name="pg_stat_get_tuples_hot_updated" id="Function_1b8c8db1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_hot_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_hot_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples hot updated]]></comment>
		</function>
		<function name="pg_stat_get_tuples_inserted" id="Function_1513c37e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples inserted]]></comment>
		</function>
		<function name="pg_stat_get_tuples_returned" id="Function_38d66cc2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples read by seqscan]]></comment>
		</function>
		<function name="pg_stat_get_tuples_updated" id="Function_4725d11" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples updated]]></comment>
		</function>
		<function name="pg_stat_get_vacuum_count" id="Function_1ad042c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_vacuum_count(oid)
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_stat_get_vacuum_count$function$
]]></string>
			<comment><![CDATA[statistics: number of manual vacuums for a table]]></comment>
		</function>
		<function name="pg_stat_get_wal_senders" id="Function_f669119" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_wal_senders(OUT pid integer, OUT state text, OUT sent_location pg_lsn, OUT write_location pg_lsn, OUT flush_location pg_lsn, OUT replay_location pg_lsn, OUT sync_priority integer, OUT sync_state text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE ROWS 10
AS $function$pg_stat_get_wal_senders$function$
]]></string>
			<comment><![CDATA[statistics: information about currently active replication]]></comment>
		</function>
		<function name="pg_stat_get_xact_blocks_fetched" id="Function_208884bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_blocks_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_blocks_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks fetched in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_blocks_hit" id="Function_13a0b9a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_blocks_hit(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_blocks_hit$function$
]]></string>
			<comment><![CDATA[statistics: number of blocks found in cache in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_function_calls" id="Function_1572a795" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_calls(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_function_calls$function$
]]></string>
			<comment><![CDATA[statistics: number of function calls in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_function_self_time" id="Function_609755" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_self_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_function_self_time$function$
]]></string>
			<comment><![CDATA[statistics: self execution time of function in current transaction, in msec]]></comment>
		</function>
		<function name="pg_stat_get_xact_function_total_time" id="Function_77c2c37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_function_total_time(oid)
 RETURNS double precision
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_function_total_time$function$
]]></string>
			<comment><![CDATA[statistics: total execution time of function in current transaction, in msec]]></comment>
		</function>
		<function name="pg_stat_get_xact_numscans" id="Function_17047125" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_numscans(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_numscans$function$
]]></string>
			<comment><![CDATA[statistics: number of scans done for table/index in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_deleted" id="Function_cce162" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_deleted(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_deleted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples deleted in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_fetched" id="Function_302ed46f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_fetched(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_fetched$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples fetched by idxscan in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_hot_updated" id="Function_15863de2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_hot_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_hot_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples hot updated in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_inserted" id="Function_1800ecb1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_inserted(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_inserted$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples inserted in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_returned" id="Function_2f266e13" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_returned(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_returned$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples read by seqscan in current transaction]]></comment>
		</function>
		<function name="pg_stat_get_xact_tuples_updated" id="Function_9e61102" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_get_xact_tuples_updated(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_stat_get_xact_tuples_updated$function$
]]></string>
			<comment><![CDATA[statistics: number of tuples updated in current transaction]]></comment>
		</function>
		<function name="pg_stat_reset" id="Function_4f825ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset()
 RETURNS void
 LANGUAGE internal
AS $function$pg_stat_reset$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for current database]]></comment>
		</function>
		<function name="pg_stat_reset_shared" id="Function_160f1876" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_shared(text)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_stat_reset_shared$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics shared across the cluster]]></comment>
		</function>
		<function name="pg_stat_reset_single_function_counters" id="Function_8a443f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_single_function_counters(oid)
 RETURNS void
 LANGUAGE internal
AS $function$pg_stat_reset_single_function_counters$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for a single function in the current database]]></comment>
		</function>
		<function name="pg_stat_reset_single_table_counters" id="Function_156d7a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stat_reset_single_table_counters(oid)
 RETURNS void
 LANGUAGE internal
AS $function$pg_stat_reset_single_table_counters$function$
]]></string>
			<comment><![CDATA[statistics: reset collected statistics for a single table or index in the current database]]></comment>
		</function>
		<function name="pg_stop_backup" id="Function_1bbd95c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_stop_backup()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_stop_backup$function$
]]></string>
			<comment><![CDATA[finish taking an online backup]]></comment>
		</function>
		<function name="pg_switch_xlog" id="Function_5d5da2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_switch_xlog()
 RETURNS pg_lsn
 LANGUAGE internal
 STRICT
AS $function$pg_switch_xlog$function$
]]></string>
			<comment><![CDATA[switch to new xlog file]]></comment>
		</function>
		<function name="pg_table_is_visible" id="Function_14c58c06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_table_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_table_is_visible$function$
]]></string>
			<comment><![CDATA[is table visible in search path?]]></comment>
		</function>
		<function name="pg_table_size" id="Function_305aece5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_table_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_table_size$function$
]]></string>
			<comment><![CDATA[disk space usage for the specified table, including TOAST, free space and visibility map]]></comment>
		</function>
		<function name="pg_tablespace_databases" id="Function_e0835b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_databases(oid)
 RETURNS SETOF oid
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_tablespace_databases$function$
]]></string>
			<comment><![CDATA[get OIDs of databases in a tablespace]]></comment>
		</function>
		<function name="pg_tablespace_location" id="Function_1b7378d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_location(oid)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_tablespace_location$function$
]]></string>
			<comment><![CDATA[tablespace location]]></comment>
		</function>
		<function name="pg_tablespace_size" id="Function_83df161" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(name)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_tablespace_size_name$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_tablespace_size(oid)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_tablespace_size_oid$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified tablespace]]></comment>
		</function>
		<function name="pg_tablespace_size_001" id="Function_147ddd3f" isSystem="false" >
			<comment><![CDATA[total disk space usage for the specified tablespace]]></comment>
		</function>
		<function name="pg_terminate_backend" id="Function_2691727b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_terminate_backend(integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_terminate_backend$function$
]]></string>
			<comment><![CDATA[terminate a server process]]></comment>
		</function>
		<function name="pg_timezone_abbrevs" id="Function_70f96cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_timezone_abbrevs(OUT abbrev text, OUT utc_offset interval, OUT is_dst boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_timezone_abbrevs$function$
]]></string>
			<comment><![CDATA[get the available time zone abbreviations]]></comment>
		</function>
		<function name="pg_timezone_names" id="Function_3acc3223" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_timezone_names(OUT name text, OUT abbrev text, OUT utc_offset interval, OUT is_dst boolean)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_timezone_names$function$
]]></string>
			<comment><![CDATA[get the available time zone names]]></comment>
		</function>
		<function name="pg_total_relation_size" id="Function_10a0426c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_total_relation_size(regclass)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$pg_total_relation_size$function$
]]></string>
			<comment><![CDATA[total disk space usage for the specified table and associated indexes]]></comment>
		</function>
		<function name="pg_trigger_depth" id="Function_18b3c0e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_trigger_depth()
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$pg_trigger_depth$function$
]]></string>
			<comment><![CDATA[current trigger depth]]></comment>
		</function>
		<function name="pg_try_advisory_lock" id="Function_16496a01" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_lock_001" id="Function_5deceef" isSystem="false" >
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_lock_shared" id="Function_f622225" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_lock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_lock_shared_001" id="Function_22f3f580" isSystem="false" >
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock" id="Function_11ce12f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_int4$function$
]]></string>
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock_001" id="Function_342888fc" isSystem="false" >
			<comment><![CDATA[obtain exclusive advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock_shared" id="Function_270f7947" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(bigint)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int8$function$
CREATE OR REPLACE FUNCTION pg_catalog.pg_try_advisory_xact_lock_shared(integer, integer)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$pg_try_advisory_xact_lock_shared_int4$function$
]]></string>
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_try_advisory_xact_lock_shared_001" id="Function_33f2e664" isSystem="false" >
			<comment><![CDATA[obtain shared advisory lock if available]]></comment>
		</function>
		<function name="pg_ts_config_is_visible" id="Function_2e7ada8f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_config_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_config_is_visible$function$
]]></string>
			<comment><![CDATA[is text search configuration visible in search path?]]></comment>
		</function>
		<function name="pg_ts_dict_is_visible" id="Function_1dbf28e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_dict_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_dict_is_visible$function$
]]></string>
			<comment><![CDATA[is text search dictionary visible in search path?]]></comment>
		</function>
		<function name="pg_ts_parser_is_visible" id="Function_116efcf2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_parser_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_parser_is_visible$function$
]]></string>
			<comment><![CDATA[is text search parser visible in search path?]]></comment>
		</function>
		<function name="pg_ts_template_is_visible" id="Function_2410ed14" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_ts_template_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_ts_template_is_visible$function$
]]></string>
			<comment><![CDATA[is text search template visible in search path?]]></comment>
		</function>
		<function name="pg_type_is_visible" id="Function_27db11b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_type_is_visible(oid)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 10
AS $function$pg_type_is_visible$function$
]]></string>
			<comment><![CDATA[is type visible in search path?]]></comment>
		</function>
		<function name="pg_typeof" id="Function_1e893b59" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_typeof("any")
 RETURNS regtype
 LANGUAGE internal
 STABLE
AS $function$pg_typeof$function$
]]></string>
			<comment><![CDATA[type of the argument]]></comment>
		</function>
		<function name="pg_xlog_location_diff" id="Function_17ced894" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_location_diff(pg_lsn, pg_lsn)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_xlog_location_diff$function$
]]></string>
			<comment><![CDATA[difference in bytes, given two xlog locations]]></comment>
		</function>
		<function name="pg_xlog_replay_pause" id="Function_399f3a4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_replay_pause()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_xlog_replay_pause$function$
]]></string>
			<comment><![CDATA[pause xlog replay]]></comment>
		</function>
		<function name="pg_xlog_replay_resume" id="Function_2f37b79b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlog_replay_resume()
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$pg_xlog_replay_resume$function$
]]></string>
			<comment><![CDATA[resume xlog replay, if it was paused]]></comment>
		</function>
		<function name="pg_xlogfile_name" id="Function_2bad75b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlogfile_name(pg_lsn)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_xlogfile_name$function$
]]></string>
			<comment><![CDATA[xlog filename, given an xlog location]]></comment>
		</function>
		<function name="pg_xlogfile_name_offset" id="Function_217aebbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pg_xlogfile_name_offset(wal_location pg_lsn, OUT file_name text, OUT file_offset integer)
 RETURNS record
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pg_xlogfile_name_offset$function$
]]></string>
			<comment><![CDATA[xlog filename and byte offset, given an xlog location]]></comment>
		</function>
		<function name="pi" id="Function_11f43143" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pi()
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpi$function$
]]></string>
			<comment><![CDATA[PI]]></comment>
		</function>
		<function name="plainto_tsquery" id="Function_affd3cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE STRICT
AS $function$plainto_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.plainto_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$plainto_tsquery_byid$function$
]]></string>
			<comment><![CDATA[transform to tsquery]]></comment>
		</function>
		<function name="plainto_tsquery_001" id="Function_257f932f" isSystem="false" >
			<comment><![CDATA[transform to tsquery]]></comment>
		</function>
		<function name="plpgsql_call_handler" id="Function_174dd49d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_call_handler()
 RETURNS language_handler
 LANGUAGE c
AS '$libdir/plpgsql', $function$plpgsql_call_handler$function$
]]></string>
		</function>
		<function name="plpgsql_inline_handler" id="Function_33d685b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_inline_handler(internal)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/plpgsql', $function$plpgsql_inline_handler$function$
]]></string>
		</function>
		<function name="plpgsql_validator" id="Function_1fd5be2c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.plpgsql_validator(oid)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/plpgsql', $function$plpgsql_validator$function$
]]></string>
		</function>
		<function name="point" id="Function_12e7646d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point(lseg)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$lseg_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(path)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(box)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(circle)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_center$function$
CREATE OR REPLACE FUNCTION pg_catalog.point(double precision, double precision)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$construct_point$function$
]]></string>
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_001" id="Function_a9d6d84" isSystem="false" >
			<comment><![CDATA[convert x, y to point]]></comment>
		</function>
		<function name="point_002" id="Function_11775399" isSystem="false" >
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_003" id="Function_1e07a43f" isSystem="false" >
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_004" id="Function_281801ed" isSystem="false" >
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_005" id="Function_3250478b" isSystem="false" >
			<comment><![CDATA[center of]]></comment>
		</function>
		<function name="point_above" id="Function_1e6baacd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_above(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_above$function$
]]></string>
			<comment><![CDATA[implementation of >^ operator]]></comment>
		</function>
		<function name="point_add" id="Function_10b41d10" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_add(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_add$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="point_below" id="Function_2798b719" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_below(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_below$function$
]]></string>
			<comment><![CDATA[implementation of <^ operator]]></comment>
		</function>
		<function name="point_distance" id="Function_57a1ea3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_distance(point, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="point_div" id="Function_206746ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_div(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_div$function$
]]></string>
			<comment><![CDATA[implementation of / operator]]></comment>
		</function>
		<function name="point_eq" id="Function_19d9c8f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_eq(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_eq$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="point_horiz" id="Function_35d1e2f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_horiz(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_horiz$function$
]]></string>
			<comment><![CDATA[implementation of ?- operator]]></comment>
		</function>
		<function name="point_in" id="Function_2e6549fe" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_left" id="Function_143bc160" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_left(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="point_mul" id="Function_377dc02a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_mul(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_mul$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="point_ne" id="Function_22503064" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_ne(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="point_out" id="Function_a9e92d4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_recv" id="Function_3afacc90" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_recv(internal)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_right" id="Function_378ae104" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_right(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="point_send" id="Function_171f4c51" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_send(point)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="point_sub" id="Function_3ae66272" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_sub(point, point)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_sub$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="point_vert" id="Function_37679b68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.point_vert(point, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_vert$function$
]]></string>
			<comment><![CDATA[implementation of ?| operator]]></comment>
		</function>
		<function name="poly_above" id="Function_30ffef50" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_above(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_above$function$
]]></string>
			<comment><![CDATA[implementation of |>> operator]]></comment>
		</function>
		<function name="poly_below" id="Function_33eee447" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_below(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_below$function$
]]></string>
			<comment><![CDATA[implementation of <<| operator]]></comment>
		</function>
		<function name="poly_center" id="Function_25f41762" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_center(polygon)
 RETURNS point
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_center$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="poly_contain" id="Function_1a8d4237" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contain(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_contain$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="poly_contain_pt" id="Function_2efcdce0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contain_pt(polygon, point)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_contain_pt$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="poly_contained" id="Function_19c3dcaf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_contained(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_contained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="poly_distance" id="Function_29dbc915" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_distance(polygon, polygon)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_distance$function$
]]></string>
			<comment><![CDATA[implementation of <-> operator]]></comment>
		</function>
		<function name="poly_in" id="Function_27816b7b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="poly_left" id="Function_75e3ac7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_left(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_left$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="poly_npoints" id="Function_3088ea68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_npoints(polygon)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_npoints$function$
]]></string>
			<comment><![CDATA[implementation of # operator]]></comment>
		</function>
		<function name="poly_out" id="Function_14b0911" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="poly_overabove" id="Function_8405d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overabove(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overabove$function$
]]></string>
			<comment><![CDATA[implementation of |&> operator]]></comment>
		</function>
		<function name="poly_overbelow" id="Function_15eaa0bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overbelow(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overbelow$function$
]]></string>
			<comment><![CDATA[implementation of &<| operator]]></comment>
		</function>
		<function name="poly_overlap" id="Function_d6804c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overlap(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overlap$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="poly_overleft" id="Function_16568ad3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overleft(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="poly_overright" id="Function_2b90799c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_overright(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="poly_recv" id="Function_13d07441" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_recv(internal)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="poly_right" id="Function_e5392d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_right(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_right$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="poly_same" id="Function_1bce4cab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_same(polygon, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_same$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="poly_send" id="Function_19e3e8f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.poly_send(polygon)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$poly_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="polygon" id="Function_2649e46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.polygon(path)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(box)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_poly$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(circle)
 RETURNS polygon
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.polygon(12, $1)$function$
CREATE OR REPLACE FUNCTION pg_catalog.polygon(integer, circle)
 RETURNS polygon
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_poly$function$
]]></string>
			<comment><![CDATA[convert box to polygon]]></comment>
		</function>
		<function name="polygon_001" id="Function_2c25dbfc" isSystem="false" >
			<comment><![CDATA[convert path to polygon]]></comment>
		</function>
		<function name="polygon_002" id="Function_11cfe297" isSystem="false" >
			<comment><![CDATA[convert vertex count and circle to polygon]]></comment>
		</function>
		<function name="polygon_003" id="Function_2cd21088" isSystem="false" >
			<comment><![CDATA[convert circle to 12-vertex polygon]]></comment>
		</function>
		<function name="popen" id="Function_24753013" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.popen(path)
 RETURNS path
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$path_open$function$
]]></string>
			<comment><![CDATA[open path]]></comment>
		</function>
		<function name="position" id="Function_20f163b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."position"(bytea, bytea)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteapos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textpos$function$
CREATE OR REPLACE FUNCTION pg_catalog."position"(bit, bit)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitposition$function$
]]></string>
			<comment><![CDATA[position of sub-bitstring]]></comment>
		</function>
		<function name="position_001" id="Function_36f081ae" isSystem="false" >
			<comment><![CDATA[position of substring]]></comment>
		</function>
		<function name="position_002" id="Function_c4a4c64" isSystem="false" >
			<comment><![CDATA[position of substring]]></comment>
		</function>
		<function name="positionjoinsel" id="Function_ac22d55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.positionjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$positionjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity for position-comparison operators]]></comment>
		</function>
		<function name="positionsel" id="Function_ac73a76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.positionsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$positionsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for position-comparison operators]]></comment>
		</function>
		<function name="postgresql_fdw_validator" id="Function_3ab07462" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.postgresql_fdw_validator(text[], oid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$postgresql_fdw_validator$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="pow" id="Function_2369022" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pow(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
CREATE OR REPLACE FUNCTION pg_catalog.pow(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="pow_001" id="Function_3a804d17" isSystem="false" >
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="power" id="Function_3b233430" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.power(double precision, double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dpow$function$
CREATE OR REPLACE FUNCTION pg_catalog.power(numeric, numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_power$function$
]]></string>
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="power_001" id="Function_1c1592f9" isSystem="false" >
			<comment><![CDATA[exponentiation]]></comment>
		</function>
		<function name="prsd_end" id="Function_1049645b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_end(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_end$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_headline" id="Function_3381035c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_headline(internal, internal, tsquery)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_headline$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_lextype" id="Function_1d17ec92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_lextype(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_lextype$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_nexttoken" id="Function_1d6217ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_nexttoken(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_nexttoken$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="prsd_start" id="Function_24019cda" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.prsd_start(internal, integer)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$prsd_start$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="pt_contained_circle" id="Function_24a6596e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pt_contained_circle(point, circle)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pt_contained_circle$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="pt_contained_poly" id="Function_324376ee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.pt_contained_poly(point, polygon)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$pt_contained_poly$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="query_to_xml" id="Function_2932669" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xml(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xml$function$
]]></string>
			<comment><![CDATA[map query result to XML]]></comment>
		</function>
		<function name="query_to_xml_and_xmlschema" id="Function_285b46fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xml_and_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map query result and structure to XML and XML Schema]]></comment>
		</function>
		<function name="query_to_xmlschema" id="Function_260da6ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.query_to_xmlschema(query text, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$query_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map query result structure to XML Schema]]></comment>
		</function>
		<function name="querytree" id="Function_2aface64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.querytree(tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquerytree$function$
]]></string>
			<comment><![CDATA[show real useful query for GiST index]]></comment>
		</function>
		<function name="quote_ident" id="Function_9e233ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_ident(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$quote_ident$function$
]]></string>
			<comment><![CDATA[quote an identifier for usage in a querystring]]></comment>
		</function>
		<function name="quote_literal" id="Function_1104c260" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$quote_literal$function$
CREATE OR REPLACE FUNCTION pg_catalog.quote_literal(anyelement)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select pg_catalog.quote_literal($1::pg_catalog.text)$function$
]]></string>
			<comment><![CDATA[quote a literal for usage in a querystring]]></comment>
		</function>
		<function name="quote_literal_001" id="Function_2c3eed15" isSystem="false" >
			<comment><![CDATA[quote a data value for usage in a querystring]]></comment>
		</function>
		<function name="quote_nullable" id="Function_1cf547ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE
AS $function$quote_nullable$function$
CREATE OR REPLACE FUNCTION pg_catalog.quote_nullable(anyelement)
 RETURNS text
 LANGUAGE sql
 STABLE COST 1
AS $function$select pg_catalog.quote_nullable($1::pg_catalog.text)$function$
]]></string>
			<comment><![CDATA[quote a possibly-null literal for usage in a querystring]]></comment>
		</function>
		<function name="quote_nullable_001" id="Function_4fa3aae" isSystem="false" >
			<comment><![CDATA[quote a possibly-null data value for usage in a querystring]]></comment>
		</function>
		<function name="radians" id="Function_203e9ac9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.radians(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$radians$function$
]]></string>
			<comment><![CDATA[degrees to radians]]></comment>
		</function>
		<function name="radius" id="Function_3b91f1cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.radius(circle)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$circle_radius$function$
]]></string>
			<comment><![CDATA[radius of circle]]></comment>
		</function>
		<function name="random" id="Function_1342663c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.random()
 RETURNS double precision
 LANGUAGE internal
 STRICT
AS $function$drandom$function$
]]></string>
			<comment><![CDATA[random value]]></comment>
		</function>
		<function name="range_adjacent" id="Function_1a8db135" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_adjacent(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_adjacent$function$
]]></string>
			<comment><![CDATA[implementation of -|- operator]]></comment>
		</function>
		<function name="range_after" id="Function_1f96fd4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_after(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_after$function$
]]></string>
			<comment><![CDATA[implementation of >> operator]]></comment>
		</function>
		<function name="range_before" id="Function_36cc353e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_before(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_before$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="range_cmp" id="Function_1af83b69" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_cmp(anyrange, anyrange)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="range_contained_by" id="Function_5943d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contained_by(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_contained_by$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="range_contains" id="Function_89a2f1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contains(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_contains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="range_contains_elem" id="Function_1ae548a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_contains_elem(anyrange, anyelement)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_contains_elem$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="range_eq" id="Function_220aaa2f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_eq(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="range_ge" id="Function_2b1f826a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_ge(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="range_gist_compress" id="Function_2c467eda" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_compress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_compress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_consistent" id="Function_2764c2ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_consistent(internal, anyrange, integer, oid, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_consistent$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_decompress" id="Function_35c90298" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_decompress(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_decompress$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_penalty" id="Function_1d06d7d2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_penalty$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_picksplit" id="Function_3404fb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_picksplit$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_same" id="Function_109ad0e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_same(anyrange, anyrange, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_same$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gist_union" id="Function_2c0e9e0b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gist_union(internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gist_union$function$
]]></string>
			<comment><![CDATA[GiST support]]></comment>
		</function>
		<function name="range_gt" id="Function_1879ff37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_gt(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="range_in" id="Function_fc95a88" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_intersect" id="Function_29812c6c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_intersect(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_intersect$function$
]]></string>
			<comment><![CDATA[implementation of * operator]]></comment>
		</function>
		<function name="range_le" id="Function_a327cb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_le(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="range_lt" id="Function_36fa9584" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_lt(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="range_minus" id="Function_2027a933" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_minus(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_minus$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="range_ne" id="Function_1875f573" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_ne(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="range_out" id="Function_2d6d00cc" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_overlaps" id="Function_27ef9e76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overlaps(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_overlaps$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="range_overleft" id="Function_140f9d40" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overleft(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_overleft$function$
]]></string>
			<comment><![CDATA[implementation of &< operator]]></comment>
		</function>
		<function name="range_overright" id="Function_14cb5f73" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_overright(anyrange, anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_overright$function$
]]></string>
			<comment><![CDATA[implementation of &> operator]]></comment>
		</function>
		<function name="range_recv" id="Function_124a9fab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_recv(internal, oid, integer)
 RETURNS anyrange
 LANGUAGE internal
 STABLE STRICT
AS $function$range_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_send" id="Function_244d422a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_send(anyrange)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$range_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="range_typanalyze" id="Function_2bab1cff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$range_typanalyze$function$
]]></string>
			<comment><![CDATA[range typanalyze]]></comment>
		</function>
		<function name="range_union" id="Function_389d07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.range_union(anyrange, anyrange)
 RETURNS anyrange
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_union$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="rangesel" id="Function_19e89711" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rangesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$rangesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity for range operators]]></comment>
		</function>
		<function name="rank" id="Function_1e058f6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_rank$function$
]]></string>
			<comment><![CDATA[integer rank with gaps]]></comment>
		</function>
		<function name="rank_001" id="Function_2675958a" isSystem="false" >
			<comment><![CDATA[rank of hypothetical row]]></comment>
		</function>
		<function name="rank_final" id="Function_2f506642" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rank_final(internal, VARIADIC "any")
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE
AS $function$hypothetical_rank_final$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="record_eq" id="Function_2cea048e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_eq(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="record_ge" id="Function_1c1e53e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_ge(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="record_gt" id="Function_1058f60c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_gt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="record_image_eq" id="Function_255dbe8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_eq(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_eq$function$
]]></string>
			<comment><![CDATA[implementation of *= operator]]></comment>
		</function>
		<function name="record_image_ge" id="Function_19a926b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_ge(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_ge$function$
]]></string>
			<comment><![CDATA[implementation of *>= operator]]></comment>
		</function>
		<function name="record_image_gt" id="Function_80e6059" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_gt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_gt$function$
]]></string>
			<comment><![CDATA[implementation of *> operator]]></comment>
		</function>
		<function name="record_image_le" id="Function_120d9bc0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_le(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_le$function$
]]></string>
			<comment><![CDATA[implementation of *<= operator]]></comment>
		</function>
		<function name="record_image_lt" id="Function_bd93847" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_lt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_lt$function$
]]></string>
			<comment><![CDATA[implementation of *< operator]]></comment>
		</function>
		<function name="record_image_ne" id="Function_23285af4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_image_ne(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_image_ne$function$
]]></string>
			<comment><![CDATA[implementation of *<> operator]]></comment>
		</function>
		<function name="record_in" id="Function_17ce3fa7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="record_le" id="Function_17dfe2c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_le(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="record_lt" id="Function_a2dd1de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_lt(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="record_ne" id="Function_285d09f2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_ne(record, record)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$record_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="record_out" id="Function_345ea64b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="record_recv" id="Function_1503192f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_recv(internal, oid, integer)
 RETURNS record
 LANGUAGE internal
 STABLE STRICT
AS $function$record_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="record_send" id="Function_9db93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.record_send(record)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$record_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclass" id="Function_3ac5d9ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclass(text)
 RETURNS regclass
 LANGUAGE internal
 STABLE STRICT
AS $function$text_regclass$function$
]]></string>
			<comment><![CDATA[convert text to regclass]]></comment>
		</function>
		<function name="regclassin" id="Function_1e3fd378" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclassout" id="Function_29f405ef" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclassrecv" id="Function_33aae7b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclassrecv(internal)
 RETURNS regclass
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regclassrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regclasssend" id="Function_33f30809" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regclasssend(regclass)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regclasssend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigin" id="Function_37d02f66" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigout" id="Function_8f95018" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigrecv" id="Function_31027db4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigrecv(internal)
 RETURNS regconfig
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regconfigrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regconfigsend" id="Function_2eeb3eb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regconfigsend(regconfig)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regconfigsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionaryin" id="Function_35428e65" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionaryout" id="Function_22e9545" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionaryrecv" id="Function_277828b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionaryrecv(internal)
 RETURNS regdictionary
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regdictionaryrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regdictionarysend" id="Function_a348896" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regdictionarysend(regdictionary)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regdictionarysend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regexeqjoinsel" id="Function_30a606a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexeqjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexeqjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of regex match]]></comment>
		</function>
		<function name="regexeqsel" id="Function_d46dd97" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexeqsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexeqsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of regex match]]></comment>
		</function>
		<function name="regexnejoinsel" id="Function_2eb3acc0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexnejoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexnejoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of regex non-match]]></comment>
		</function>
		<function name="regexnesel" id="Function_16ddfe93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexnesel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$regexnesel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of regex non-match]]></comment>
		</function>
		<function name="regexp_matches" id="Function_29cf53cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 1
AS $function$regexp_matches_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_matches(text, text, text)
 RETURNS SETOF text[]
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 10
AS $function$regexp_matches$function$
]]></string>
			<comment><![CDATA[find all match groups for regexp]]></comment>
		</function>
		<function name="regexp_matches_001" id="Function_10c54fa1" isSystem="false" >
			<comment><![CDATA[find all match groups for regexp]]></comment>
		</function>
		<function name="regexp_replace" id="Function_1cdfa3e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexreplace_noopt$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_replace(text, text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexreplace$function$
]]></string>
			<comment><![CDATA[replace text using regexp]]></comment>
		</function>
		<function name="regexp_replace_001" id="Function_14aa6c82" isSystem="false" >
			<comment><![CDATA[replace text using regexp]]></comment>
		</function>
		<function name="regexp_split_to_array" id="Function_12710414" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_array_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_array$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regexp_split_to_array_001" id="Function_1a52b383" isSystem="false" >
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regexp_split_to_table" id="Function_c8c73b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_table_no_flags$function$
CREATE OR REPLACE FUNCTION pg_catalog.regexp_split_to_table(text, text, text)
 RETURNS SETOF text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regexp_split_to_table$function$
]]></string>
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regexp_split_to_table_001" id="Function_10a4142a" isSystem="false" >
			<comment><![CDATA[split string by pattern]]></comment>
		</function>
		<function name="regoperatorin" id="Function_2177eb17" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperatorout" id="Function_39371636" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperatorrecv" id="Function_218371af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorrecv(internal)
 RETURNS regoperator
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regoperatorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperatorsend" id="Function_3770ea07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperatorsend(regoperator)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regoperatorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperin" id="Function_d39caea" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperout" id="Function_25202e0c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regoperrecv" id="Function_3b6330b6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regoperrecv(internal)
 RETURNS regoper
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regoperrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regopersend" id="Function_f69177" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regopersend(regoper)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regopersend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocedurein" id="Function_2b0ef413" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocedureout" id="Function_35dfc034" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocedurerecv" id="Function_1afd833b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocedurerecv(internal)
 RETURNS regprocedure
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regprocedurerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regproceduresend" id="Function_8a33745" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regproceduresend(regprocedure)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regproceduresend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocin" id="Function_11ce7070" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocout" id="Function_34f2b6d3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocrecv" id="Function_70758d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocrecv(internal)
 RETURNS regproc
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regprocrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regprocsend" id="Function_15f868a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regprocsend(regproc)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regprocsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regr_avgx" id="Function_1a50efba" isSystem="false" >
			<comment><![CDATA[average of the independent variable (sum(X)/N)]]></comment>
		</function>
		<function name="regr_avgy" id="Function_1b63cc6f" isSystem="false" >
			<comment><![CDATA[average of the dependent variable (sum(Y)/N)]]></comment>
		</function>
		<function name="regr_count" id="Function_7e37314" isSystem="false" >
			<comment><![CDATA[number of input rows in which both expressions are not null]]></comment>
		</function>
		<function name="regr_intercept" id="Function_26dcaa67" isSystem="false" >
			<comment><![CDATA[y-intercept of the least-squares-fit linear equation determined by the (X, Y) pairs]]></comment>
		</function>
		<function name="regr_r2" id="Function_20a8b8b" isSystem="false" >
			<comment><![CDATA[square of the correlation coefficient]]></comment>
		</function>
		<function name="regr_slope" id="Function_1772e49b" isSystem="false" >
			<comment><![CDATA[slope of the least-squares-fit linear equation determined by the (X, Y) pairs]]></comment>
		</function>
		<function name="regr_sxx" id="Function_3b93936" isSystem="false" >
			<comment><![CDATA[sum of squares of the independent variable (sum(X^2) - sum(X)^2/N)]]></comment>
		</function>
		<function name="regr_sxy" id="Function_3966e670" isSystem="false" >
			<comment><![CDATA[sum of products of independent times dependent variable (sum(X*Y) - sum(X) * sum(Y)/N)]]></comment>
		</function>
		<function name="regr_syy" id="Function_1ad28538" isSystem="false" >
			<comment><![CDATA[sum of squares of the dependent variable (sum(Y^2) - sum(Y)^2/N)]]></comment>
		</function>
		<function name="regtypein" id="Function_389ba470" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regtypeout" id="Function_3b2a71b7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regtyperecv" id="Function_17b6aa44" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtyperecv(internal)
 RETURNS regtype
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regtyperecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="regtypesend" id="Function_1266087f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.regtypesend(regtype)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$regtypesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltime" id="Function_fe13ee0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltime(interval)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_reltime$function$
]]></string>
			<comment><![CDATA[convert interval to reltime]]></comment>
		</function>
		<function name="reltimeeq" id="Function_9fee83f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimeeq(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimeeq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="reltimege" id="Function_2bf1e124" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimege(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimege$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="reltimegt" id="Function_2152fbdc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimegt(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimegt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="reltimein" id="Function_15c26c1b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltimele" id="Function_cf81cc0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimele(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimele$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="reltimelt" id="Function_5e7bc27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimelt(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimelt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="reltimene" id="Function_292a4c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimene(reltime, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$reltimene$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="reltimeout" id="Function_331cded9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltimerecv" id="Function_7b72934" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimerecv(internal)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltimerecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="reltimesend" id="Function_357a0210" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reltimesend(reltime)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$reltimesend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="repeat" id="Function_2b2531fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.repeat(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$repeat$function$
]]></string>
			<comment><![CDATA[replicate string n times]]></comment>
		</function>
		<function name="replace" id="Function_1e3faaaf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.replace(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$replace_text$function$
]]></string>
			<comment><![CDATA[replace all occurrences in string of old_substr with new_substr]]></comment>
		</function>
		<function name="reverse" id="Function_11c29e7c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.reverse(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_reverse$function$
]]></string>
			<comment><![CDATA[reverse text]]></comment>
		</function>
		<function name="right" id="Function_8e21f7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."right"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_right$function$
]]></string>
			<comment><![CDATA[extract the last n characters]]></comment>
		</function>
		<function name="round" id="Function_12b8de25" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.round(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dround$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.round($1,0)$function$
CREATE OR REPLACE FUNCTION pg_catalog.round(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_round$function$
]]></string>
			<comment><![CDATA[round to nearest integer]]></comment>
		</function>
		<function name="round_001" id="Function_267243c5" isSystem="false" >
			<comment><![CDATA[value rounded to 'scale']]></comment>
		</function>
		<function name="round_002" id="Function_ac6a2dd" isSystem="false" >
			<comment><![CDATA[value rounded to 'scale' of zero]]></comment>
		</function>
		<function name="row_number" id="Function_10ce5c82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_number()
 RETURNS bigint
 LANGUAGE internal
 WINDOW IMMUTABLE
AS $function$window_row_number$function$
]]></string>
			<comment><![CDATA[row number within partition]]></comment>
		</function>
		<function name="row_to_json" id="Function_7d1039a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$row_to_json$function$
CREATE OR REPLACE FUNCTION pg_catalog.row_to_json(record, boolean)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$row_to_json_pretty$function$
]]></string>
			<comment><![CDATA[map row to json]]></comment>
		</function>
		<function name="row_to_json_001" id="Function_37f71ea" isSystem="false" >
			<comment><![CDATA[map row to json with optional pretty printing]]></comment>
		</function>
		<function name="rpad" id="Function_12ad9acb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.rpad($1, $2, ' ')$function$
CREATE OR REPLACE FUNCTION pg_catalog.rpad(text, integer, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rpad$function$
]]></string>
			<comment><![CDATA[right-pad string to length]]></comment>
		</function>
		<function name="rpad_001" id="Function_3a8173f7" isSystem="false" >
			<comment><![CDATA[right-pad string to length]]></comment>
		</function>
		<function name="rtrim" id="Function_24ddbbb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rtrim1$function$
CREATE OR REPLACE FUNCTION pg_catalog.rtrim(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rtrim$function$
]]></string>
			<comment><![CDATA[trim selected characters from right end of string]]></comment>
		</function>
		<function name="rtrim_001" id="Function_17a23c1c" isSystem="false" >
			<comment><![CDATA[trim spaces from right end of string]]></comment>
		</function>
		<function name="scalargtjoinsel" id="Function_2984af5e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalargtjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalargtjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of > and related operators on scalar datatypes]]></comment>
		</function>
		<function name="scalargtsel" id="Function_11bc86fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalargtsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalargtsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of > and related operators on scalar datatypes]]></comment>
		</function>
		<function name="scalarltjoinsel" id="Function_79c6fb7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalarltjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalarltjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of < and related operators on scalar datatypes]]></comment>
		</function>
		<function name="scalarltsel" id="Function_11a464ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.scalarltsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$scalarltsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of < and related operators on scalar datatypes]]></comment>
		</function>
		<function name="schema_to_xml" id="Function_33456a6b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xml(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$schema_to_xml$function$
]]></string>
			<comment><![CDATA[map schema contents to XML]]></comment>
		</function>
		<function name="schema_to_xml_and_xmlschema" id="Function_a8b0837" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xml_and_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$schema_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map schema contents and structure to XML and XML Schema]]></comment>
		</function>
		<function name="schema_to_xmlschema" id="Function_dcf9f1b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.schema_to_xmlschema(schema name, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$schema_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map schema structure to XML Schema]]></comment>
		</function>
		<function name="session_user" id="Function_19cad62e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."session_user"()
 RETURNS name
 LANGUAGE internal
 STABLE STRICT
AS $function$session_user$function$
]]></string>
			<comment><![CDATA[session user name]]></comment>
		</function>
		<function name="set_bit" id="Function_d8895de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaSetBit$function$
CREATE OR REPLACE FUNCTION pg_catalog.set_bit(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsetbit$function$
]]></string>
			<comment><![CDATA[set bit]]></comment>
		</function>
		<function name="set_bit_001" id="Function_3168b5a6" isSystem="false" >
			<comment><![CDATA[set bit]]></comment>
		</function>
		<function name="set_byte" id="Function_34b163c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_byte(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$byteaSetByte$function$
]]></string>
			<comment><![CDATA[set byte]]></comment>
		</function>
		<function name="set_config" id="Function_198a3a6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_config(text, text, boolean)
 RETURNS text
 LANGUAGE internal
AS $function$set_config_by_name$function$
]]></string>
			<comment><![CDATA[SET X as a function]]></comment>
		</function>
		<function name="set_masklen" id="Function_2cfa3d49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(cidr, integer)
 RETURNS cidr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$cidr_set_masklen$function$
CREATE OR REPLACE FUNCTION pg_catalog.set_masklen(inet, integer)
 RETURNS inet
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$inet_set_masklen$function$
]]></string>
			<comment><![CDATA[change netmask of inet]]></comment>
		</function>
		<function name="set_masklen_001" id="Function_325db29b" isSystem="false" >
			<comment><![CDATA[change netmask of cidr]]></comment>
		</function>
		<function name="setseed" id="Function_329798bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setseed(double precision)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$setseed$function$
]]></string>
			<comment><![CDATA[set random seed]]></comment>
		</function>
		<function name="setval" id="Function_5758fee" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval_oid$function$
CREATE OR REPLACE FUNCTION pg_catalog.setval(regclass, bigint, boolean)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$setval3_oid$function$
]]></string>
			<comment><![CDATA[set sequence value]]></comment>
		</function>
		<function name="setval_001" id="Function_ccfcad4" isSystem="false" >
			<comment><![CDATA[set sequence value and is_called status]]></comment>
		</function>
		<function name="setweight" id="Function_2f234756" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.setweight(tsvector, "char")
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_setweight$function$
]]></string>
			<comment><![CDATA[set weight of lexeme's entries]]></comment>
		</function>
		<function name="shell_in" id="Function_126715d0" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="shell_out" id="Function_2e406a2c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="shift_jis_2004_to_euc_jis_2004" id="Function_35029f9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shift_jis_2004_to_euc_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc2004_sjis2004', $function$shift_jis_2004_to_euc_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for SHIFT_JIS_2004 to EUC_JIS_2004]]></comment>
		</function>
		<function name="shift_jis_2004_to_utf8" id="Function_4447dba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shift_jis_2004_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis2004', $function$shift_jis_2004_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SHIFT_JIS_2004 to UTF8]]></comment>
		</function>
		<function name="shobj_description" id="Function_38b2ac93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.shobj_description(oid, name)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$select description from pg_catalog.pg_shdescription where objoid = $1 and classoid = (select oid from pg_catalog.pg_class where relname = $2 and relnamespace = 11)$function$
]]></string>
			<comment><![CDATA[get description for object id and shared catalog name]]></comment>
		</function>
		<function name="sign" id="Function_2c1e60eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sign(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsign$function$
CREATE OR REPLACE FUNCTION pg_catalog.sign(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sign$function$
]]></string>
			<comment><![CDATA[sign of value]]></comment>
		</function>
		<function name="sign_001" id="Function_35999880" isSystem="false" >
			<comment><![CDATA[sign of value]]></comment>
		</function>
		<function name="similar_escape" id="Function_d907e06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.similar_escape(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE
AS $function$similar_escape$function$
]]></string>
			<comment><![CDATA[convert SQL99 regexp pattern to POSIX style]]></comment>
		</function>
		<function name="sin" id="Function_af9b130" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sin(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsin$function$
]]></string>
			<comment><![CDATA[sine]]></comment>
		</function>
		<function name="sjis_to_euc_jp" id="Function_fb21cae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$sjis_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to EUC_JP]]></comment>
		</function>
		<function name="sjis_to_mic" id="Function_340fe5a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/euc_jp_and_sjis', $function$sjis_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to MULE_INTERNAL]]></comment>
		</function>
		<function name="sjis_to_utf8" id="Function_1b8485fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sjis_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis', $function$sjis_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for SJIS to UTF8]]></comment>
		</function>
		<function name="slope" id="Function_232b41b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.slope(point, point)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$point_slope$function$
]]></string>
			<comment><![CDATA[slope between points]]></comment>
		</function>
		<function name="smgreq" id="Function_3791a7cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgreq(smgr, smgr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$smgreq$function$
]]></string>
			<comment><![CDATA[storage manager]]></comment>
		</function>
		<function name="smgrin" id="Function_98e8d1a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="smgrne" id="Function_7430765" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.smgrne(smgr, smgr)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$smgrne$function$
]]></string>
			<comment><![CDATA[storage manager]]></comment>
		</function>
		<function name="smgrout" id="Function_13ce380d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="spg_kd_choose" id="Function_38cfb669" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_kd_config" id="Function_13de3725" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_kd_inner_consistent" id="Function_3efac28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_kd_picksplit" id="Function_1f680b34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_kd_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_kd_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for k-d tree over point]]></comment>
		</function>
		<function name="spg_quad_choose" id="Function_2153d1c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_quad_config" id="Function_12753e23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_quad_inner_consistent" id="Function_133bcf68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_quad_leaf_consistent" id="Function_34c35ea6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree and k-d tree over point]]></comment>
		</function>
		<function name="spg_quad_picksplit" id="Function_231bc328" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_quad_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_quad_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over point]]></comment>
		</function>
		<function name="spg_range_quad_choose" id="Function_493c83" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_config" id="Function_d76b6c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_inner_consistent" id="Function_371efc6e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_leaf_consistent" id="Function_56dcda4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_range_quad_picksplit" id="Function_4ae86b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_range_quad_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_range_quad_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for quad tree over range]]></comment>
		</function>
		<function name="spg_text_choose" id="Function_f137692" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_choose(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_choose$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_config" id="Function_220cf0f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_config(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_config$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_inner_consistent" id="Function_16340566" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_inner_consistent(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_inner_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_leaf_consistent" id="Function_3b4580a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_leaf_consistent(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_leaf_consistent$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spg_text_picksplit" id="Function_72e2caa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spg_text_picksplit(internal, internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$spg_text_picksplit$function$
]]></string>
			<comment><![CDATA[SP-GiST support for radix tree over text]]></comment>
		</function>
		<function name="spgbeginscan" id="Function_1bb9c2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbeginscan(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgbeginscan$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgbuild" id="Function_f5d0b71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbuild(internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgbuild$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgbuildempty" id="Function_127058a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbuildempty(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgbuildempty$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgbulkdelete" id="Function_123cee95" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgbulkdelete(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgbulkdelete$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgcanreturn" id="Function_16f8eb84" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgcanreturn(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$spgcanreturn$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgcostestimate" id="Function_1a94bd62" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgcostestimate(internal, internal, internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgcostestimate$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgendscan" id="Function_32054bec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgendscan(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgendscan$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spggetbitmap" id="Function_32bb481" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spggetbitmap(internal, internal)
 RETURNS bigint
 LANGUAGE internal
 STRICT
AS $function$spggetbitmap$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spggettuple" id="Function_1faa41f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spggettuple(internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$spggettuple$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spginsert" id="Function_2d90f95f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spginsert(internal, internal, internal, internal, internal, internal)
 RETURNS boolean
 LANGUAGE internal
 STRICT
AS $function$spginsert$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgmarkpos" id="Function_62be38d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgmarkpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgmarkpos$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgoptions" id="Function_581e080" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgoptions(text[], boolean)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$spgoptions$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgrescan" id="Function_259fe158" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgrescan(internal, internal, internal, internal, internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgrescan$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgrestrpos" id="Function_2ff06bda" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgrestrpos(internal)
 RETURNS void
 LANGUAGE internal
 STRICT
AS $function$spgrestrpos$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="spgvacuumcleanup" id="Function_e884678" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.spgvacuumcleanup(internal, internal)
 RETURNS internal
 LANGUAGE internal
 STRICT
AS $function$spgvacuumcleanup$function$
]]></string>
			<comment><![CDATA[spgist(internal)]]></comment>
		</function>
		<function name="split_part" id="Function_2d5edbe7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.split_part(text, text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$split_text$function$
]]></string>
			<comment><![CDATA[split string by field_sep and return field_num]]></comment>
		</function>
		<function name="sqrt" id="Function_212206c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.sqrt(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dsqrt$function$
CREATE OR REPLACE FUNCTION pg_catalog.sqrt(numeric)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_sqrt$function$
]]></string>
			<comment><![CDATA[square root]]></comment>
		</function>
		<function name="sqrt_001" id="Function_3531c521" isSystem="false" >
			<comment><![CDATA[square root]]></comment>
		</function>
		<function name="statement_timestamp" id="Function_19a21566" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.statement_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$statement_timestamp$function$
]]></string>
			<comment><![CDATA[current statement time]]></comment>
		</function>
		<function name="stddev" id="Function_3866dda9" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_001" id="Function_17e70fa5" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_002" id="Function_243f5028" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_003" id="Function_252d0ce3" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_004" id="Function_10e5e5bd" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_005" id="Function_1b947dea" isSystem="false" >
			<comment><![CDATA[historical alias for stddev_samp]]></comment>
		</function>
		<function name="stddev_pop" id="Function_4cced75" isSystem="false" >
			<comment><![CDATA[population standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_pop_001" id="Function_1ab6ed34" isSystem="false" >
			<comment><![CDATA[population standard deviation of integer input values]]></comment>
		</function>
		<function name="stddev_pop_002" id="Function_14f44b4b" isSystem="false" >
			<comment><![CDATA[population standard deviation of smallint input values]]></comment>
		</function>
		<function name="stddev_pop_003" id="Function_304ae3ce" isSystem="false" >
			<comment><![CDATA[population standard deviation of float4 input values]]></comment>
		</function>
		<function name="stddev_pop_004" id="Function_7374063" isSystem="false" >
			<comment><![CDATA[population standard deviation of float8 input values]]></comment>
		</function>
		<function name="stddev_pop_005" id="Function_31b0af8b" isSystem="false" >
			<comment><![CDATA[population standard deviation of numeric input values]]></comment>
		</function>
		<function name="stddev_samp" id="Function_a51d602" isSystem="false" >
			<comment><![CDATA[sample standard deviation of bigint input values]]></comment>
		</function>
		<function name="stddev_samp_001" id="Function_35f4d175" isSystem="false" >
			<comment><![CDATA[sample standard deviation of integer input values]]></comment>
		</function>
		<function name="stddev_samp_002" id="Function_31d605d6" isSystem="false" >
			<comment><![CDATA[sample standard deviation of smallint input values]]></comment>
		</function>
		<function name="stddev_samp_003" id="Function_2e8e0c1" isSystem="false" >
			<comment><![CDATA[sample standard deviation of float4 input values]]></comment>
		</function>
		<function name="stddev_samp_004" id="Function_bd67a37" isSystem="false" >
			<comment><![CDATA[sample standard deviation of float8 input values]]></comment>
		</function>
		<function name="stddev_samp_005" id="Function_20f327ca" isSystem="false" >
			<comment><![CDATA[sample standard deviation of numeric input values]]></comment>
		</function>
		<function name="string_agg" id="Function_2c5212be" isSystem="false" >
			<comment><![CDATA[concatenate aggregate input into a string]]></comment>
		</function>
		<function name="string_agg_001" id="Function_2a53f918" isSystem="false" >
			<comment><![CDATA[concatenate aggregate input into a bytea]]></comment>
		</function>
		<function name="string_agg_finalfn" id="Function_53f9ac1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_agg_finalfn(internal)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE
AS $function$string_agg_finalfn$function$
]]></string>
			<comment><![CDATA[aggregate final function]]></comment>
		</function>
		<function name="string_agg_transfn" id="Function_31e295f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_agg_transfn(internal, text, text)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE
AS $function$string_agg_transfn$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="string_to_array" id="Function_222425ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE
AS $function$text_to_array$function$
CREATE OR REPLACE FUNCTION pg_catalog.string_to_array(text, text, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE
AS $function$text_to_array_null$function$
]]></string>
			<comment><![CDATA[split delimited text into text[], with null string]]></comment>
		</function>
		<function name="string_to_array_001" id="Function_15eaed4c" isSystem="false" >
			<comment><![CDATA[split delimited text into text[]]]></comment>
		</function>
		<function name="strip" id="Function_1d7d436" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.strip(tsvector)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_strip$function$
]]></string>
			<comment><![CDATA[strip position information]]></comment>
		</function>
		<function name="strpos" id="Function_2366d3b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.strpos(text, text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textpos$function$
]]></string>
			<comment><![CDATA[position of substring]]></comment>
		</function>
		<function name="substr" id="Function_33a5165e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog.substr(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_substr$function$
]]></string>
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substr_001" id="Function_12481276" isSystem="false" >
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substr_002" id="Function_2c27439" isSystem="false" >
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substr_003" id="Function_184036f1" isSystem="false" >
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substring" id="Function_d458403" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bit, integer)
 RETURNS bit
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitsubstr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(bytea, integer)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bytea_substr_no_len$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexsubstr$function$
CREATE OR REPLACE FUNCTION pg_catalog."substring"(text, text, text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.substring($1, pg_catalog.similar_escape($2, $3))$function$
]]></string>
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_001" id="Function_10675bcd" isSystem="false" >
			<comment><![CDATA[extract portion of bitstring]]></comment>
		</function>
		<function name="substring_002" id="Function_294555e2" isSystem="false" >
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substring_003" id="Function_3f2989a" isSystem="false" >
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substring_004" id="Function_1ec4a24e" isSystem="false" >
			<comment><![CDATA[extract text matching regular expression]]></comment>
		</function>
		<function name="substring_005" id="Function_38b231d7" isSystem="false" >
			<comment><![CDATA[extract text matching SQL99 regular expression]]></comment>
		</function>
		<function name="substring_006" id="Function_34798c4e" isSystem="false" >
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="substring_007" id="Function_37c74c4a" isSystem="false" >
			<comment><![CDATA[extract portion of string]]></comment>
		</function>
		<function name="sum" id="Function_2af27c1c" isSystem="false" >
			<comment><![CDATA[sum as numeric across all bigint input values]]></comment>
		</function>
		<function name="sum_001" id="Function_5b4318c" isSystem="false" >
			<comment><![CDATA[sum as bigint across all integer input values]]></comment>
		</function>
		<function name="sum_002" id="Function_219860c" isSystem="false" >
			<comment><![CDATA[sum as bigint across all smallint input values]]></comment>
		</function>
		<function name="sum_003" id="Function_28e587a4" isSystem="false" >
			<comment><![CDATA[sum as float4 across all float4 input values]]></comment>
		</function>
		<function name="sum_004" id="Function_e75ae4" isSystem="false" >
			<comment><![CDATA[sum as float8 across all float8 input values]]></comment>
		</function>
		<function name="sum_005" id="Function_1e05ad84" isSystem="false" >
			<comment><![CDATA[sum as money across all money input values]]></comment>
		</function>
		<function name="sum_006" id="Function_284ceaca" isSystem="false" >
			<comment><![CDATA[sum as interval across all interval input values]]></comment>
		</function>
		<function name="sum_007" id="Function_18b49719" isSystem="false" >
			<comment><![CDATA[sum as numeric across all numeric input values]]></comment>
		</function>
		<function name="suppress_redundant_updates_trigger" id="Function_2a350e36" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.suppress_redundant_updates_trigger()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$suppress_redundant_updates_trigger$function$
]]></string>
			<comment><![CDATA[trigger to suppress updates when new and old records match]]></comment>
		</function>
		<function name="table_to_xml" id="Function_3a60d27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xml(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$table_to_xml$function$
]]></string>
			<comment><![CDATA[map table contents to XML]]></comment>
		</function>
		<function name="table_to_xml_and_xmlschema" id="Function_23aacab3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xml_and_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$table_to_xml_and_xmlschema$function$
]]></string>
			<comment><![CDATA[map table contents and structure to XML and XML Schema]]></comment>
		</function>
		<function name="table_to_xmlschema" id="Function_f4eba81" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.table_to_xmlschema(tbl regclass, nulls boolean, tableforest boolean, targetns text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT COST 100
AS $function$table_to_xmlschema$function$
]]></string>
			<comment><![CDATA[map table structure to XML Schema]]></comment>
		</function>
		<function name="tan" id="Function_7b0de4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tan(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtan$function$
]]></string>
			<comment><![CDATA[tangent]]></comment>
		</function>
		<function name="text" id="Function_1a783345" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text(boolean)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$booltext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text("char")
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$char_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(xml)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmltotext$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(inet)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$network_show$function$
CREATE OR REPLACE FUNCTION pg_catalog.text(character)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$rtrim1$function$
]]></string>
			<comment><![CDATA[serialize an XML value to a character string]]></comment>
		</function>
		<function name="text_001" id="Function_dc6769b" isSystem="false" >
			<comment><![CDATA[convert boolean to text]]></comment>
		</function>
		<function name="text_002" id="Function_cd383ae" isSystem="false" >
			<comment><![CDATA[convert char(n) to text]]></comment>
		</function>
		<function name="text_003" id="Function_34f858a" isSystem="false" >
			<comment><![CDATA[convert name to text]]></comment>
		</function>
		<function name="text_004" id="Function_f11dc72" isSystem="false" >
			<comment><![CDATA[show all parts of inet/cidr value]]></comment>
		</function>
		<function name="text_005" id="Function_18e0039f" isSystem="false" >
			<comment><![CDATA[convert char to text]]></comment>
		</function>
		<function name="text_ge" id="Function_4684bc3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_ge(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="text_gt" id="Function_194b8a43" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_gt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="text_larger" id="Function_27d5783b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_larger(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="text_le" id="Function_30bec023" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_le(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="text_lt" id="Function_391dbfad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_lt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="text_pattern_ge" id="Function_2dc95d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_ge(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_ge$function$
]]></string>
			<comment><![CDATA[implementation of ~>=~ operator]]></comment>
		</function>
		<function name="text_pattern_gt" id="Function_203737f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_gt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_gt$function$
]]></string>
			<comment><![CDATA[implementation of ~>~ operator]]></comment>
		</function>
		<function name="text_pattern_le" id="Function_1651f1ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_le(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_le$function$
]]></string>
			<comment><![CDATA[implementation of ~<=~ operator]]></comment>
		</function>
		<function name="text_pattern_lt" id="Function_11ec62f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_pattern_lt(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_pattern_lt$function$
]]></string>
			<comment><![CDATA[implementation of ~<~ operator]]></comment>
		</function>
		<function name="text_smaller" id="Function_303613aa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.text_smaller(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$text_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="textanycat" id="Function_74386d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textanycat(text, anynonarray)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select $1 || $2::pg_catalog.text$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="textcat" id="Function_2ee424d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textcat(text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textcat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="texteq" id="Function_2b33ca8b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texteq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$texteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="texticlike" id="Function_13fb0e14" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~* operator]]></comment>
		</function>
		<function name="texticnlike" id="Function_d9baf25" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticnlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~* operator]]></comment>
		</function>
		<function name="texticregexeq" id="Function_2cc4835d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticregexeq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~* operator]]></comment>
		</function>
		<function name="texticregexne" id="Function_2577b788" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.texticregexne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$texticregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~* operator]]></comment>
		</function>
		<function name="textin" id="Function_1c69a933" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="textlen" id="Function_26bcf605" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textlen(text)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlen$function$
]]></string>
			<comment><![CDATA[length]]></comment>
		</function>
		<function name="textlike" id="Function_2f59f011" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textlike$function$
]]></string>
			<comment><![CDATA[implementation of ~~ operator]]></comment>
		</function>
		<function name="textne" id="Function_368f8a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$textne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="textnlike" id="Function_3b143ff5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textnlike(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textnlike$function$
]]></string>
			<comment><![CDATA[implementation of !~~ operator]]></comment>
		</function>
		<function name="textout" id="Function_20c8d313" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="textrecv" id="Function_35142609" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textrecv(internal)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$textrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="textregexeq" id="Function_2f1b7c5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textregexeq(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexeq$function$
]]></string>
			<comment><![CDATA[implementation of ~ operator]]></comment>
		</function>
		<function name="textregexne" id="Function_2ba5880d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textregexne(text, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$textregexne$function$
]]></string>
			<comment><![CDATA[implementation of !~ operator]]></comment>
		</function>
		<function name="textsend" id="Function_294653c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.textsend(text)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$textsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="thesaurus_init" id="Function_29407f04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.thesaurus_init(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$thesaurus_init$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="thesaurus_lexize" id="Function_1a21e410" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.thesaurus_lexize(internal, internal, internal, internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$thesaurus_lexize$function$
]]></string>
			<comment><![CDATA[(internal)]]></comment>
		</function>
		<function name="tideq" id="Function_10d0bbb8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tideq(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tidge" id="Function_2045bbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidge(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tidgt" id="Function_7ed5a05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidgt(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tidin" id="Function_2c2d46fc" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidlarger" id="Function_18b164a7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidlarger(tid, tid)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidlarger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="tidle" id="Function_29f463a7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidle(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tidlt" id="Function_156704eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidlt(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tidne" id="Function_b726122" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidne(tid, tid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tidne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tidout" id="Function_3b030d0a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidrecv" id="Function_1c51df49" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidrecv(internal)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidsend" id="Function_19c0fdbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidsend(tid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tidsmaller" id="Function_224a3bbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tidsmaller(tid, tid)
 RETURNS tid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tidsmaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="time" id="Function_353cd877" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."time"(abstime)
 RETURNS time without time zone
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select cast(cast($1 as timestamp without time zone) as pg_catalog.time)$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(timestamp with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$interval_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time with time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_time$function$
CREATE OR REPLACE FUNCTION pg_catalog."time"(time without time zone, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_scale$function$
]]></string>
			<comment><![CDATA[convert timestamp to time]]></comment>
		</function>
		<function name="time_001" id="Function_195a5ad2" isSystem="false" >
			<comment><![CDATA[convert abstime to time]]></comment>
		</function>
		<function name="time_002" id="Function_106d1c8" isSystem="false" >
			<comment><![CDATA[convert interval to time]]></comment>
		</function>
		<function name="time_003" id="Function_3b3fd960" isSystem="false" >
			<comment><![CDATA[adjust time precision]]></comment>
		</function>
		<function name="time_004" id="Function_173cdc74" isSystem="false" >
			<comment><![CDATA[convert timestamp with time zone to time]]></comment>
		</function>
		<function name="time_005" id="Function_7c507a8" isSystem="false" >
			<comment><![CDATA[convert time with time zone to time]]></comment>
		</function>
		<function name="time_cmp" id="Function_12a7d808" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_cmp(time without time zone, time without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="time_eq" id="Function_1d6977b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_eq(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="time_ge" id="Function_33898169" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_ge(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="time_gt" id="Function_1737392b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_gt(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="time_hash" id="Function_3054a60c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_hash(time without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="time_in" id="Function_1a19a550" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_larger" id="Function_d8baed4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_larger(time without time zone, time without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="time_le" id="Function_ae50373" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_le(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="time_lt" id="Function_4f23ca0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_lt(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="time_mi_interval" id="Function_17259ad4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_mi_interval(time without time zone, interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="time_mi_time" id="Function_1888fc1a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_mi_time(time without time zone, time without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_mi_time$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="time_ne" id="Function_110848dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_ne(time without time zone, time without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$time_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="time_out" id="Function_28fa90b7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_pl_interval" id="Function_14864db5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_pl_interval(time without time zone, interval)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="time_recv" id="Function_119d9107" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_recv(internal, oid, integer)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_send" id="Function_2b5a2da3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_send(time without time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="time_smaller" id="Function_1b0d655a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_smaller(time without time zone, time without time zone)
 RETURNS time without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="time_transform" id="Function_33819ba2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.time_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$time_transform$function$
]]></string>
			<comment><![CDATA[transform a time length coercion]]></comment>
		</function>
		<function name="timedate_pl" id="Function_36fbdf9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timedate_pl(time without time zone, date)
 RETURNS timestamp without time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select ($2 + $1)$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timemi" id="Function_3e9c141" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timemi(abstime, reltime)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timemi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timenow" id="Function_338b52af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timenow()
 RETURNS abstime
 LANGUAGE internal
 STABLE STRICT
AS $function$timenow$function$
]]></string>
			<comment><![CDATA[current date and time (abstime)]]></comment>
		</function>
		<function name="timeofday" id="Function_2d23f67f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timeofday()
 RETURNS text
 LANGUAGE internal
 STRICT
AS $function$timeofday$function$
]]></string>
			<comment><![CDATA[current date and time - increments during transactions]]></comment>
		</function>
		<function name="timepl" id="Function_1b56d8dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timepl(abstime, reltime)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timepl$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timestamp" id="Function_1098952f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(abstime)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$abstime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$date_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(date, time without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datetime_timestamp$function$
CREATE OR REPLACE FUNCTION pg_catalog."timestamp"(timestamp without time zone, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_scale$function$
]]></string>
			<comment><![CDATA[adjust timestamp precision]]></comment>
		</function>
		<function name="timestamp_001" id="Function_3ad1b535" isSystem="false" >
			<comment><![CDATA[convert abstime to timestamp]]></comment>
		</function>
		<function name="timestamp_002" id="Function_2d1839c2" isSystem="false" >
			<comment><![CDATA[convert date to timestamp]]></comment>
		</function>
		<function name="timestamp_003" id="Function_2ebc4fe4" isSystem="false" >
			<comment><![CDATA[convert date and time to timestamp]]></comment>
		</function>
		<function name="timestamp_004" id="Function_36a42394" isSystem="false" >
			<comment><![CDATA[convert timestamp with time zone to timestamp]]></comment>
		</function>
		<function name="timestamp_cmp" id="Function_18ecf6eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp(timestamp without time zone, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamp_cmp_date" id="Function_30b7248c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp_date(timestamp without time zone, date)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_cmp_date$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamp_cmp_timestamptz" id="Function_d046692" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_cmp_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_cmp_timestamptz$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamp_eq" id="Function_34479ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamp_eq_date" id="Function_12de16f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_eq_date$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamp_eq_timestamptz" id="Function_1c032316" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_eq_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_eq_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamp_ge" id="Function_df26ee2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamp_ge_date" id="Function_1cdb3b8e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_ge_date$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamp_ge_timestamptz" id="Function_2e39b9db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ge_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_ge_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamp_gt" id="Function_38d67777" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamp_gt_date" id="Function_a4e6325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_gt_date$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamp_gt_timestamptz" id="Function_207d7de5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_gt_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_gt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamp_hash" id="Function_3ada0870" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_hash(timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="timestamp_in" id="Function_2995c9ac" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_larger" id="Function_2248112f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_larger(timestamp without time zone, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="timestamp_le" id="Function_39bd5183" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamp_le_date" id="Function_917e9dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_le_date$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamp_le_timestamptz" id="Function_52dd5eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_le_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_le_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamp_lt" id="Function_39850924" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamp_lt_date" id="Function_671565f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_lt_date$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamp_lt_timestamptz" id="Function_1180c86c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_lt_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_lt_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamp_mi" id="Function_1465a85c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_mi(timestamp without time zone, timestamp without time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamp_mi_interval" id="Function_2c6914ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_mi_interval(timestamp without time zone, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamp_ne" id="Function_3a71ed04" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne(timestamp without time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamp_ne_date" id="Function_cd53f16" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne_date(timestamp without time zone, date)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_ne_date$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamp_ne_timestamptz" id="Function_2eb73c34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_ne_timestamptz(timestamp without time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_ne_timestamptz$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamp_out" id="Function_21cdaf70" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_pl_interval" id="Function_24778a4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_pl_interval(timestamp without time zone, interval)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timestamp_recv" id="Function_8d0bfb6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_recv(internal, oid, integer)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_send" id="Function_29d0c247" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_send(timestamp without time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamp_smaller" id="Function_303aa25" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_smaller(timestamp without time zone, timestamp without time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="timestamp_sortsupport" id="Function_107ffe71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_sortsupport(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_sortsupport$function$
]]></string>
			<comment><![CDATA[sort support]]></comment>
		</function>
		<function name="timestamp_transform" id="Function_1e0dc896" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamp_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_transform$function$
]]></string>
			<comment><![CDATA[transform a timestamp length coercion]]></comment>
		</function>
		<function name="timestamptypmodin" id="Function_2104739d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timestamptypmodout" id="Function_e15a1" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timestamptz" id="Function_15c0c2a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(abstime)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$abstime_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$date_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time without time zone)
 RETURNS timestamp with time zone
 LANGUAGE sql
 STABLE STRICT COST 1
AS $function$select cast(($1 + $2) as timestamp with time zone)$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(date, time with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$datetimetz_timestamptz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timestamptz(timestamp with time zone, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_scale$function$
]]></string>
			<comment><![CDATA[convert abstime to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_001" id="Function_1649039" isSystem="false" >
			<comment><![CDATA[convert date to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_002" id="Function_e31b7a9" isSystem="false" >
			<comment><![CDATA[convert date and time to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_003" id="Function_1486ad36" isSystem="false" >
			<comment><![CDATA[convert date and time with time zone to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_004" id="Function_2d79abef" isSystem="false" >
			<comment><![CDATA[adjust timestamptz precision]]></comment>
		</function>
		<function name="timestamptz_005" id="Function_1827f39e" isSystem="false" >
			<comment><![CDATA[convert timestamp to timestamp with time zone]]></comment>
		</function>
		<function name="timestamptz_cmp" id="Function_2ba7795d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp(timestamp with time zone, timestamp with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamptz_cmp_date" id="Function_32075aa1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp_date(timestamp with time zone, date)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_cmp_date$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamptz_cmp_timestamp" id="Function_325b30ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_cmp_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS integer
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_cmp_timestamp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timestamptz_eq" id="Function_26b55256" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamptz_eq_date" id="Function_1d9be4ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_eq_date$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamptz_eq_timestamp" id="Function_f0295b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_eq_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_eq_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timestamptz_ge" id="Function_16fef2ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamptz_ge_date" id="Function_29e7cf0c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ge_date$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamptz_ge_timestamp" id="Function_25fb925a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ge_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ge_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timestamptz_gt" id="Function_5460faf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamptz_gt_date" id="Function_3a287022" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_gt_date$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamptz_gt_timestamp" id="Function_298b78c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_gt_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_gt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timestamptz_in" id="Function_3ae0c35e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_larger" id="Function_a220845" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_larger(timestamp with time zone, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="timestamptz_le" id="Function_2f91ef7a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamptz_le_date" id="Function_12bcc1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_le_date$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamptz_le_timestamp" id="Function_3853e9e7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_le_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_le_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timestamptz_lt" id="Function_11b50930" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamptz_lt_date" id="Function_394dd6a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_lt_date$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamptz_lt_timestamp" id="Function_21d7af94" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_lt_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_lt_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timestamptz_mi" id="Function_61b3ff2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_mi(timestamp with time zone, timestamp with time zone)
 RETURNS interval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_mi$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamptz_mi_interval" id="Function_b69dea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_mi_interval(timestamp with time zone, interval)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timestamptz_ne" id="Function_36fdacd7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne(timestamp with time zone, timestamp with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timestamp_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamptz_ne_date" id="Function_20807211" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne_date(timestamp with time zone, date)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ne_date$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamptz_ne_timestamp" id="Function_1c4bbb1d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_ne_timestamp(timestamp with time zone, timestamp without time zone)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_ne_timestamp$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timestamptz_out" id="Function_3b163583" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_pl_interval" id="Function_372fb057" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_pl_interval(timestamp with time zone, interval)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timestamptz_recv" id="Function_3870a1f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_recv(internal, oid, integer)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_send" id="Function_16676956" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_send(timestamp with time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timestamptz_smaller" id="Function_36c60441" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptz_smaller(timestamp with time zone, timestamp with time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="timestamptztypmodin" id="Function_2f6809cc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timestamptztypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptztypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timestamptztypmodout" id="Function_de2e106" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetypmodin" id="Function_30fe64bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetypmodout" id="Function_2ea32d25" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetz" id="Function_33a11d9b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz(time without time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$time_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(timestamp with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_timetz$function$
CREATE OR REPLACE FUNCTION pg_catalog.timetz(time with time zone, integer)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_scale$function$
]]></string>
			<comment><![CDATA[convert timestamp with time zone to time with time zone]]></comment>
		</function>
		<function name="timetz_001" id="Function_1c5e830" isSystem="false" >
			<comment><![CDATA[adjust time with time zone precision]]></comment>
		</function>
		<function name="timetz_002" id="Function_27a6f2b4" isSystem="false" >
			<comment><![CDATA[convert time to time with time zone]]></comment>
		</function>
		<function name="timetz_cmp" id="Function_189cf2bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_cmp(time with time zone, time with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="timetz_eq" id="Function_12de7521" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_eq(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="timetz_ge" id="Function_328126f1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_ge(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="timetz_gt" id="Function_1fe06f72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_gt(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="timetz_hash" id="Function_2c6919e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_hash(time with time zone)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="timetz_in" id="Function_2802b43a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_larger" id="Function_22ba953e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_larger(time with time zone, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_larger$function$
]]></string>
			<comment><![CDATA[larger of two]]></comment>
		</function>
		<function name="timetz_le" id="Function_37ed676" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_le(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="timetz_lt" id="Function_2a77ce7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_lt(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="timetz_mi_interval" id="Function_2efc0db1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_mi_interval(time with time zone, interval)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_mi_interval$function$
]]></string>
			<comment><![CDATA[implementation of - operator]]></comment>
		</function>
		<function name="timetz_ne" id="Function_2f8b6395" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_ne(time with time zone, time with time zone)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$timetz_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="timetz_out" id="Function_2e08cfcd" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_pl_interval" id="Function_3675115f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_pl_interval(time with time zone, interval)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_pl_interval$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timetz_recv" id="Function_c8b7d75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_recv(internal, oid, integer)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_send" id="Function_ec692df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_send(time with time zone)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="timetz_smaller" id="Function_22a720a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetz_smaller(time with time zone, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_smaller$function$
]]></string>
			<comment><![CDATA[smaller of two]]></comment>
		</function>
		<function name="timetzdate_pl" id="Function_afc15ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetzdate_pl(time with time zone, date)
 RETURNS timestamp with time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select ($2 + $1)$function$
]]></string>
			<comment><![CDATA[implementation of + operator]]></comment>
		</function>
		<function name="timetztypmodin" id="Function_15e701d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timetztypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetztypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timetztypmodout" id="Function_35db6819" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="timezone" id="Function_2605a99a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(text, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 STRICT
AS $function$timetz_zone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp without time zone)
 RETURNS timestamp with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamp_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, timestamp with time zone)
 RETURNS timestamp without time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timestamptz_izone$function$
CREATE OR REPLACE FUNCTION pg_catalog.timezone(interval, time with time zone)
 RETURNS time with time zone
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$timetz_izone$function$
]]></string>
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_001" id="Function_3b49ad92" isSystem="false" >
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_002" id="Function_2c796920" isSystem="false" >
			<comment><![CDATA[adjust time with time zone to new zone]]></comment>
		</function>
		<function name="timezone_003" id="Function_2ce19aa2" isSystem="false" >
			<comment><![CDATA[adjust time with time zone to new zone]]></comment>
		</function>
		<function name="timezone_004" id="Function_f7bf10" isSystem="false" >
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="timezone_005" id="Function_92149eb" isSystem="false" >
			<comment><![CDATA[adjust timestamp to new time zone]]></comment>
		</function>
		<function name="tinterval" id="Function_30823df4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tinterval(abstime, abstime)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$mktinterval$function$
]]></string>
			<comment><![CDATA[convert to tinterval]]></comment>
		</function>
		<function name="tintervalct" id="Function_6bd508" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalct(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalct$function$
]]></string>
			<comment><![CDATA[implementation of << operator]]></comment>
		</function>
		<function name="tintervalend" id="Function_256e1aed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalend(tinterval)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalend$function$
]]></string>
			<comment><![CDATA[end of interval]]></comment>
		</function>
		<function name="tintervaleq" id="Function_2650c279" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervaleq(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervaleq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tintervalge" id="Function_a5be4de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalge(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tintervalgt" id="Function_37b3437f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalgt(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tintervalin" id="Function_1812bf15" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalle" id="Function_20623275" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalle(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tintervalleneq" id="Function_997404b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalleneq(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalleneq$function$
]]></string>
			<comment><![CDATA[implementation of #= operator]]></comment>
		</function>
		<function name="tintervallenge" id="Function_1ab5e17e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenge(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenge$function$
]]></string>
			<comment><![CDATA[implementation of #>= operator]]></comment>
		</function>
		<function name="tintervallengt" id="Function_34f0090b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallengt(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallengt$function$
]]></string>
			<comment><![CDATA[implementation of #> operator]]></comment>
		</function>
		<function name="tintervallenle" id="Function_35837d21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenle(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenle$function$
]]></string>
			<comment><![CDATA[implementation of #<= operator]]></comment>
		</function>
		<function name="tintervallenlt" id="Function_324a7df5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenlt(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenlt$function$
]]></string>
			<comment><![CDATA[implementation of #< operator]]></comment>
		</function>
		<function name="tintervallenne" id="Function_2be73f26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallenne(tinterval, reltime)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallenne$function$
]]></string>
			<comment><![CDATA[implementation of #<> operator]]></comment>
		</function>
		<function name="tintervallt" id="Function_2614d9c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervallt(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervallt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tintervalne" id="Function_45b2cbf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalne(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$tintervalne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tintervalout" id="Function_b4934eb" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalov" id="Function_290cc8ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalov(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalov$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="tintervalrecv" id="Function_cfc9938" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalrecv(internal)
 RETURNS tinterval
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalrel" id="Function_25939adf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalrel(tinterval)
 RETURNS reltime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalrel$function$
]]></string>
			<comment><![CDATA[tinterval to reltime]]></comment>
		</function>
		<function name="tintervalsame" id="Function_39ba4686" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalsame(tinterval, tinterval)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalsame$function$
]]></string>
			<comment><![CDATA[implementation of ~= operator]]></comment>
		</function>
		<function name="tintervalsend" id="Function_236ba18d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalsend(tinterval)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tintervalstart" id="Function_2173595" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tintervalstart(tinterval)
 RETURNS abstime
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tintervalstart$function$
]]></string>
			<comment><![CDATA[implementation of | operator]]></comment>
		</function>
		<function name="to_ascii" id="Function_3a344b02" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_ascii_default$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, name)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_ascii_encname$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_ascii(text, integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_ascii_enc$function$
]]></string>
			<comment><![CDATA[encode text from DB encoding to ASCII text]]></comment>
		</function>
		<function name="to_ascii_001" id="Function_31923576" isSystem="false" >
			<comment><![CDATA[encode text from encoding to ASCII text]]></comment>
		</function>
		<function name="to_ascii_002" id="Function_24fa6dac" isSystem="false" >
			<comment><![CDATA[encode text from encoding to ASCII text]]></comment>
		</function>
		<function name="to_char" id="Function_e71dc9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp with time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamptz_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(numeric, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$numeric_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(integer, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$int4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(bigint, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$int8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(real, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$float4_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(double precision, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$float8_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(interval, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$interval_to_char$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_char(timestamp without time zone, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$timestamp_to_char$function$
]]></string>
			<comment><![CDATA[format interval to text]]></comment>
		</function>
		<function name="to_char_001" id="Function_5a9502b" isSystem="false" >
			<comment><![CDATA[format timestamp with time zone to text]]></comment>
		</function>
		<function name="to_char_002" id="Function_33d2c1a9" isSystem="false" >
			<comment><![CDATA[format numeric to text]]></comment>
		</function>
		<function name="to_char_003" id="Function_335d8b42" isSystem="false" >
			<comment><![CDATA[format int4 to text]]></comment>
		</function>
		<function name="to_char_004" id="Function_2cfb1e90" isSystem="false" >
			<comment><![CDATA[format int8 to text]]></comment>
		</function>
		<function name="to_char_005" id="Function_1c3a87a5" isSystem="false" >
			<comment><![CDATA[format float4 to text]]></comment>
		</function>
		<function name="to_char_006" id="Function_34dd5259" isSystem="false" >
			<comment><![CDATA[format float8 to text]]></comment>
		</function>
		<function name="to_char_007" id="Function_1451f6db" isSystem="false" >
			<comment><![CDATA[format timestamp to text]]></comment>
		</function>
		<function name="to_date" id="Function_23e98975" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_date(text, text)
 RETURNS date
 LANGUAGE internal
 STABLE STRICT
AS $function$to_date$function$
]]></string>
			<comment><![CDATA[convert text to date]]></comment>
		</function>
		<function name="to_hex" id="Function_37c7fe80" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_hex(bigint)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_hex64$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_hex(integer)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_hex32$function$
]]></string>
			<comment><![CDATA[convert int4 number to hex]]></comment>
		</function>
		<function name="to_hex_001" id="Function_21c865f6" isSystem="false" >
			<comment><![CDATA[convert int8 number to hex]]></comment>
		</function>
		<function name="to_json" id="Function_bae83ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_json(anyelement)
 RETURNS json
 LANGUAGE internal
 STABLE STRICT
AS $function$to_json$function$
]]></string>
			<comment><![CDATA[map input to json]]></comment>
		</function>
		<function name="to_number" id="Function_29f7aece" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_number(text, text)
 RETURNS numeric
 LANGUAGE internal
 STABLE STRICT
AS $function$numeric_to_number$function$
]]></string>
			<comment><![CDATA[convert text to numeric]]></comment>
		</function>
		<function name="to_regclass" id="Function_1b92aa24" isSystem="false" >
			<comment><![CDATA[convert classname to regclass]]></comment>
		</function>
		<function name="to_regoper" id="Function_2833cb4e" isSystem="false" >
			<comment><![CDATA[convert operator name to regoper]]></comment>
		</function>
		<function name="to_regoperator" id="Function_19e720b8" isSystem="false" >
			<comment><![CDATA[convert operator name to regoperator]]></comment>
		</function>
		<function name="to_regproc" id="Function_2550516a" isSystem="false" >
			<comment><![CDATA[convert proname to regproc]]></comment>
		</function>
		<function name="to_regprocedure" id="Function_ea8e129" isSystem="false" >
			<comment><![CDATA[convert proname to regprocedure]]></comment>
		</function>
		<function name="to_regtype" id="Function_1bd316dc" isSystem="false" >
			<comment><![CDATA[convert type name to regtype]]></comment>
		</function>
		<function name="to_timestamp" id="Function_349d610" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(double precision)
 RETURNS timestamp with time zone
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select ('epoch'::pg_catalog.timestamptz + $1 * '1 second'::pg_catalog.interval)$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_timestamp(text, text)
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$to_timestamp$function$
]]></string>
			<comment><![CDATA[convert UNIX epoch to timestamptz]]></comment>
		</function>
		<function name="to_timestamp_001" id="Function_28548404" isSystem="false" >
			<comment><![CDATA[convert text to timestamp with time zone]]></comment>
		</function>
		<function name="to_tsquery" id="Function_954536a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(text)
 RETURNS tsquery
 LANGUAGE internal
 STABLE STRICT
AS $function$to_tsquery$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_tsquery(regconfig, text)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_tsquery_byid$function$
]]></string>
			<comment><![CDATA[make tsquery]]></comment>
		</function>
		<function name="to_tsquery_001" id="Function_1e24fd91" isSystem="false" >
			<comment><![CDATA[make tsquery]]></comment>
		</function>
		<function name="to_tsvector" id="Function_27e4589" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(text)
 RETURNS tsvector
 LANGUAGE internal
 STABLE STRICT
AS $function$to_tsvector$function$
CREATE OR REPLACE FUNCTION pg_catalog.to_tsvector(regconfig, text)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$to_tsvector_byid$function$
]]></string>
			<comment><![CDATA[transform to tsvector]]></comment>
		</function>
		<function name="to_tsvector_001" id="Function_1bea774c" isSystem="false" >
			<comment><![CDATA[transform to tsvector]]></comment>
		</function>
		<function name="transaction_timestamp" id="Function_1f44759a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.transaction_timestamp()
 RETURNS timestamp with time zone
 LANGUAGE internal
 STABLE STRICT
AS $function$now$function$
]]></string>
			<comment><![CDATA[current transaction time]]></comment>
		</function>
		<function name="translate" id="Function_8f63d51" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.translate(text, text, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$translate$function$
]]></string>
			<comment><![CDATA[map a set of characters appearing in string]]></comment>
		</function>
		<function name="trigger_in" id="Function_2b1a9146" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="trigger_out" id="Function_db007d3" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="trunc" id="Function_25f4d71f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.trunc(double precision)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$dtrunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(macaddr)
 RETURNS macaddr
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$macaddr_trunc$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric)
 RETURNS numeric
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.trunc($1,0)$function$
CREATE OR REPLACE FUNCTION pg_catalog.trunc(numeric, integer)
 RETURNS numeric
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$numeric_trunc$function$
]]></string>
			<comment><![CDATA[truncate to integer]]></comment>
		</function>
		<function name="trunc_001" id="Function_61ded86" isSystem="false" >
			<comment><![CDATA[value truncated to 'scale']]></comment>
		</function>
		<function name="trunc_002" id="Function_f1673ea" isSystem="false" >
			<comment><![CDATA[value truncated to 'scale' of zero]]></comment>
		</function>
		<function name="trunc_003" id="Function_33b5411a" isSystem="false" >
			<comment><![CDATA[MAC manufacturer fields]]></comment>
		</function>
		<function name="ts_debug" id="Function_25b32079" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$
    SELECT * FROM pg_catalog.ts_debug( pg_catalog.get_current_ts_config(), $1);
$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_debug(config regconfig, document text, OUT alias text, OUT description text, OUT token text, OUT dictionaries regdictionary[], OUT dictionary regdictionary, OUT lexemes text[])
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT
    tt.alias AS alias,
    tt.description AS description,
    parse.token AS token,
    ARRAY ( SELECT m.mapdict::pg_catalog.regdictionary
            FROM pg_catalog.pg_ts_config_map AS m
            WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
            ORDER BY m.mapseqno )
    AS dictionaries,
    ( SELECT mapdict::pg_catalog.regdictionary
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS dictionary,
    ( SELECT pg_catalog.ts_lexize(mapdict, parse.token)
      FROM pg_catalog.pg_ts_config_map AS m
      WHERE m.mapcfg = $1 AND m.maptokentype = parse.tokid
      ORDER BY pg_catalog.ts_lexize(mapdict, parse.token) IS NULL, m.mapseqno
      LIMIT 1
    ) AS lexemes
FROM pg_catalog.ts_parse(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 ), $2
    ) AS parse,
     pg_catalog.ts_token_type(
        (SELECT cfgparser FROM pg_catalog.pg_ts_config WHERE oid = $1 )
    ) AS tt
WHERE tt.tokid = parse.tokid
$function$
]]></string>
			<comment><![CDATA[debug function for text search configuration]]></comment>
		</function>
		<function name="ts_debug_001" id="Function_1ec2c002" isSystem="false" >
			<comment><![CDATA[debug function for current text search configuration]]></comment>
		</function>
		<function name="ts_headline" id="Function_1ef212dc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$ts_headline$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$ts_headline_opt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_headline_byid$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_headline(regconfig, text, tsquery, text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_headline_byid_opt$function$
]]></string>
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_headline_001" id="Function_300d26b8" isSystem="false" >
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_headline_002" id="Function_2094c6cb" isSystem="false" >
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_headline_003" id="Function_1460dbd1" isSystem="false" >
			<comment><![CDATA[generate headline]]></comment>
		</function>
		<function name="ts_lexize" id="Function_247ddc90" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_lexize(regdictionary, text)
 RETURNS text[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_lexize$function$
]]></string>
			<comment><![CDATA[normalize one word by dictionary]]></comment>
		</function>
		<function name="ts_match_qv" id="Function_ae350f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_qv(tsquery, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_match_qv$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_match_tq" id="Function_5771f73" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_tq(text, tsquery)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 2
AS $function$ts_match_tq$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_match_tt" id="Function_2eaabf55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_tt(text, text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT COST 3
AS $function$ts_match_tt$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_match_vq" id="Function_629bd73" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_match_vq(tsvector, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_match_vq$function$
]]></string>
			<comment><![CDATA[implementation of @@ operator]]></comment>
		</function>
		<function name="ts_parse" id="Function_40af528" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_name text, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT
AS $function$ts_parse_byname$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_parse(parser_oid oid, txt text, OUT tokid integer, OUT token text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_parse_byid$function$
]]></string>
			<comment><![CDATA[parse text to tokens]]></comment>
		</function>
		<function name="ts_parse_001" id="Function_17a3c30f" isSystem="false" >
			<comment><![CDATA[parse text to tokens]]></comment>
		</function>
		<function name="ts_rank" id="Function_38ddba34" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_tt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rank_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_001" id="Function_2d8a7f49" isSystem="false" >
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_002" id="Function_3b81053c" isSystem="false" >
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_003" id="Function_1387dfd5" isSystem="false" >
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd" id="Function_647e2f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_tt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_wtt$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_ttf$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rank_cd(real[], tsvector, tsquery, integer)
 RETURNS real
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$ts_rankcd_wttf$function$
]]></string>
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd_001" id="Function_24a359f" isSystem="false" >
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd_002" id="Function_f3cfd71" isSystem="false" >
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rank_cd_003" id="Function_c40ce13" isSystem="false" >
			<comment><![CDATA[relevance]]></comment>
		</function>
		<function name="ts_rewrite" id="Function_3547c87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, text)
 RETURNS tsquery
 LANGUAGE internal
 STRICT
AS $function$tsquery_rewrite_query$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_rewrite(tsquery, tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_rewrite$function$
]]></string>
			<comment><![CDATA[rewrite tsquery]]></comment>
		</function>
		<function name="ts_rewrite_001" id="Function_1fbab587" isSystem="false" >
			<comment><![CDATA[rewrite tsquery]]></comment>
		</function>
		<function name="ts_stat" id="Function_7f8c5b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT COST 10 ROWS 10000
AS $function$ts_stat1$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_stat(query text, weights text, OUT word text, OUT ndoc integer, OUT nentry integer)
 RETURNS SETOF record
 LANGUAGE internal
 STRICT COST 10 ROWS 10000
AS $function$ts_stat2$function$
]]></string>
			<comment><![CDATA[statistics of tsvector column]]></comment>
		</function>
		<function name="ts_stat_001" id="Function_29d49210" isSystem="false" >
			<comment><![CDATA[statistics of tsvector column]]></comment>
		</function>
		<function name="ts_token_type" id="Function_2fff7569" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_name text, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 STABLE STRICT ROWS 16
AS $function$ts_token_type_byname$function$
CREATE OR REPLACE FUNCTION pg_catalog.ts_token_type(parser_oid oid, OUT tokid integer, OUT alias text, OUT description text)
 RETURNS SETOF record
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 16
AS $function$ts_token_type_byid$function$
]]></string>
			<comment><![CDATA[get parser's token types]]></comment>
		</function>
		<function name="ts_token_type_001" id="Function_100ec76" isSystem="false" >
			<comment><![CDATA[get parser's token types]]></comment>
		</function>
		<function name="ts_typanalyze" id="Function_2675d397" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.ts_typanalyze(internal)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$ts_typanalyze$function$
]]></string>
			<comment><![CDATA[tsvector typanalyze]]></comment>
		</function>
		<function name="tsmatchjoinsel" id="Function_1ac1c829" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsmatchjoinsel(internal, oid, internal, smallint, internal)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$tsmatchjoinsel$function$
]]></string>
			<comment><![CDATA[join selectivity of tsvector @@ tsquery]]></comment>
		</function>
		<function name="tsmatchsel" id="Function_26762c17" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsmatchsel(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE internal
 STABLE STRICT
AS $function$tsmatchsel$function$
]]></string>
			<comment><![CDATA[restriction selectivity of tsvector @@ tsquery]]></comment>
		</function>
		<function name="tsq_mcontained" id="Function_395903eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsq_mcontained(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsq_mcontained$function$
]]></string>
			<comment><![CDATA[implementation of <@ operator]]></comment>
		</function>
		<function name="tsq_mcontains" id="Function_16241262" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsq_mcontains(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsq_mcontains$function$
]]></string>
			<comment><![CDATA[implementation of @> operator]]></comment>
		</function>
		<function name="tsquery_and" id="Function_19b6c540" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_and(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_and$function$
]]></string>
			<comment><![CDATA[implementation of && operator]]></comment>
		</function>
		<function name="tsquery_cmp" id="Function_1c4a5759" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_cmp(tsquery, tsquery)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="tsquery_eq" id="Function_18bd2b7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_eq(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tsquery_ge" id="Function_18986a70" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_ge(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tsquery_gt" id="Function_2006d181" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_gt(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tsquery_le" id="Function_1a177473" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_le(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tsquery_lt" id="Function_6b435c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_lt(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tsquery_ne" id="Function_3a5a0f03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_ne(tsquery, tsquery)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tsquery_not" id="Function_2c6d1f61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_not(tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_not$function$
]]></string>
			<comment><![CDATA[implementation of !! operator]]></comment>
		</function>
		<function name="tsquery_or" id="Function_1afd1b5a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquery_or(tsquery, tsquery)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquery_or$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="tsqueryin" id="Function_4f8f9d1" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsqueryout" id="Function_1c716072" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsqueryrecv" id="Function_11cbac48" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsqueryrecv(internal)
 RETURNS tsquery
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsqueryrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsquerysend" id="Function_281aa072" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsquerysend(tsquery)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsquerysend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsrange" id="Function_25cb9ddd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.tsrange(timestamp without time zone, timestamp without time zone, text)
 RETURNS tsrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[tsrange constructor]]></comment>
		</function>
		<function name="tsrange_001" id="Function_137ded7b" isSystem="false" >
			<comment><![CDATA[tsrange constructor]]></comment>
		</function>
		<function name="tsrange_subdiff" id="Function_34022e71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsrange_subdiff(timestamp without time zone, timestamp without time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two timestamp values]]></comment>
		</function>
		<function name="tstzrange" id="Function_19c183a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor2$function$
CREATE OR REPLACE FUNCTION pg_catalog.tstzrange(timestamp with time zone, timestamp with time zone, text)
 RETURNS tstzrange
 LANGUAGE internal
 IMMUTABLE
AS $function$range_constructor3$function$
]]></string>
			<comment><![CDATA[tstzrange constructor]]></comment>
		</function>
		<function name="tstzrange_001" id="Function_1fc58c54" isSystem="false" >
			<comment><![CDATA[tstzrange constructor]]></comment>
		</function>
		<function name="tstzrange_subdiff" id="Function_83bb075" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tstzrange_subdiff(timestamp with time zone, timestamp with time zone)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tstzrange_subdiff$function$
]]></string>
			<comment><![CDATA[float8 difference of two timestamp with time zone values]]></comment>
		</function>
		<function name="tsvector_cmp" id="Function_b040930" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_cmp(tsvector, tsvector)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="tsvector_concat" id="Function_2de53e77" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_concat(tsvector, tsvector)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_concat$function$
]]></string>
			<comment><![CDATA[implementation of || operator]]></comment>
		</function>
		<function name="tsvector_eq" id="Function_18e5bdc6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_eq(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="tsvector_ge" id="Function_37aaede7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_ge(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="tsvector_gt" id="Function_2a670010" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_gt(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="tsvector_le" id="Function_baf903e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_le(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="tsvector_lt" id="Function_37611b67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_lt(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="tsvector_ne" id="Function_220785dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_ne(tsvector, tsvector)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvector_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="tsvector_update_trigger" id="Function_aa1837c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_update_trigger()
 RETURNS trigger
 LANGUAGE internal
AS $function$tsvector_update_trigger_byid$function$
]]></string>
			<comment><![CDATA[trigger for automatic update of tsvector column]]></comment>
		</function>
		<function name="tsvector_update_trigger_column" id="Function_395dbcd8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvector_update_trigger_column()
 RETURNS trigger
 LANGUAGE internal
AS $function$tsvector_update_trigger_bycolumn$function$
]]></string>
			<comment><![CDATA[trigger for automatic update of tsvector column]]></comment>
		</function>
		<function name="tsvectorin" id="Function_3285fd5d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsvectorout" id="Function_1d7dd774" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsvectorrecv" id="Function_1087b97b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorrecv(internal)
 RETURNS tsvector
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvectorrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="tsvectorsend" id="Function_2c5219f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.tsvectorsend(tsvector)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$tsvectorsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_current" id="Function_20dbee74" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_current()
 RETURNS bigint
 LANGUAGE internal
 STABLE STRICT
AS $function$txid_current$function$
]]></string>
			<comment><![CDATA[get current transaction ID]]></comment>
		</function>
		<function name="txid_current_snapshot" id="Function_1dcd578a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_current_snapshot()
 RETURNS txid_snapshot
 LANGUAGE internal
 STABLE STRICT
AS $function$txid_current_snapshot$function$
]]></string>
			<comment><![CDATA[get current snapshot]]></comment>
		</function>
		<function name="txid_snapshot_in" id="Function_24d91fe7" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_out" id="Function_112a629e" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_recv" id="Function_1a99f2ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_recv(internal)
 RETURNS txid_snapshot
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_send" id="Function_cbf77d4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_send(txid_snapshot)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="txid_snapshot_xip" id="Function_107e2784" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xip(txid_snapshot)
 RETURNS SETOF bigint
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 50
AS $function$txid_snapshot_xip$function$
]]></string>
			<comment><![CDATA[get set of in-progress txids in snapshot]]></comment>
		</function>
		<function name="txid_snapshot_xmax" id="Function_121a08b9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xmax(txid_snapshot)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_xmax$function$
]]></string>
			<comment><![CDATA[get xmax of snapshot]]></comment>
		</function>
		<function name="txid_snapshot_xmin" id="Function_259b6535" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_snapshot_xmin(txid_snapshot)
 RETURNS bigint
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_snapshot_xmin$function$
]]></string>
			<comment><![CDATA[get xmin of snapshot]]></comment>
		</function>
		<function name="txid_visible_in_snapshot" id="Function_249c971e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.txid_visible_in_snapshot(bigint, txid_snapshot)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$txid_visible_in_snapshot$function$
]]></string>
			<comment><![CDATA[is txid visible in snapshot?]]></comment>
		</function>
		<function name="uhc_to_utf8" id="Function_190e8810" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uhc_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_uhc', $function$uhc_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for UHC to UTF8]]></comment>
		</function>
		<function name="unique_key_recheck" id="Function_21b9e0e2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unique_key_recheck()
 RETURNS trigger
 LANGUAGE internal
 STRICT
AS $function$unique_key_recheck$function$
]]></string>
			<comment><![CDATA[deferred UNIQUE constraint check]]></comment>
		</function>
		<function name="unknownin" id="Function_3849f70b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unknownout" id="Function_6e825b" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unknownrecv" id="Function_1816a214" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownrecv(internal)
 RETURNS unknown
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$unknownrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unknownsend" id="Function_3b41ace2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unknownsend(unknown)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$unknownsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="unnest" id="Function_2b40d6df" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.unnest(anyarray)
 RETURNS SETOF anyelement
 LANGUAGE internal
 IMMUTABLE STRICT ROWS 100
AS $function$array_unnest$function$
]]></string>
			<comment><![CDATA[expand array to set of rows]]></comment>
		</function>
		<function name="upper" id="Function_2047e8ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper(text)
 RETURNS text
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$upper$function$
CREATE OR REPLACE FUNCTION pg_catalog.upper(anyrange)
 RETURNS anyelement
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_upper$function$
]]></string>
			<comment><![CDATA[upper bound of range]]></comment>
		</function>
		<function name="upper_001" id="Function_18b362ee" isSystem="false" >
			<comment><![CDATA[uppercase]]></comment>
		</function>
		<function name="upper_inc" id="Function_e312011" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper_inc(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_upper_inc$function$
]]></string>
			<comment><![CDATA[is the range's upper bound inclusive?]]></comment>
		</function>
		<function name="upper_inf" id="Function_3b3ab64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.upper_inf(anyrange)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$range_upper_inf$function$
]]></string>
			<comment><![CDATA[is the range's upper bound infinite?]]></comment>
		</function>
		<function name="utf8_to_ascii" id="Function_1ec282b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_ascii(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_ascii', $function$utf8_to_ascii$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SQL_ASCII]]></comment>
		</function>
		<function name="utf8_to_big5" id="Function_c989f61" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_big5(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_big5', $function$utf8_to_big5$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to BIG5]]></comment>
		</function>
		<function name="utf8_to_euc_cn" id="Function_7a352f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_cn(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_cn', $function$utf8_to_euc_cn$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_CN]]></comment>
		</function>
		<function name="utf8_to_euc_jis_2004" id="Function_272a809" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc2004', $function$utf8_to_euc_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_JIS_2004]]></comment>
		</function>
		<function name="utf8_to_euc_jp" id="Function_1ac5a22b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_jp(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_jp', $function$utf8_to_euc_jp$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_JP]]></comment>
		</function>
		<function name="utf8_to_euc_kr" id="Function_2dd2e07d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_kr(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_kr', $function$utf8_to_euc_kr$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_KR]]></comment>
		</function>
		<function name="utf8_to_euc_tw" id="Function_c3a96f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_euc_tw(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_euc_tw', $function$utf8_to_euc_tw$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to EUC_TW]]></comment>
		</function>
		<function name="utf8_to_gb18030" id="Function_1ffd21ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_gb18030(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gb18030', $function$utf8_to_gb18030$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to GB18030]]></comment>
		</function>
		<function name="utf8_to_gbk" id="Function_74f0d3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_gbk(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_gbk', $function$utf8_to_gbk$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to GBK]]></comment>
		</function>
		<function name="utf8_to_iso8859" id="Function_266f8203" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_iso8859(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859', $function$utf8_to_iso8859$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to ISO-8859-8]]></comment>
		</function>
		<function name="utf8_to_iso8859_1" id="Function_19343201" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_iso8859_1(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_iso8859_1', $function$utf8_to_iso8859_1$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to LATIN1]]></comment>
		</function>
		<function name="utf8_to_johab" id="Function_15759e72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_johab(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_johab', $function$utf8_to_johab$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to JOHAB]]></comment>
		</function>
		<function name="utf8_to_koi8r" id="Function_22e506b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$utf8_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to KOI8R]]></comment>
		</function>
		<function name="utf8_to_koi8u" id="Function_2b65419c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_koi8u(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_cyrillic', $function$utf8_to_koi8u$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to KOI8U]]></comment>
		</function>
		<function name="utf8_to_shift_jis_2004" id="Function_1ff782f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_shift_jis_2004(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis2004', $function$utf8_to_shift_jis_2004$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SHIFT_JIS_2004]]></comment>
		</function>
		<function name="utf8_to_sjis" id="Function_ac8cda0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_sjis(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_sjis', $function$utf8_to_sjis$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to SJIS]]></comment>
		</function>
		<function name="utf8_to_uhc" id="Function_1872c16e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_uhc(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_uhc', $function$utf8_to_uhc$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to UHC]]></comment>
		</function>
		<function name="utf8_to_win" id="Function_23cbb484" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.utf8_to_win(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_win', $function$utf8_to_win$function$
]]></string>
			<comment><![CDATA[internal conversion function for UTF8 to WIN1258]]></comment>
		</function>
		<function name="uuid_cmp" id="Function_2497f017" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_cmp(uuid, uuid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_cmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="uuid_eq" id="Function_1d2fa74e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_eq(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_eq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="uuid_ge" id="Function_13b5b50a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_ge(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_ge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="uuid_gt" id="Function_7fcb8a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_gt(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_gt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="uuid_hash" id="Function_9d8e370" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_hash(uuid)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_hash$function$
]]></string>
			<comment><![CDATA[hash]]></comment>
		</function>
		<function name="uuid_in" id="Function_81df57" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="uuid_le" id="Function_2d305c64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_le(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_le$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="uuid_lt" id="Function_582444e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_lt(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_lt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="uuid_ne" id="Function_db0772e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_ne(uuid, uuid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$uuid_ne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="uuid_out" id="Function_17020d3d" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="uuid_recv" id="Function_221b0443" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_recv(internal)
 RETURNS uuid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="uuid_send" id="Function_1b0e23b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.uuid_send(uuid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$uuid_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="var_pop" id="Function_757909" isSystem="false" >
			<comment><![CDATA[population variance of bigint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_001" id="Function_2a5c7ec0" isSystem="false" >
			<comment><![CDATA[population variance of integer input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_002" id="Function_d5fd78" isSystem="false" >
			<comment><![CDATA[population variance of smallint input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_003" id="Function_34a54d18" isSystem="false" >
			<comment><![CDATA[population variance of float4 input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_004" id="Function_1f838327" isSystem="false" >
			<comment><![CDATA[population variance of float8 input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_pop_005" id="Function_15dbc60c" isSystem="false" >
			<comment><![CDATA[population variance of numeric input values (square of the population standard deviation)]]></comment>
		</function>
		<function name="var_samp" id="Function_1c0f7dd3" isSystem="false" >
			<comment><![CDATA[sample variance of bigint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_001" id="Function_112e70f1" isSystem="false" >
			<comment><![CDATA[sample variance of integer input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_002" id="Function_1f8933a" isSystem="false" >
			<comment><![CDATA[sample variance of smallint input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_003" id="Function_131375d" isSystem="false" >
			<comment><![CDATA[sample variance of float4 input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_004" id="Function_19d54bd2" isSystem="false" >
			<comment><![CDATA[sample variance of float8 input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="var_samp_005" id="Function_283c2983" isSystem="false" >
			<comment><![CDATA[sample variance of numeric input values (square of the sample standard deviation)]]></comment>
		</function>
		<function name="varbit" id="Function_32fd6a87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit(bit varying, integer, boolean)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit$function$
]]></string>
			<comment><![CDATA[adjust varbit() to typmod length]]></comment>
		</function>
		<function name="varbit_in" id="Function_4482e7a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_out" id="Function_37b5e5f6" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_recv" id="Function_229bfaa2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_recv(internal, oid, integer)
 RETURNS bit varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_send" id="Function_fd27cbc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_send(bit varying)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varbit_transform" id="Function_2c7135c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbit_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbit_transform$function$
]]></string>
			<comment><![CDATA[transform a varbit length coercion]]></comment>
		</function>
		<function name="varbitcmp" id="Function_13a4c3d9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitcmp(bit varying, bit varying)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$bitcmp$function$
]]></string>
			<comment><![CDATA[less-equal-greater]]></comment>
		</function>
		<function name="varbiteq" id="Function_c5138bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbiteq(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$biteq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="varbitge" id="Function_36a6073a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitge(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitge$function$
]]></string>
			<comment><![CDATA[implementation of >= operator]]></comment>
		</function>
		<function name="varbitgt" id="Function_4efaaa6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitgt(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitgt$function$
]]></string>
			<comment><![CDATA[implementation of > operator]]></comment>
		</function>
		<function name="varbitle" id="Function_15e8a8ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitle(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitle$function$
]]></string>
			<comment><![CDATA[implementation of <= operator]]></comment>
		</function>
		<function name="varbitlt" id="Function_283cf0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitlt(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitlt$function$
]]></string>
			<comment><![CDATA[implementation of < operator]]></comment>
		</function>
		<function name="varbitne" id="Function_2ed3ee27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbitne(bit varying, bit varying)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$bitne$function$
]]></string>
			<comment><![CDATA[implementation of <> operator]]></comment>
		</function>
		<function name="varbittypmodin" id="Function_1ec2e642" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varbittypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varbittypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="varbittypmodout" id="Function_7632238" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="varchar" id="Function_330c9476" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."varchar"(name)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$name_text$function$
CREATE OR REPLACE FUNCTION pg_catalog."varchar"(character varying, integer, boolean)
 RETURNS character varying
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varchar$function$
]]></string>
			<comment><![CDATA[convert name to varchar]]></comment>
		</function>
		<function name="varchar_001" id="Function_2bc655f5" isSystem="false" >
			<comment><![CDATA[adjust varchar() to typmod length]]></comment>
		</function>
		<function name="varchar_transform" id="Function_1575393c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varchar_transform(internal)
 RETURNS internal
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varchar_transform$function$
]]></string>
			<comment><![CDATA[transform a varchar length coercion]]></comment>
		</function>
		<function name="varcharin" id="Function_1e387689" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varcharout" id="Function_e11be6c" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varcharrecv" id="Function_7d9eccf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharrecv(internal, oid, integer)
 RETURNS character varying
 LANGUAGE internal
 STABLE STRICT
AS $function$varcharrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varcharsend" id="Function_1ea54a99" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varcharsend(character varying)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$varcharsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="varchartypmodin" id="Function_2c0c48b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.varchartypmodin(cstring[])
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$varchartypmodin$function$
]]></string>
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="varchartypmodout" id="Function_239d7345" isSystem="false" >
			<comment><![CDATA[I/O typmod]]></comment>
		</function>
		<function name="variance" id="Function_106ffd5b" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_001" id="Function_362967ee" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_002" id="Function_1901f6a3" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_003" id="Function_77a5e2d" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_004" id="Function_2b3218f5" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="variance_005" id="Function_2c0bd254" isSystem="false" >
			<comment><![CDATA[historical alias for var_samp]]></comment>
		</function>
		<function name="version" id="Function_1f48f9d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.version()
 RETURNS text
 LANGUAGE internal
 STABLE STRICT
AS $function$pgsql_version$function$
]]></string>
			<comment><![CDATA[PostgreSQL version string]]></comment>
		</function>
		<function name="void_in" id="Function_1805ccd4" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="void_out" id="Function_123d10f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="void_recv" id="Function_13e5e74c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_recv(internal)
 RETURNS void
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$void_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="void_send" id="Function_39c3ed1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.void_send(void)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$void_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="width" id="Function_370cdb76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width(box)
 RETURNS double precision
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$box_width$function$
]]></string>
			<comment><![CDATA[box width]]></comment>
		</function>
		<function name="width_bucket" id="Function_299a7fc7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(double precision, double precision, double precision, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$width_bucket_float8$function$
CREATE OR REPLACE FUNCTION pg_catalog.width_bucket(numeric, numeric, numeric, integer)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$width_bucket_numeric$function$
]]></string>
			<comment><![CDATA[bucket number of operand in equidepth histogram]]></comment>
		</function>
		<function name="width_bucket_001" id="Function_22a17331" isSystem="false" >
			<comment><![CDATA[bucket number of operand in equidepth histogram]]></comment>
		</function>
		<function name="win1250_to_latin2" id="Function_999d7c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1250_to_latin2(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$win1250_to_latin2$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1250 to LATIN2]]></comment>
		</function>
		<function name="win1250_to_mic" id="Function_1ace7dae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1250_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/latin2_and_win1250', $function$win1250_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1250 to MULE_INTERNAL]]></comment>
		</function>
		<function name="win1251_to_iso" id="Function_38eabfe8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to ISO-8859-5]]></comment>
		</function>
		<function name="win1251_to_koi8r" id="Function_b8d24f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to KOI8R]]></comment>
		</function>
		<function name="win1251_to_mic" id="Function_1360b180" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to MULE_INTERNAL]]></comment>
		</function>
		<function name="win1251_to_win866" id="Function_61597e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win1251_to_win866(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win1251_to_win866$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1251 to WIN866]]></comment>
		</function>
		<function name="win866_to_iso" id="Function_2d476161" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_iso(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_iso$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to ISO-8859-5]]></comment>
		</function>
		<function name="win866_to_koi8r" id="Function_2c6049c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_koi8r(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_koi8r$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to KOI8R]]></comment>
		</function>
		<function name="win866_to_mic" id="Function_d670c93" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_mic(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_mic$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to MULE_INTERNAL]]></comment>
		</function>
		<function name="win866_to_win1251" id="Function_2aba7b37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win866_to_win1251(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/cyrillic_and_mic', $function$win866_to_win1251$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN866 to WIN1251]]></comment>
		</function>
		<function name="win_to_utf8" id="Function_2e65b472" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.win_to_utf8(integer, integer, cstring, internal, integer)
 RETURNS void
 LANGUAGE c
 STRICT
AS '$libdir/utf8_and_win', $function$win_to_utf8$function$
]]></string>
			<comment><![CDATA[internal conversion function for WIN1258 to UTF8]]></comment>
		</function>
		<function name="xideq" id="Function_12a7e10a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xideq(xid, xid)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT LEAKPROOF
AS $function$xideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="xideqint4" id="Function_137156ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xideqint4(xid, integer)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xideq$function$
]]></string>
			<comment><![CDATA[implementation of = operator]]></comment>
		</function>
		<function name="xidin" id="Function_1ad9f7b9" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xidout" id="Function_399974a6" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xidrecv" id="Function_2fdc2a46" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidrecv(internal)
 RETURNS xid
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xidrecv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xidsend" id="Function_15e7a3fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xidsend(xid)
 RETURNS bytea
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xidsend$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml" id="Function_315e8db0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml(text)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT
AS $function$texttoxml$function$
]]></string>
			<comment><![CDATA[perform a non-validating parse of a character string to produce an XML value]]></comment>
		</function>
		<function name="xml_in" id="Function_1087113a" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml_is_well_formed" id="Function_1ba51211" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed(text)
 RETURNS boolean
 LANGUAGE internal
 STABLE STRICT
AS $function$xml_is_well_formed$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML]]></comment>
		</function>
		<function name="xml_is_well_formed_content" id="Function_2db7a692" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed_content(text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xml_is_well_formed_content$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML content]]></comment>
		</function>
		<function name="xml_is_well_formed_document" id="Function_19fe4cdf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_is_well_formed_document(text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xml_is_well_formed_document$function$
]]></string>
			<comment><![CDATA[determine if a string is well formed XML document]]></comment>
		</function>
		<function name="xml_out" id="Function_200fdb5f" isSystem="false" >
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml_recv" id="Function_36fc4833" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_recv(internal)
 RETURNS xml
 LANGUAGE internal
 STABLE STRICT
AS $function$xml_recv$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xml_send" id="Function_11493783" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xml_send(xml)
 RETURNS bytea
 LANGUAGE internal
 STABLE STRICT
AS $function$xml_send$function$
]]></string>
			<comment><![CDATA[I/O]]></comment>
		</function>
		<function name="xmlagg" id="Function_e0a7bef" isSystem="false" >
			<comment><![CDATA[concatenate XML values]]></comment>
		</function>
		<function name="xmlcomment" id="Function_a004bb1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlcomment(text)
 RETURNS xml
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmlcomment$function$
]]></string>
			<comment><![CDATA[generate XML comment]]></comment>
		</function>
		<function name="xmlconcat2" id="Function_4a42b4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlconcat2(xml, xml)
 RETURNS xml
 LANGUAGE internal
 IMMUTABLE
AS $function$xmlconcat2$function$
]]></string>
			<comment><![CDATA[aggregate transition function]]></comment>
		</function>
		<function name="xmlexists" id="Function_3707e323" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog."xmlexists"(text, xml)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmlexists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression]]></comment>
		</function>
		<function name="xmlvalidate" id="Function_2ce9ac3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xmlvalidate(xml, text)
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xmlvalidate$function$
]]></string>
			<comment><![CDATA[validate an XML value]]></comment>
		</function>
		<function name="xpath" id="Function_570a783" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml)
 RETURNS xml[]
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.xpath($1, $2, '{}'::pg_catalog.text[])$function$
CREATE OR REPLACE FUNCTION pg_catalog.xpath(text, xml, text[])
 RETURNS xml[]
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xpath$function$
]]></string>
			<comment><![CDATA[evaluate XPath expression, with namespaces support]]></comment>
		</function>
		<function name="xpath_001" id="Function_201a2c6f" isSystem="false" >
			<comment><![CDATA[evaluate XPath expression]]></comment>
		</function>
		<function name="xpath_exists" id="Function_3931ab7e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT COST 1
AS $function$select pg_catalog.xpath_exists($1, $2, '{}'::pg_catalog.text[])$function$
CREATE OR REPLACE FUNCTION pg_catalog.xpath_exists(text, xml, text[])
 RETURNS boolean
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$xpath_exists$function$
]]></string>
			<comment><![CDATA[test XML value against XPath expression, with namespace support]]></comment>
		</function>
		<function name="xpath_exists_001" id="Function_5573f8c" isSystem="false" >
			<comment><![CDATA[test XML value against XPath expression]]></comment>
		</function>
	</schema>
	<schema name="public" catalogname="census" schemaname="public" >
		<table name="spatial_ref_sys" >
			<column name="srid" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="auth_name" type="varchar" length="256" decimal="0" jt="12" />
			<column name="auth_srid" type="integer" length="10" decimal="0" jt="4" />
			<column name="srtext" type="varchar" length="2048" decimal="0" jt="12" />
			<column name="proj4text" type="varchar" length="2048" decimal="0" jt="12" />
			<index name="spatial_ref_sys_pkey" unique="PRIMARY_KEY" >
				<column name="srid" />
			</index>
			<constraint name="spatial_ref_sys_srid_check" >
				<string>(srid &gt; 0) AND (srid &lt;= 998999)</string>
			</constraint>
		</table>
		<view name="geography_columns" >
			<view_script><![CDATA[ SELECT current_database() AS f_table_catalog,
    n.nspname AS f_table_schema,
    c.relname AS f_table_name,
    a.attname AS f_geography_column,
    postgis_typmod_dims(a.atttypmod) AS coord_dimension,
    postgis_typmod_srid(a.atttypmod) AS srid,
    postgis_typmod_type(a.atttypmod) AS type
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE (((((((t.typname = 'geography'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="coord_dimension" type="integer" />
			<column name="f_geography_column" type="name" />
			<column name="f_table_catalog" type="name" />
			<column name="f_table_name" type="name" />
			<column name="f_table_schema" type="name" />
			<column name="srid" type="integer" />
			<column name="type" type="text" />
		</view>
		<view name="geometry_columns" >
			<view_script><![CDATA[ SELECT (current_database())::character varying(256) AS f_table_catalog,
    (n.nspname)::character varying(256) AS f_table_schema,
    (c.relname)::character varying(256) AS f_table_name,
    (a.attname)::character varying(256) AS f_geometry_column,
    COALESCE(postgis_typmod_dims(a.atttypmod), postgis_constraint_dims((n.nspname)::text, (c.relname)::text, (a.attname)::text), 2) AS coord_dimension,
    COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), postgis_constraint_srid((n.nspname)::text, (c.relname)::text, (a.attname)::text), 0) AS srid,
    (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), (postgis_constraint_type((n.nspname)::text, (c.relname)::text, (a.attname)::text))::text, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE (((((((((t.typname = 'geometry'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((((c.relkind = 'r'::"char") OR (c.relkind = 'v'::"char")) OR (c.relkind = 'm'::"char")) OR (c.relkind = 'f'::"char"))) AND (NOT pg_is_other_temp_schema(c.relnamespace))) AND (NOT ((n.nspname = 'public'::name) AND (c.relname = 'raster_columns'::name)))) AND has_table_privilege(c.oid, 'SELECT'::text));]]></view_script>
			<column name="coord_dimension" type="integer" />
			<column name="f_geometry_column" type="varchar" />
			<column name="f_table_catalog" type="varchar" />
			<column name="f_table_name" type="varchar" />
			<column name="f_table_schema" type="varchar" />
			<column name="srid" type="integer" />
			<column name="type" type="varchar" />
		</view>
		<view name="raster_columns" >
			<view_script><![CDATA[ SELECT current_database() AS r_table_catalog,
    n.nspname AS r_table_schema,
    c.relname AS r_table_name,
    a.attname AS r_raster_column,
    COALESCE(_raster_constraint_info_srid(n.nspname, c.relname, a.attname), ( SELECT st_srid('010100000000000000000000000000000000000000'::geometry) AS st_srid)) AS srid,
    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'x'::bpchar) AS scale_x,
    _raster_constraint_info_scale(n.nspname, c.relname, a.attname, 'y'::bpchar) AS scale_y,
    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'width'::text) AS blocksize_x,
    _raster_constraint_info_blocksize(n.nspname, c.relname, a.attname, 'height'::text) AS blocksize_y,
    COALESCE(_raster_constraint_info_alignment(n.nspname, c.relname, a.attname), false) AS same_alignment,
    COALESCE(_raster_constraint_info_regular_blocking(n.nspname, c.relname, a.attname), false) AS regular_blocking,
    _raster_constraint_info_num_bands(n.nspname, c.relname, a.attname) AS num_bands,
    _raster_constraint_info_pixel_types(n.nspname, c.relname, a.attname) AS pixel_types,
    _raster_constraint_info_nodata_values(n.nspname, c.relname, a.attname) AS nodata_values,
    _raster_constraint_info_out_db(n.nspname, c.relname, a.attname) AS out_db,
    _raster_constraint_info_extent(n.nspname, c.relname, a.attname) AS extent
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n
  WHERE (((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind)::text = ANY ((ARRAY['r'::character(1), 'v'::character(1), 'm'::character(1), 'f'::character(1)])::text[]))) AND (NOT pg_is_other_temp_schema(c.relnamespace)));]]></view_script>
			<column name="blocksize_x" type="integer" />
			<column name="blocksize_y" type="integer" />
			<column name="extent" type="geometry" />
			<column name="nodata_values" type="_float8" />
			<column name="num_bands" type="integer" />
			<column name="out_db" type="_bool" />
			<column name="pixel_types" type="_text" />
			<column name="r_raster_column" type="name" />
			<column name="r_table_catalog" type="name" />
			<column name="r_table_name" type="name" />
			<column name="r_table_schema" type="name" />
			<column name="regular_blocking" type="bool" />
			<column name="same_alignment" type="bool" />
			<column name="scale_x" type="float8" />
			<column name="scale_y" type="float8" />
			<column name="srid" type="integer" />
		</view>
		<view name="raster_overviews" >
			<view_script><![CDATA[ SELECT current_database() AS o_table_catalog,
    n.nspname AS o_table_schema,
    c.relname AS o_table_name,
    a.attname AS o_raster_column,
    current_database() AS r_table_catalog,
    (split_part(split_part(s.consrc, '''::name'::text, 1), ''''::text, 2))::name AS r_table_schema,
    (split_part(split_part(s.consrc, '''::name'::text, 2), ''''::text, 2))::name AS r_table_name,
    (split_part(split_part(s.consrc, '''::name'::text, 3), ''''::text, 2))::name AS r_raster_column,
    (btrim(split_part(s.consrc, ','::text, 2)))::integer AS overview_factor
   FROM pg_class c,
    pg_attribute a,
    pg_type t,
    pg_namespace n,
    pg_constraint s
  WHERE ((((((((((t.typname = 'raster'::name) AND (a.attisdropped = false)) AND (a.atttypid = t.oid)) AND (a.attrelid = c.oid)) AND (c.relnamespace = n.oid)) AND ((c.relkind)::text = ANY ((ARRAY['r'::character(1), 'v'::character(1), 'm'::character(1), 'f'::character(1)])::text[]))) AND (s.connamespace = n.oid)) AND (s.conrelid = c.oid)) AND (s.consrc ~~ '%_overview_constraint(%'::text)) AND (NOT pg_is_other_temp_schema(c.relnamespace)));]]></view_script>
			<column name="o_raster_column" type="name" />
			<column name="o_table_catalog" type="name" />
			<column name="o_table_name" type="name" />
			<column name="o_table_schema" type="name" />
			<column name="overview_factor" type="integer" />
			<column name="r_raster_column" type="name" />
			<column name="r_table_catalog" type="name" />
			<column name="r_table_name" type="name" />
			<column name="r_table_schema" type="name" />
		</view>
		<function name="_add_overview_constraint" id="Function_1d4b2590" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_overview_constraint(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, factor integer)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_overview_' || $3;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_overview_constraint(' || quote_ident($3)
			|| ',' || $7
			|| ',' || quote_literal($4)
			|| ',' || quote_literal($5)
			|| ',' || quote_literal($6)
			|| '))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint" id="Function_6bb265e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint(cn name, sql text)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	BEGIN
		BEGIN
			EXECUTE sql;
		EXCEPTION
			WHEN duplicate_object THEN
				RAISE NOTICE 'The constraint "%" already exists.  To replace the existing constraint, delete the constraint and call ApplyRasterConstraints again', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to add constraint: %', cn;
				RAISE NOTICE 'SQL used for failed constraint: %', sql;
				RAISE NOTICE 'Returned error message: %', SQLERRM;
				RETURN FALSE;
		END;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_alignment" id="Function_cae3147" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_same_alignment_' || $3;
		sql := 'SELECT st_makeemptyraster(1, 1, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid) FROM st_metadata((SELECT '
			|| quote_ident($3)
			|| ' FROM ' || fqtn || ' LIMIT 1))';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the alignment of a sample raster';
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_samealignment(' || quote_ident($3) || ', ''' || attr || '''::raster))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_blocksize" id="Function_24eb8d24" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attrset integer[];
		attr integer;
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_' || $4 || '_' || $3;
		sql := 'SELECT st_' || $4 || '('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' GROUP BY 1 ORDER BY count(*) DESC';
		BEGIN
			attrset := ARRAY[]::integer[];
			FOR attr IN EXECUTE sql LOOP
				attrset := attrset || attr;
			END LOOP;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the % of a sample raster', $4;
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_' || $4 || '('
			|| quote_ident($3)
			|| ') IN (' || array_to_string(attrset, ',') || '))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_coverage_tile" id="Function_1b10a538" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		_scalex double precision;
		_scaley double precision;
		_skewx double precision;
		_skewy double precision;
		_tilewidth integer;
		_tileheight integer;
		_alignment boolean;
		_covextent geometry;
		_covrast raster;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_coverage_tile_' || $3;
		-- metadata
		BEGIN
			sql := 'WITH foo AS (SELECT ST_Metadata(' || quote_ident($3) || ') AS meta, ST_ConvexHull(' || quote_ident($3) || ') AS hull FROM ' || fqtn || ') SELECT max((meta).scalex), max((meta).scaley), max((meta).skewx), max((meta).skewy), max((meta).width), max((meta).height), ST_Union(hull) FROM foo';
			EXECUTE sql INTO _scalex, _scaley, _skewx, _skewy, _tilewidth, _tileheight, _covextent;
		EXCEPTION WHEN OTHERS THEN
		END;
		-- rasterize extent
		BEGIN
			_covrast := ST_AsRaster(_covextent, _scalex, _scaley, '8BUI', 1, 0, NULL, NULL, _skewx, _skewy);
			IF _covrast IS NULL THEN
				RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint';
				RETURN FALSE;
			END IF;
			-- remove band
			_covrast := ST_MakeEmptyRaster(_covrast);
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to create coverage raster. Cannot add coverage tile constraint';
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' CHECK (st_iscoveragetile(' || quote_ident($3) || ', ''' || _covrast || '''::raster, ' || _tilewidth || ', ' || _tileheight || '))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_extent" id="Function_1aaff67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_max_extent_' || $3;
		sql := 'SELECT st_ashexewkb(st_union(st_convexhull('
			|| quote_ident($3)
			|| '))) FROM '
			|| fqtn;
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the extent of the raster column. Attempting memory efficient (slower) approach';
			sql := 'SELECT st_ashexewkb(st_memunion(st_convexhull('
				|| quote_ident($3)
				|| '))) FROM '
				|| fqtn;
			BEGIN
				EXECUTE sql INTO attr;
			EXCEPTION WHEN OTHERS THEN
				RAISE NOTICE 'Still unable to get the extent of the raster column. Cannot add extent constraint';
				RETURN FALSE;
			END;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_coveredby(st_convexhull('
			|| quote_ident($3)
			|| '), ''' || attr || '''::geometry))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_nodata_values" id="Function_14d05824" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_nodata_values_' || $3;
		sql := 'SELECT _raster_constraint_nodata_values(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the nodata values of a sample raster';
			RETURN FALSE;
		END IF;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_nodata_values(' || quote_ident($3)
			|| ')::numeric(16,10)[] = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS NULL THEN
				sql := sql || 'NULL';
			ELSE
				sql := sql || attr[x];
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::numeric(16,10)[])';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_num_bands" id="Function_381f964d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_num_bands_' || $3;
		sql := 'SELECT st_numbands(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the number of bands of a sample raster';
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_numbands(' || quote_ident($3)
			|| ') = ' || attr
			|| ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_out_db" id="Function_d15c560" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr boolean[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_out_db_' || $3;
		sql := 'SELECT _raster_constraint_out_db(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the out-of-database bands of a sample raster';
			RETURN FALSE;
		END IF;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_out_db(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			IF attr[x] IS FALSE THEN
				sql := sql || 'FALSE';
			ELSE
				sql := sql || 'TRUE';
			END IF;
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::boolean[])';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_pixel_types" id="Function_a1c1bb8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text[];
		max int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_pixel_types_' || $3;
		sql := 'SELECT _raster_constraint_pixel_types(' || quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END;
		max := array_length(attr, 1);
		IF max < 1 OR max IS NULL THEN
			RAISE NOTICE 'Unable to get the pixel types of a sample raster';
			RETURN FALSE;
		END IF;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (_raster_constraint_pixel_types(' || quote_ident($3)
			|| ') = ''{';
		FOR x in 1..max LOOP
			sql := sql || '"' || attr[x] || '"';
			IF x < max THEN
				sql := sql || ',';
			END IF;
		END LOOP;
		sql := sql || '}''::text[])';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_scale" id="Function_1cd33186" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr double precision;
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_scale' || $4 || '_' || $3;
		sql := 'SELECT st_scale' || $4 || '('
			|| quote_ident($3)
			|| ') FROM '
			|| fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the %-scale of a sample raster', upper($4);
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_scale' || $4 || '('
			|| quote_ident($3)
			|| ')::numeric(25,10) = (' || attr || ')::numeric(25,10))';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_spatially_unique" id="Function_17bdf70f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr text;
		meta record;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_spatially_unique_' || quote_ident($2) || '_'|| $3;
		sql := 'ALTER TABLE ' || fqtn ||
			' ADD CONSTRAINT ' || quote_ident(cn) ||
			' EXCLUDE ((' || quote_ident($3) || '::geometry) WITH =)';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_add_raster_constraint_srid" id="Function_6f47830" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._add_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
		cn name;
		sql text;
		attr int;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		cn := 'enforce_srid_' || $3;
		sql := 'SELECT st_srid('
			|| quote_ident($3)
			|| ') FROM ' || fqtn
			|| ' LIMIT 1';
		BEGIN
			EXECUTE sql INTO attr;
		EXCEPTION WHEN OTHERS THEN
			RAISE NOTICE 'Unable to get the SRID of a sample raster';
			RETURN FALSE;
		END;
		sql := 'ALTER TABLE ' || fqtn
			|| ' ADD CONSTRAINT ' || quote_ident(cn)
			|| ' CHECK (st_srid('
			|| quote_ident($3)
			|| ') = ' || attr || ')';
		RETURN _add_raster_constraint(cn, sql);
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_overview_constraint" id="Function_1daf7bdc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_overview_constraint(ovschema name, ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_overview_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint" id="Function_2c39b79a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint(rastschema name, rasttable name, cn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		fqtn text;
	BEGIN
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		BEGIN
			EXECUTE 'ALTER TABLE '
				|| fqtn
				|| ' DROP CONSTRAINT '
				|| quote_ident(cn);
			RETURN TRUE;
		EXCEPTION
			WHEN undefined_object THEN
				RAISE NOTICE 'The constraint "%" does not exist.  Skipping', cn;
			WHEN OTHERS THEN
				RAISE NOTICE 'Unable to drop constraint "%"', cn;
				RETURN FALSE;
		END;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_alignment" id="Function_2f7aa70c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_alignment(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_same_alignment_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_blocksize" id="Function_26a13870" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	BEGIN
		IF lower($4) != 'width' AND lower($4) != 'height' THEN
			RAISE EXCEPTION 'axis must be either "width" or "height"';
			RETURN FALSE;
		END IF;
		RETURN _drop_raster_constraint($1, $2, 'enforce_' || $4 || '_' || $3);
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_coverage_tile" id="Function_dda5ea2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_coverage_tile(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_coverage_tile_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_extent" id="Function_16a7f4ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_extent(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_max_extent_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_nodata_values" id="Function_36311641" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_nodata_values(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_nodata_values_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_num_bands" id="Function_7c166a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_num_bands(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_num_bands_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_out_db" id="Function_318b4196" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_out_db(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_out_db_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_pixel_types" id="Function_b13d504" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_pixel_types(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_pixel_types_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_regular_blocking" id="Function_35b450cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_regular_blocking(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_regular_blocking_' || $3) $function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_scale" id="Function_2faad816" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_scale(rastschema name, rasttable name, rastcolumn name, axis character)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	BEGIN
		IF lower($4) != 'x' AND lower($4) != 'y' THEN
			RAISE EXCEPTION 'axis must be either "x" or "y"';
			RETURN FALSE;
		END IF;
		RETURN _drop_raster_constraint($1, $2, 'enforce_scale' || $4 || '_' || $3);
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_spatially_unique" id="Function_8b6c63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_spatially_unique(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		cn text;
	BEGIN
		SELECT
			s.conname INTO cn
		FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
		WHERE n.nspname = $1
			AND c.relname = $2
			AND a.attname = $3
			AND a.attrelid = c.oid
			AND s.connamespace = n.oid
			AND s.conrelid = c.oid
			AND s.contype = 'x'
			AND 0::smallint = ANY (s.conkey)
			AND idx.indexrelid = s.conindid
			AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
			AND s.conexclop[1] = op.oid
			AND op.oprname = '=';
		RETURN _drop_raster_constraint($1, $2, cn); 
	END;
	$function$
]]></string>
		</function>
		<function name="_drop_raster_constraint_srid" id="Function_107293cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._drop_raster_constraint_srid(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _drop_raster_constraint($1, $2, 'enforce_srid_' || $3) $function$
]]></string>
		</function>
		<function name="_overview_constraint" id="Function_36c4e1b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._overview_constraint(ov raster, factor integer, refschema name, reftable name, refcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STABLE
AS $function$ SELECT COALESCE((SELECT TRUE FROM raster_columns WHERE r_table_catalog = current_database() AND r_table_schema = $3 AND r_table_name = $4 AND r_raster_column = $5), FALSE) $function$
]]></string>
		</function>
		<function name="_overview_constraint_info" id="Function_3ae23af7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._overview_constraint_info(ovschema name, ovtable name, ovcolumn name, OUT refschema name, OUT reftable name, OUT refcolumn name, OUT factor integer)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		split_part(split_part(s.consrc, '''::name', 1), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 2), '''', 2)::name,
		split_part(split_part(s.consrc, '''::name', 3), '''', 2)::name,
		trim(both from split_part(s.consrc, ',', 2))::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_overview_constraint(%'
	$function$
]]></string>
		</function>
		<function name="_postgis_deprecate" id="Function_31871abd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._postgis_deprecate(oldname text, newname text, version text)
 RETURNS void
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
  curver_text text;
BEGIN
  --
  -- Raises a NOTICE if it was deprecated in this version,
  -- a WARNING if in a previous version (only up to minor version checked)
  --
    curver_text := '2.1.7';
    IF split_part(curver_text,'.',1)::int > split_part(version,'.',1)::int OR
       ( split_part(curver_text,'.',1) = split_part(version,'.',1) AND
         split_part(curver_text,'.',2) != split_part(version,'.',2) )
    THEN
      RAISE WARNING '% signature was deprecated in %. Please use %', oldname, version, newname;
    ELSE
      RAISE DEBUG '% signature was deprecated in %. Please use %', oldname, version, newname;
    END IF;
END;
$function$
]]></string>
		</function>
		<function name="_postgis_join_selectivity" id="Function_2b1c2a12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._postgis_join_selectivity(regclass, text, regclass, text, text DEFAULT '2'::text)
 RETURNS double precision
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.1', $function$_postgis_gserialized_joinsel$function$
]]></string>
		</function>
		<function name="_postgis_selectivity" id="Function_39430dd2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._postgis_selectivity(tbl regclass, att_name text, geom geometry, mode text DEFAULT '2'::text)
 RETURNS double precision
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.1', $function$_postgis_gserialized_sel$function$
]]></string>
		</function>
		<function name="_postgis_stats" id="Function_350767f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._postgis_stats(tbl regclass, att_name text, text DEFAULT '2'::text)
 RETURNS text
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.1', $function$_postgis_gserialized_stats$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_alignment" id="Function_877c26b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_alignment(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_samealignment(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_blocksize" id="Function_14efbcb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_blocksize(rastschema name, rasttable name, rastcolumn name, axis text)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		CASE
			WHEN strpos(s.consrc, 'ANY (ARRAY[') > 0 THEN
				split_part((regexp_matches(s.consrc, E'ARRAY\\[(.*?){1}\\]'))[1], ',', 1)::integer
			ELSE
				replace(replace(split_part(s.consrc, '= ', 2), ')', ''), '(', '')::integer
			END
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_' || $4 || '(%= %';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_coverage_tile" id="Function_2530c72a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_coverage_tile(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_iscoveragetile(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_extent" id="Function_37065154" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_extent(rastschema name, rasttable name, rastcolumn name)
 RETURNS geometry
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(trim(split_part(s.consrc, ',', 2)), '::', 1))::geometry
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_coveredby(st_convexhull(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_nodata_values" id="Function_2399fb64" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_nodata_values(rastschema name, rasttable name, rastcolumn name)
 RETURNS double precision[]
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::double precision[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_nodata_values(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_num_bands" id="Function_45798" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_num_bands(rastschema name, rasttable name, rastcolumn name)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_numbands(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_out_db" id="Function_5fdb6a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_out_db(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean[]
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::boolean[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_out_db(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_pixel_types" id="Function_2783d2a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_pixel_types(rastschema name, rasttable name, rastcolumn name)
 RETURNS text[]
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		trim(both '''' from split_part(replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', ''), '::', 1))::text[]
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%_raster_constraint_pixel_types(%';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_regular_blocking" id="Function_13b2957a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_regular_blocking(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		covtile boolean;
		spunique boolean;
	BEGIN
		-- check existance of constraints
		-- coverage tile constraint
		covtile := COALESCE(_raster_constraint_info_coverage_tile($1, $2, $3), FALSE);
		-- spatially unique constraint
		spunique := COALESCE(_raster_constraint_info_spatially_unique($1, $2, $3), FALSE);
		RETURN (covtile AND spunique);
	END;
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_scale" id="Function_1954aabc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_scale(rastschema name, rasttable name, rastcolumn name, axis character)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		replace(replace(split_part(split_part(s.consrc, ' = ', 2), '::', 1), ')', ''), '(', '')::double precision
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_scale' || $4 || '(% = %';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_spatially_unique" id="Function_31a18421" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_spatially_unique(rastschema name, rasttable name, rastcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		TRUE
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s, pg_index idx, pg_operator op
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND s.contype = 'x'
		AND 0::smallint = ANY (s.conkey)
		AND idx.indexrelid = s.conindid
		AND pg_get_indexdef(idx.indexrelid, 1, true) LIKE '(' || quote_ident($3) || '::geometry)'
		AND s.conexclop[1] = op.oid
		AND op.oprname = '=';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_info_srid" id="Function_331ed3fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_info_srid(rastschema name, rasttable name, rastcolumn name)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT
		replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
	FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
	WHERE n.nspname = $1
		AND c.relname = $2
		AND a.attname = $3
		AND a.attrelid = c.oid
		AND s.connamespace = n.oid
		AND s.conrelid = c.oid
		AND a.attnum = ANY (s.conkey)
		AND s.consrc LIKE '%st_srid(% = %';
	$function$
]]></string>
		</function>
		<function name="_raster_constraint_nodata_values" id="Function_33fc3ab3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_nodata_values(rast raster)
 RETURNS double precision[]
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT array_agg(nodatavalue)::double precision[] FROM st_bandmetadata($1, ARRAY[]::int[]); $function$
]]></string>
		</function>
		<function name="_raster_constraint_out_db" id="Function_c42091c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_out_db(rast raster)
 RETURNS boolean[]
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT array_agg(isoutdb)::boolean[] FROM st_bandmetadata($1, ARRAY[]::int[]); $function$
]]></string>
		</function>
		<function name="_raster_constraint_pixel_types" id="Function_223b0d6f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._raster_constraint_pixel_types(rast raster)
 RETURNS text[]
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT array_agg(pixeltype)::text[] FROM st_bandmetadata($1, ARRAY[]::int[]); $function$
]]></string>
		</function>
		<function name="_st_3ddfullywithin" id="Function_5c8e38a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_dfullywithin3d$function$
]]></string>
		</function>
		<function name="_st_3ddwithin" id="Function_fe4b717" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_3ddwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_dwithin3d$function$
]]></string>
		</function>
		<function name="_st_3dintersects" id="Function_2ff2d355" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_3dintersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$intersects3d$function$
]]></string>
		</function>
		<function name="_st_asgeojson" id="Function_c99d309" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asgeojson(integer, geometry, integer, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asGeoJson$function$
CREATE OR REPLACE FUNCTION public._st_asgeojson(integer, geography, integer, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_as_geojson$function$
]]></string>
		</function>
		<function name="_st_asgeojson_001" id="Function_10c25d9f" isSystem="false" />
		<function name="_st_asgml" id="Function_1bc02992" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asgml(integer, geometry, integer, integer, text, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$LWGEOM_asGML$function$
CREATE OR REPLACE FUNCTION public._st_asgml(integer, geography, integer, integer, text, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$geography_as_gml$function$
]]></string>
		</function>
		<function name="_st_asgml_001" id="Function_aed51c6" isSystem="false" />
		<function name="_st_askml" id="Function_230c13a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_askml(integer, geometry, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$LWGEOM_asKML$function$
CREATE OR REPLACE FUNCTION public._st_askml(integer, geography, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$geography_as_kml$function$
]]></string>
		</function>
		<function name="_st_askml_001" id="Function_9a7a7b9" isSystem="false" />
		<function name="_st_aspect4ma" id="Function_3a99cbd4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_aspect4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		x integer;
		y integer;
		z integer;
		_width double precision;
		_height double precision;
		_units text;
		dz_dx double precision;
		dz_dy double precision;
		aspect double precision;
		halfpi double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;
		IF array_length(userargs, 1) < 3 THEN
			RAISE EXCEPTION 'At least three elements must be provided for the third parameter';
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		_width := userargs[1]::double precision;
		_height := userargs[2]::double precision;
		_units := userargs[3];
		


		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;
		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3]));
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1]));
		-- aspect is flat
		IF abs(dz_dx) = 0::double precision AND abs(dz_dy) = 0::double precision THEN
			RETURN -1;
		END IF;
		-- aspect is in radians
		aspect := atan2(dz_dy, -dz_dx);
		-- north = 0, pi/2 = east, 3pi/2 = west
		halfpi := pi() / 2.0;
		IF aspect > halfpi THEN
			aspect := (5.0 * halfpi) - aspect;
		ELSE
			aspect := halfpi - aspect;
		END IF;
		IF aspect = 2 * pi() THEN
			aspect := 0.;
		END IF;
		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- radians
			WHEN 'rad' THEN
				RETURN aspect;
			-- degrees (default)
			ELSE
				RETURN degrees(aspect);
		END CASE;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_asraster" id="Function_16ae25c4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asraster(geom geometry, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, width integer DEFAULT 0, height integer DEFAULT 0, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_asRaster$function$
]]></string>
		</function>
		<function name="_st_asx3d" id="Function_2d0d9b72" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_asx3d(integer, geometry, integer, integer, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$LWGEOM_asX3D$function$
]]></string>
		</function>
		<function name="_st_bestsrid" id="Function_344d000e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_bestsrid(geography)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_BestSRID($1,$1)$function$
CREATE OR REPLACE FUNCTION public._st_bestsrid(geography, geography)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_bestsrid$function$
]]></string>
		</function>
		<function name="_st_bestsrid_001" id="Function_1cf3fa7f" isSystem="false" />
		<function name="_st_buffer" id="Function_23996fcc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_buffer(geometry, double precision, cstring)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$buffer$function$
]]></string>
		</function>
		<function name="_st_clip" id="Function_1f133c20" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_clip$function$
]]></string>
		</function>
		<function name="_st_colormap" id="Function_2280052e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_colormap(rast raster, nband integer, colormap text, method text DEFAULT 'INTERPOLATE'::text)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_colorMap$function$
]]></string>
		</function>
		<function name="_st_concavehull" id="Function_1b5a83d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_concavehull(param_inputgeom geometry)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE     
	vexhull GEOMETRY;
	var_resultgeom geometry;
	var_inputgeom geometry;
	vexring GEOMETRY;
	cavering GEOMETRY;
	cavept geometry[];
	seglength double precision;
	var_tempgeom geometry;
	scale_factor integer := 1;
	i integer;
	
	BEGIN
		-- First compute the ConvexHull of the geometry
		vexhull := ST_ConvexHull(param_inputgeom);
		var_inputgeom := param_inputgeom;
		--A point really has no concave hull
		IF ST_GeometryType(vexhull) = 'ST_Point' OR ST_GeometryType(vexHull) = 'ST_LineString' THEN
			RETURN vexhull;
		END IF;
		-- convert the hull perimeter to a linestring so we can manipulate individual points
		vexring := CASE WHEN ST_GeometryType(vexhull) = 'ST_LineString' THEN vexhull ELSE ST_ExteriorRing(vexhull) END;
		IF abs(ST_X(ST_PointN(vexring,1))) < 1 THEN --scale the geometry to prevent stupid precision errors - not sure it works so make low for now
			scale_factor := 100;
			vexring := ST_Scale(vexring, scale_factor,scale_factor);
			var_inputgeom := ST_Scale(var_inputgeom, scale_factor, scale_factor);
			--RAISE NOTICE 'Scaling';
		END IF;
		seglength := ST_Length(vexring)/least(ST_NPoints(vexring)*2,1000) ;
		vexring := ST_Segmentize(vexring, seglength);
		-- find the point on the original geom that is closest to each point of the convex hull and make a new linestring out of it.
		cavering := ST_Collect(
			ARRAY(
				SELECT 
					ST_ClosestPoint(var_inputgeom, pt ) As the_geom
					FROM (
						SELECT  ST_PointN(vexring, n ) As pt, n
							FROM 
							generate_series(1, ST_NPoints(vexring) ) As n
						) As pt
				
				)
			)
		; 
		
		var_resultgeom := ST_MakeLine(geom) 
			FROM ST_Dump(cavering) As foo;
		IF ST_IsSimple(var_resultgeom) THEN
			var_resultgeom := ST_MakePolygon(var_resultgeom);
			--RAISE NOTICE 'is Simple: %', var_resultgeom;
		ELSE 
			--RAISE NOTICE 'is not Simple: %', var_resultgeom;
			var_resultgeom := ST_ConvexHull(var_resultgeom);
		END IF;
		
		IF scale_factor > 1 THEN -- scale the result back
			var_resultgeom := ST_Scale(var_resultgeom, 1/scale_factor, 1/scale_factor);
		END IF;
		RETURN var_resultgeom;
	
	END;
$function$
]]></string>
		</function>
		<function name="_st_contains" id="Function_1dab77b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$contains$function$
CREATE OR REPLACE FUNCTION public._st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_contains$function$
]]></string>
		</function>
		<function name="_st_contains_001" id="Function_3577903f" isSystem="false" />
		<function name="_st_containsproperly" id="Function_396a8cc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_containsproperly(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$containsproperly$function$
CREATE OR REPLACE FUNCTION public._st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_containsProperly$function$
]]></string>
		</function>
		<function name="_st_containsproperly_001" id="Function_1499eb4c" isSystem="false" />
		<function name="_st_convertarray4ma" id="Function_10898e7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_convertarray4ma(value double precision[])
 RETURNS double precision[]
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		_value double precision[][][];
		x int;
		y int;
	BEGIN
		IF array_ndims(value) != 2 THEN
			RAISE EXCEPTION 'Function parameter must be a 2-dimension array';
		END IF;
		_value := array_fill(NULL::double precision, ARRAY[1, array_length(value, 1), array_length(value, 2)]::int[], ARRAY[1, array_lower(value, 1), array_lower(value, 2)]::int[]);
		-- row
		FOR y IN array_lower(value, 1)..array_upper(value, 1) LOOP
			-- column
			FOR x IN array_lower(value, 2)..array_upper(value, 2) LOOP
				_value[1][y][x] = value[y][x];
			END LOOP;
		END LOOP;
		RETURN _value;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_count" id="Function_4f62a41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_count(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)
 RETURNS bigint
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		rtn bigint;
	BEGIN
		IF exclude_nodata_value IS FALSE THEN
			SELECT width * height INTO rtn FROM ST_Metadata(rast);
		ELSE
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4);
		END IF;
		RETURN rtn;
	END;
	$function$
CREATE OR REPLACE FUNCTION public._st_count(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1)
 RETURNS bigint
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		curs refcursor;
		ctable text;
		ccolumn text;
		rast raster;
		rtn bigint;
		tmp bigint;
	BEGIN
		-- nband
		IF nband < 1 THEN
			RAISE WARNING 'Invalid band index (must use 1-based). Returning NULL';
			RETURN NULL;
		END IF;
		-- sample percent
		IF sample_percent < 0 OR sample_percent > 1 THEN
			RAISE WARNING 'Invalid sample percentage (must be between 0 and 1). Returning NULL';
			RETURN NULL;
		END IF;
		-- exclude_nodata_value IS TRUE
		IF exclude_nodata_value IS TRUE THEN
			SELECT count INTO rtn FROM _st_summarystats($1, $2, $3, $4, $5);
			RETURN rtn;
		END IF;
		-- clean rastertable and rastercolumn
		ctable := quote_ident(rastertable);
		ccolumn := quote_ident(rastercolumn);
		BEGIN
			OPEN curs FOR EXECUTE 'SELECT '
					|| ccolumn
					|| ' FROM '
					|| ctable
					|| ' WHERE '
					|| ccolumn
					|| ' IS NOT NULL';
		EXCEPTION
			WHEN OTHERS THEN
				RAISE WARNING 'Invalid table or column name. Returning NULL';
				RETURN NULL;
		END;
		rtn := 0;
		LOOP
			FETCH curs INTO rast;
			EXIT WHEN NOT FOUND;
			SELECT (width * height) INTO tmp FROM ST_Metadata(rast);
			rtn := rtn + tmp;
		END LOOP;
		CLOSE curs;
		RETURN rtn;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_count_001" id="Function_2dcae48c" isSystem="false" />
		<function name="_st_coveredby" id="Function_22ad5b31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_coveredby(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$coveredby$function$
CREATE OR REPLACE FUNCTION public._st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_coveredby$function$
]]></string>
		</function>
		<function name="_st_coveredby_001" id="Function_37ee13ce" isSystem="false" />
		<function name="_st_covers" id="Function_35c55988" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_covers(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$covers$function$
CREATE OR REPLACE FUNCTION public._st_covers(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_covers$function$
CREATE OR REPLACE FUNCTION public._st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_covers$function$
]]></string>
		</function>
		<function name="_st_covers_001" id="Function_364173e" isSystem="false" />
		<function name="_st_covers_002" id="Function_2dcdfb1a" isSystem="false" />
		<function name="_st_crosses" id="Function_783ce40" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_crosses(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$crosses$function$
]]></string>
		</function>
		<function name="_st_dfullywithin" id="Function_b12c92c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_dfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_dfullywithin$function$
CREATE OR REPLACE FUNCTION public._st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_dfullywithin$function$
]]></string>
		</function>
		<function name="_st_dfullywithin_001" id="Function_19ac1993" isSystem="false" />
		<function name="_st_distance" id="Function_3098fa7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_distance(geography, geography, double precision, boolean)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_distance$function$
]]></string>
		</function>
		<function name="_st_distancetree" id="Function_315e944a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_distancetree(geography, geography)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_DistanceTree($1, $2, 0.0, true)$function$
CREATE OR REPLACE FUNCTION public._st_distancetree(geography, geography, double precision, boolean)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_distance_tree$function$
]]></string>
		</function>
		<function name="_st_distancetree_001" id="Function_1ca79d22" isSystem="false" />
		<function name="_st_distanceuncached" id="Function_87c517e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_distanceuncached(geography, geography)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_DistanceUnCached($1, $2, 0.0, true)$function$
CREATE OR REPLACE FUNCTION public._st_distanceuncached(geography, geography, boolean)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_DistanceUnCached($1, $2, 0.0, $3)$function$
CREATE OR REPLACE FUNCTION public._st_distanceuncached(geography, geography, double precision, boolean)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_distance_uncached$function$
]]></string>
		</function>
		<function name="_st_distanceuncached_001" id="Function_fce4d38" isSystem="false" />
		<function name="_st_distanceuncached_002" id="Function_cad1413" isSystem="false" />
		<function name="_st_dumppoints" id="Function_221f1071" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_dumppoints(the_geom geometry, cur_path integer[])
 RETURNS SETOF geometry_dump
 LANGUAGE plpgsql
AS $function$
DECLARE
  tmp geometry_dump;
  tmp2 geometry_dump;
  nb_points integer;
  nb_geom integer;
  i integer;
  j integer;
  g geometry;
  
BEGIN
  
  -- RAISE DEBUG '%,%', cur_path, ST_GeometryType(the_geom);
  -- Special case collections : iterate and return the DumpPoints of the geometries
  IF (ST_IsCollection(the_geom)) THEN
 
    i = 1;
    FOR tmp2 IN SELECT (ST_Dump(the_geom)).* LOOP
      FOR tmp IN SELECT * FROM _ST_DumpPoints(tmp2.geom, cur_path || tmp2.path) LOOP
	    RETURN NEXT tmp;
      END LOOP;
      i = i + 1;
      
    END LOOP;
    RETURN;
  END IF;
  
  -- Special case (POLYGON) : return the points of the rings of a polygon
  IF (ST_GeometryType(the_geom) = 'ST_Polygon') THEN
    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    j := ST_NumInteriorRings(the_geom);
    FOR i IN 1..j LOOP
        FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_InteriorRingN(the_geom, i), cur_path || ARRAY[i+1]) LOOP
          RETURN NEXT tmp;
        END LOOP;
    END LOOP;
    
    RETURN;
  END IF;
  -- Special case (TRIANGLE) : return the points of the external rings of a TRIANGLE
  IF (ST_GeometryType(the_geom) = 'ST_Triangle') THEN
    FOR tmp IN SELECT * FROM _ST_DumpPoints(ST_ExteriorRing(the_geom), cur_path || ARRAY[1]) LOOP
      RETURN NEXT tmp;
    END LOOP;
    
    RETURN;
  END IF;
    
  -- Special case (POINT) : return the point
  IF (ST_GeometryType(the_geom) = 'ST_Point') THEN
    tmp.path = cur_path || ARRAY[1];
    tmp.geom = the_geom;
    RETURN NEXT tmp;
    RETURN;
  END IF;

  -- Use ST_NumPoints rather than ST_NPoints to have a NULL value if the_geom isn't
  -- a LINESTRING, CIRCULARSTRING.
  SELECT ST_NumPoints(the_geom) INTO nb_points;
  -- This should never happen
  IF (nb_points IS NULL) THEN
    RAISE EXCEPTION 'Unexpected error while dumping geometry %', ST_AsText(the_geom);
  END IF;
  FOR i IN 1..nb_points LOOP
    tmp.path = cur_path || ARRAY[i];
    tmp.geom := ST_PointN(the_geom, i);
    RETURN NEXT tmp;
  END LOOP;
   
END
$function$
]]></string>
		</function>
		<function name="_st_dwithin" id="Function_1ac20f37" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_dwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_dwithin$function$
CREATE OR REPLACE FUNCTION public._st_dwithin(geography, geography, double precision, boolean)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_dwithin$function$
CREATE OR REPLACE FUNCTION public._st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_dwithin$function$
]]></string>
		</function>
		<function name="_st_dwithin_001" id="Function_9fa4a7b" isSystem="false" />
		<function name="_st_dwithin_002" id="Function_351ed257" isSystem="false" />
		<function name="_st_dwithinuncached" id="Function_2d1324fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_dwithinuncached(geography, geography, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithinUnCached($1, $2, $3, true)$function$
CREATE OR REPLACE FUNCTION public._st_dwithinuncached(geography, geography, double precision, boolean)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_dwithin_uncached$function$
]]></string>
		</function>
		<function name="_st_dwithinuncached_001" id="Function_1a98fa0e" isSystem="false" />
		<function name="_st_equals" id="Function_300ae7c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_Equals$function$
]]></string>
		</function>
		<function name="_st_expand" id="Function_37dc916c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_expand(geography, double precision)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_expand$function$
]]></string>
		</function>
		<function name="_st_gdalwarp" id="Function_1cee22cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_gdalwarp(rast raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, srid integer DEFAULT NULL::integer, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, width integer DEFAULT NULL::integer, height integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_GDALWarp$function$
]]></string>
		</function>
		<function name="_st_geomfromgml" id="Function_349fde2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_geomfromgml(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$geom_from_gml$function$
]]></string>
		</function>
		<function name="_st_hillshade4ma" id="Function_125e2186" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_hillshade4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_azimuth double precision;
		_altitude double precision;
		_bright double precision;
		_scale double precision;
		dz_dx double precision;
		dz_dy double precision;
		azimuth double precision;
		zenith double precision;
		slope double precision;
		aspect double precision;
		shade double precision;
		_value double precision[][][];
		ndims int;
		z int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;
		IF array_length(userargs, 1) < 8 THEN
			RAISE EXCEPTION 'At least eight elements must be provided for the third parameter';
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_azimuth := userargs[5]::double precision;
		_altitude := userargs[6]::double precision;
		_bright := userargs[7]::double precision;
		_scale := userargs[8]::double precision;
		-- check that pixel is not edge pixel
		IF (pos[1][1] = 1 OR pos[1][2] = 1) OR (pos[1][1] = _width OR pos[1][2] = _height) THEN
			RETURN NULL;
		END IF;
		-- clamp azimuth
		IF _azimuth < 0. THEN
			RAISE NOTICE 'Clamping provided azimuth value % to 0', _azimuth;
			_azimuth := 0.;
		ELSEIF _azimuth >= 360. THEN
			RAISE NOTICE 'Converting provided azimuth value % to be between 0 and 360', _azimuth;
			_azimuth := _azimuth - (360. * floor(_azimuth / 360.));
		END IF;
		azimuth := 360. - _azimuth + 90.;
		IF azimuth >= 360. THEN
			azimuth := azimuth - 360.;
		END IF;
		azimuth := radians(azimuth);
		--RAISE NOTICE 'azimuth = %', azimuth;
		-- clamp altitude
		IF _altitude < 0. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 0', _altitude;
			_altitude := 0.;
		ELSEIF _altitude > 90. THEN
			RAISE NOTICE 'Clamping provided altitude value % to 90', _altitude;
			_altitude := 90.;
		END IF;
		zenith := radians(90. - _altitude);
		--RAISE NOTICE 'zenith = %', zenith;
		-- clamp bright
		IF _bright < 0. THEN
			RAISE NOTICE 'Clamping provided bright value % to 0', _bright;
			_bright := 0.;
		ELSEIF _bright > 255. THEN
			RAISE NOTICE 'Clamping provided bright value % to 255', _bright;
			_bright := 255.;
		END IF;
		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / (8 * _pixheight);
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / (8 * _pixwidth);
		slope := atan(sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / _scale);
		IF dz_dx != 0. THEN
			aspect := atan2(dz_dy, -dz_dx);
			IF aspect < 0. THEN
				aspect := aspect + (2.0 * pi());
			END IF;
		ELSE
			IF dz_dy > 0. THEN
				aspect := pi() / 2.;
			ELSEIF dz_dy < 0. THEN
				aspect := (2. * pi()) - (pi() / 2.);
			-- set to pi as that is the expected PostgreSQL answer in Linux
			ELSE
				aspect := pi();
			END IF;
		END IF;
		shade := _bright * ((cos(zenith) * cos(slope)) + (sin(zenith) * sin(slope) * cos(azimuth - aspect)));
		IF shade < 0. THEN
			shade := 0;
		END IF;
		RETURN shade;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_histogram" id="Function_32b0067" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_histogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_histogramCoverage$function$
CREATE OR REPLACE FUNCTION public._st_histogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, min double precision DEFAULT NULL::double precision, max double precision DEFAULT NULL::double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_histogram$function$
]]></string>
		</function>
		<function name="_st_histogram_001" id="Function_bef407" isSystem="false" />
		<function name="_st_intersects" id="Function_2f4077e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_intersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$intersects$function$
CREATE OR REPLACE FUNCTION public._st_intersects(geom geometry, rast raster, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE COST 1000
AS $function$
	DECLARE
		hasnodata boolean := TRUE;
		nodata float8 := 0.0;
		convexhull geometry;
		geomintersect geometry;
		x1w double precision := 0.0;
		x2w double precision := 0.0;
		y1w double precision := 0.0;
		y2w double precision := 0.0;
		x1 integer := 0;
		x2 integer := 0;
		x3 integer := 0;
		x4 integer := 0;
		y1 integer := 0;
		y2 integer := 0;
		y3 integer := 0;
		y4 integer := 0;
		x integer := 0;
		y integer := 0;
		xinc integer := 0;
		yinc integer := 0;
		pixelval double precision;
		bintersect boolean := FALSE;
		gtype text;
		scale float8;
		w int;
		h int;
	BEGIN
		IF ST_SRID(rast) != ST_SRID(geom) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		convexhull := ST_ConvexHull(rast);
		IF nband IS NOT NULL THEN
			SELECT CASE WHEN bmd.nodatavalue IS NULL THEN FALSE ELSE NULL END INTO hasnodata FROM ST_BandMetaData(rast, nband) AS bmd;
		END IF;
		IF ST_Intersects(geom, convexhull) IS NOT TRUE THEN
			RETURN FALSE;
		ELSEIF nband IS NULL OR hasnodata IS FALSE THEN
			RETURN TRUE;
		END IF;
		-- Get the intersection between with the geometry.
		-- We will search for withvalue pixel only in this area.
		geomintersect := st_intersection(geom, convexhull);
--RAISE NOTICE 'geomintersect=%', st_astext(geomintersect);
		-- If the intersection is empty, return false
		IF st_isempty(geomintersect) THEN
			RETURN FALSE;
		END IF;
		-- We create a minimalistic buffer around the intersection in order to scan every pixels
		-- that would touch the edge or intersect with the geometry
		SELECT sqrt(scalex * scalex + skewy * skewy), width, height INTO scale, w, h FROM ST_Metadata(rast);
		IF scale != 0 THEN
			geomintersect := st_buffer(geomintersect, scale / 1000000);
		END IF;
--RAISE NOTICE 'geomintersect2=%', st_astext(geomintersect);
		-- Find the world coordinates of the bounding box of the intersecting area
		x1w := st_xmin(geomintersect);
		y1w := st_ymin(geomintersect);
		x2w := st_xmax(geomintersect);
		y2w := st_ymax(geomintersect);
		nodata := st_bandnodatavalue(rast, nband);
--RAISE NOTICE 'x1w=%, y1w=%, x2w=%, y2w=%', x1w, y1w, x2w, y2w;
		-- Convert world coordinates to raster coordinates
		x1 := st_worldtorastercoordx(rast, x1w, y1w);
		y1 := st_worldtorastercoordy(rast, x1w, y1w);
		x2 := st_worldtorastercoordx(rast, x2w, y1w);
		y2 := st_worldtorastercoordy(rast, x2w, y1w);
		x3 := st_worldtorastercoordx(rast, x1w, y2w);
		y3 := st_worldtorastercoordy(rast, x1w, y2w);
		x4 := st_worldtorastercoordx(rast, x2w, y2w);
		y4 := st_worldtorastercoordy(rast, x2w, y2w);
--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%, x3=%, y3=%, x4=%, y4=%', x1, y1, x2, y2, x3, y3, x4, y4;
		-- Order the raster coordinates for the upcoming FOR loop.
		x1 := int4smaller(int4smaller(int4smaller(x1, x2), x3), x4);
		y1 := int4smaller(int4smaller(int4smaller(y1, y2), y3), y4);
		x2 := int4larger(int4larger(int4larger(x1, x2), x3), x4);
		y2 := int4larger(int4larger(int4larger(y1, y2), y3), y4);
		-- Make sure the range is not lower than 1.
		-- This can happen when world coordinate are exactly on the left border
		-- of the raster and that they do not span on more than one pixel.
		x1 := int4smaller(int4larger(x1, 1), w);
		y1 := int4smaller(int4larger(y1, 1), h);
		-- Also make sure the range does not exceed the width and height of the raster.
		-- This can happen when world coordinate are exactly on the lower right border
		-- of the raster.
		x2 := int4smaller(x2, w);
		y2 := int4smaller(y2, h);
--RAISE NOTICE 'x1=%, y1=%, x2=%, y2=%', x1, y1, x2, y2;
		-- Search exhaustively for withvalue pixel on a moving 3x3 grid
		-- (very often more efficient than searching on a mere 1x1 grid)
		FOR xinc in 0..2 LOOP
			FOR yinc in 0..2 LOOP
				FOR x IN x1+xinc..x2 BY 3 LOOP
					FOR y IN y1+yinc..y2 BY 3 LOOP
						-- Check first if the pixel intersects with the geometry. Often many won't.
						bintersect := NOT st_isempty(st_intersection(st_pixelaspolygon(rast, x, y), geom));
						IF bintersect THEN
							-- If the pixel really intersects, check its value. Return TRUE if with value.
							pixelval := st_value(rast, nband, x, y);
							IF pixelval != nodata THEN
								RETURN TRUE;
							END IF;
						END IF;
					END LOOP;
				END LOOP;
			END LOOP;
		END LOOP;
		RETURN FALSE;
	END;
	$function$
CREATE OR REPLACE FUNCTION public._st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_intersects$function$
]]></string>
		</function>
		<function name="_st_intersects_001" id="Function_274e38c8" isSystem="false" />
		<function name="_st_intersects_002" id="Function_173fa831" isSystem="false" />
		<function name="_st_linecrossingdirection" id="Function_360b05e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_linecrossingdirection(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_LineCrossingDirection$function$
]]></string>
		</function>
		<function name="_st_longestline" id="Function_1b0d3018" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_longestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_longestline2d$function$
]]></string>
		</function>
		<function name="_st_mapalgebra" id="Function_37bf8ce3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_mapalgebra(rastbandargset rastbandarg[], expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_nMapAlgebraExpr$function$
CREATE OR REPLACE FUNCTION public._st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, distancex integer DEFAULT 0, distancey integer DEFAULT 0, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_nMapAlgebra$function$
]]></string>
		</function>
		<function name="_st_mapalgebra_001" id="Function_26e146bb" isSystem="false" />
		<function name="_st_maxdistance" id="Function_343fe29b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_maxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_maxdistance2d_linestring$function$
]]></string>
		</function>
		<function name="_st_neighborhood" id="Function_32eb5d92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_neighborhood$function$
]]></string>
		</function>
		<function name="_st_orderingequals" id="Function_24fc5b9f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_orderingequals(geometrya geometry, geometryb geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_same$function$
]]></string>
		</function>
		<function name="_st_overlaps" id="Function_11254870" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$overlaps$function$
CREATE OR REPLACE FUNCTION public._st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_overlaps$function$
]]></string>
		</function>
		<function name="_st_overlaps_001" id="Function_9846381" isSystem="false" />
		<function name="_st_pixelaspolygons" id="Function_1454d37c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_pixelaspolygons(rast raster, band integer DEFAULT 1, columnx integer DEFAULT NULL::integer, rowy integer DEFAULT NULL::integer, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_getPixelPolygons$function$
]]></string>
		</function>
		<function name="_st_pointoutside" id="Function_2bbfca3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_pointoutside(geography)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_point_outside$function$
]]></string>
		</function>
		<function name="_st_quantile" id="Function_2d2b8875" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_quantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_quantile$function$
CREATE OR REPLACE FUNCTION public._st_quantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_quantileCoverage$function$
]]></string>
		</function>
		<function name="_st_quantile_001" id="Function_3278c1cb" isSystem="false" />
		<function name="_st_rastertoworldcoord" id="Function_33727043" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_rastertoworldcoord(rast raster, columnx integer DEFAULT NULL::integer, rowy integer DEFAULT NULL::integer, OUT longitude double precision, OUT latitude double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_rasterToWorldCoord$function$
]]></string>
		</function>
		<function name="_st_reclass" id="Function_61258a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_reclass(rast raster, VARIADIC reclassargset reclassarg[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_reclass$function$
]]></string>
		</function>
		<function name="_st_roughness4ma" id="Function_6ba9034" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_roughness4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		x integer;
		y integer;
		z integer;
		minimum double precision;
		maximum double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;
		minimum := _value[z][1][1];
		maximum := _value[z][1][1];
		FOR Y IN 1..3 LOOP
		    FOR X IN 1..3 LOOP
		    	 IF _value[z][y][x] < minimum THEN
			    minimum := _value[z][y][x];
			 ELSIF _value[z][y][x] > maximum THEN
			    maximum := _value[z][y][x];
			 END IF;
		    END LOOP;
		END LOOP;
		RETURN maximum - minimum;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_samealignment_finalfn" id="Function_35e3f934" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_samealignment_finalfn(agg agg_samealignment)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT $1.aligned $function$
]]></string>
		</function>
		<function name="_st_samealignment_transfn" id="Function_c6fac8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_samealignment_transfn(agg agg_samealignment, rast raster)
 RETURNS agg_samealignment
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		m record;
		aligned boolean;
	BEGIN
		IF agg IS NULL THEN
			agg.refraster := NULL;
			agg.aligned := NULL;
		END IF;
		IF rast IS NULL THEN
			agg.aligned := NULL;
		ELSE
			IF agg.refraster IS NULL THEN
				m := ST_Metadata(rast);
				agg.refraster := ST_MakeEmptyRaster(1, 1, m.upperleftx, m.upperlefty, m.scalex, m.scaley, m.skewx, m.skewy, m.srid);
				agg.aligned := TRUE;
			ELSE IF agg.aligned IS TRUE THEN
					agg.aligned := ST_SameAlignment(agg.refraster, rast);
				END IF;
			END IF;
		END IF;
		RETURN agg;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_setvalues" id="Function_1f8c49f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[] DEFAULT NULL::boolean[], hasnosetvalue boolean DEFAULT false, nosetvalue double precision DEFAULT NULL::double precision, keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_setPixelValuesArray$function$
]]></string>
		</function>
		<function name="_st_slope4ma" id="Function_14f384e4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_slope4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		x integer;
		y integer;
		z integer;
		_pixwidth double precision;
		_pixheight double precision;
		_width double precision;
		_height double precision;
		_units text;
		_scale double precision;
		dz_dx double precision;
		dz_dy double precision;
		slope double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;
		IF array_length(userargs, 1) < 6 THEN
			RAISE EXCEPTION 'At least six elements must be provided for the third parameter';
		END IF;
		_pixwidth := userargs[1]::double precision;
		_pixheight := userargs[2]::double precision;
		_width := userargs[3]::double precision;
		_height := userargs[4]::double precision;
		_units := userargs[5];
		_scale := userargs[6]::double precision;
		


		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;
		dz_dy := ((_value[z][3][1] + _value[z][3][2] + _value[z][3][2] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][1][2] + _value[z][1][2] + _value[z][1][3])) / _pixheight;
		dz_dx := ((_value[z][1][3] + _value[z][2][3] + _value[z][2][3] + _value[z][3][3]) -
			(_value[z][1][1] + _value[z][2][1] + _value[z][2][1] + _value[z][3][1])) / _pixwidth;
		slope := sqrt(dz_dx * dz_dx + dz_dy * dz_dy) / (8 * _scale);
		-- output depends on user preference
		CASE substring(upper(trim(leading from _units)) for 3)
			-- percentages
			WHEN 'PER' THEN
				slope := 100.0 * slope;
			-- radians
			WHEN 'rad' THEN
				slope := atan(slope);
			-- degrees (default)
			ELSE
				slope := degrees(atan(slope));
		END CASE;
		RETURN slope;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_summarystats" id="Function_1379a4b8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_summarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_summaryStats$function$
CREATE OR REPLACE FUNCTION public._st_summarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 1, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_summaryStatsCoverage$function$
]]></string>
		</function>
		<function name="_st_summarystats_001" id="Function_23d76bd5" isSystem="false" />
		<function name="_st_tile" id="Function_303fa497" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_tile(rast raster, width integer, height integer, nband integer[] DEFAULT NULL::integer[], padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)
 RETURNS SETOF raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_tile$function$
]]></string>
		</function>
		<function name="_st_touches" id="Function_14338050" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_touches(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$touches$function$
CREATE OR REPLACE FUNCTION public._st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 1000
AS '$libdir/rtpostgis-2.1', $function$RASTER_touches$function$
]]></string>
		</function>
		<function name="_st_touches_001" id="Function_3062c145" isSystem="false" />
		<function name="_st_tpi4ma" id="Function_37b3cf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_tpi4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		x integer;
		y integer;
		z integer;
		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;
		tpi double precision;
		mean double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;
		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------
		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];
		mean := (Z1 + Z2 + Z3 + Z4 + Z6 + Z7 + Z8 + Z9)/8;
		tpi := Z5-mean;
		
		return tpi;
	END;
	$function$
]]></string>
		</function>
		<function name="_st_tri4ma" id="Function_1c87d74e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_tri4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		x integer;
		y integer;
		z integer;
		Z1 double precision;
		Z2 double precision;
		Z3 double precision;
		Z4 double precision;
		Z5 double precision;
		Z6 double precision;
		Z7 double precision;
		Z8 double precision;
		Z9 double precision;
		tri double precision;
		_value double precision[][][];
		ndims int;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		IF (
			array_lower(_value, 2) != 1 OR array_upper(_value, 2) != 3 OR
			array_lower(_value, 3) != 1 OR array_upper(_value, 3) != 3
		) THEN
			RAISE EXCEPTION 'First parameter of function must be a 1x3x3 array with each of the lower bounds starting from 1';
		END IF;
		-- check that center pixel isn't NODATA
		IF _value[z][2][2] IS NULL THEN
			RETURN NULL;
		-- substitute center pixel for any neighbor pixels that are NODATA
		ELSE
			FOR y IN 1..3 LOOP
				FOR x IN 1..3 LOOP
					IF _value[z][y][x] IS NULL THEN
						_value[z][y][x] = _value[z][2][2];
					END IF;
				END LOOP;
			END LOOP;
		END IF;
		-------------------------------------------------
		--|   Z1= Z(-1,1) |  Z2= Z(0,1)	| Z3= Z(1,1)  |--
		-------------------------------------------------
		--|   Z4= Z(-1,0) |  Z5= Z(0,0) | Z6= Z(1,0)  |--
		-------------------------------------------------
		--|   Z7= Z(-1,-1)|  Z8= Z(0,-1)|  Z9= Z(1,-1)|--
		-------------------------------------------------
		-- _scale width and height units / z units to make z units equal to height width units
		Z1 := _value[z][1][1];
		Z2 := _value[z][2][1];
		Z3 := _value[z][3][1];
		Z4 := _value[z][1][2];
		Z5 := _value[z][2][2];
		Z6 := _value[z][3][2];
		Z7 := _value[z][1][3];
		Z8 := _value[z][2][3];
		Z9 := _value[z][3][3];
		tri := ( abs(Z1 - Z5 ) + abs( Z2 - Z5 ) + abs( Z3 - Z5 ) + abs( Z4 - Z5 ) + abs( Z6 - Z5 ) + abs( Z7 - Z5 ) + abs( Z8 - Z5 ) + abs ( Z9 - Z5 )) / 8;
		
		return tri;  
	END;
	$function$
]]></string>
		</function>
		<function name="_st_union_finalfn" id="Function_166a5fc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_union_finalfn(internal)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_union_finalfn$function$
]]></string>
		</function>
		<function name="_st_union_transfn" id="Function_2252b3e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_union_transfn(internal, raster)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_union_transfn$function$
CREATE OR REPLACE FUNCTION public._st_union_transfn(internal, raster, integer)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_union_transfn$function$
CREATE OR REPLACE FUNCTION public._st_union_transfn(internal, raster, text)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_union_transfn$function$
CREATE OR REPLACE FUNCTION public._st_union_transfn(internal, raster, unionarg[])
 RETURNS internal
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_union_transfn$function$
CREATE OR REPLACE FUNCTION public._st_union_transfn(internal, raster, integer, text)
 RETURNS internal
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_union_transfn$function$
]]></string>
		</function>
		<function name="_st_union_transfn_001" id="Function_2bc8f108" isSystem="false" />
		<function name="_st_union_transfn_002" id="Function_3a313b39" isSystem="false" />
		<function name="_st_union_transfn_003" id="Function_3397ade1" isSystem="false" />
		<function name="_st_union_transfn_004" id="Function_1b33b586" isSystem="false" />
		<function name="_st_valuecount" id="Function_1a778dd8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_valuecount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_valueCount$function$
CREATE OR REPLACE FUNCTION public._st_valuecount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_valueCountCoverage$function$
]]></string>
		</function>
		<function name="_st_valuecount_001" id="Function_17fa1c48" isSystem="false" />
		<function name="_st_within" id="Function_35e698f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT _ST_Contains($2,$1)$function$
CREATE OR REPLACE FUNCTION public._st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT _st_contains($3, $4, $1, $2) $function$
]]></string>
		</function>
		<function name="_st_within_001" id="Function_e0a0ac5" isSystem="false" />
		<function name="_st_worldtorastercoord" id="Function_301cdd4e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._st_worldtorastercoord(rast raster, longitude double precision DEFAULT NULL::double precision, latitude double precision DEFAULT NULL::double precision, OUT columnx integer, OUT rowy integer)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_worldToRasterCoord$function$
]]></string>
		</function>
		<function name="_updaterastersrid" id="Function_166b92be" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public._updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$
	DECLARE
		fqtn text;
		schema name;
		sql text;
		srid integer;
		ct boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		-- clamp SRID
		IF new_srid < 0 THEN
			srid := ST_SRID('POINT EMPTY'::geometry);
			RAISE NOTICE 'SRID % converted to the officially unknown SRID %', new_srid, srid;
		ELSE
			srid := new_srid;
		END IF;
		-- drop coverage tile constraint
		-- done separately just in case constraint doesn't exist
		ct := _raster_constraint_info_coverage_tile(schema, $2, $3);
		IF ct IS TRUE THEN
			PERFORM _drop_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;
		-- drop SRID, extent, alignment constraints
		PERFORM DropRasterConstraints(schema, $2, $3, 'extent', 'alignment', 'srid');
		fqtn := '';
		IF length($1) > 0 THEN
			fqtn := quote_ident($1) || '.';
		END IF;
		fqtn := fqtn || quote_ident($2);
		-- update SRID
		sql := 'UPDATE ' || fqtn ||
			' SET ' || quote_ident($3) ||
			' = ST_SetSRID(' || quote_ident($3) ||
			'::raster, ' || srid || ')';
		RAISE NOTICE 'sql = %', sql;
		EXECUTE sql;
		-- add SRID constraint
		PERFORM AddRasterConstraints(schema, $2, $3, 'srid', 'extent', 'alignment');
		-- add coverage tile constraint if needed
		IF ct IS TRUE THEN
			PERFORM _add_raster_constraint_coverage_tile(schema, $2, $3);
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="addauth" id="Function_2ce89ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addauth(text)
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	lockid alias for $1;
	okay boolean;
	myrec record;
BEGIN
	-- check to see if table exists
	--  if not, CREATE TEMP TABLE mylock (transid xid, lockcode text)
	okay := 'f';
	FOR myrec IN SELECT * FROM pg_class WHERE relname = 'temp_lock_have_table' LOOP
		okay := 't';
	END LOOP; 
	IF (okay <> 't') THEN 
		CREATE TEMP TABLE temp_lock_have_table (transid xid, lockcode text);
			-- this will only work from pgsql7.4 up
			-- ON COMMIT DELETE ROWS;
	END IF;
	--  INSERT INTO mylock VALUES ( $1)
--	EXECUTE 'INSERT INTO temp_lock_have_table VALUES ( '||
--		quote_literal(getTransactionID()) || ',' ||
--		quote_literal(lockid) ||')';
	INSERT INTO temp_lock_have_table VALUES (getTransactionID(), lockid);
	RETURN true::boolean;
END;
$function$
]]></string>
			<comment><![CDATA[args: auth_token - Add an authorization token to be used in current transaction.]]></comment>
		</function>
		<function name="addgeometrycolumn" id="Function_c28d2c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addgeometrycolumn(table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('','',$1,$2,$3,$4,$5, $6) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.addgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying, new_srid integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT AddGeometryColumn('',$1,$2,$3,$4,$5,$6,$7) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.addgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer, new_type character varying, new_dim integer, use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	rec RECORD;
	sr varchar;
	real_schema name;
	sql text;
	new_srid integer;
BEGIN
	-- Verify geometry type
	IF (postgis_type_name(new_type,new_dim) IS NULL )
	THEN
		RAISE EXCEPTION 'Invalid type name "%(%)" - valid ones are:
	POINT, MULTIPOINT,
	LINESTRING, MULTILINESTRING,
	POLYGON, MULTIPOLYGON,
	CIRCULARSTRING, COMPOUNDCURVE, MULTICURVE,
	CURVEPOLYGON, MULTISURFACE,
	GEOMETRY, GEOMETRYCOLLECTION,
	POINTM, MULTIPOINTM,
	LINESTRINGM, MULTILINESTRINGM,
	POLYGONM, MULTIPOLYGONM,
	CIRCULARSTRINGM, COMPOUNDCURVEM, MULTICURVEM
	CURVEPOLYGONM, MULTISURFACEM, TRIANGLE, TRIANGLEM,
	POLYHEDRALSURFACE, POLYHEDRALSURFACEM, TIN, TINM
	or GEOMETRYCOLLECTIONM', new_type, new_dim;
		RETURN 'fail';
	END IF;

	-- Verify dimension
	IF ( (new_dim >4) OR (new_dim <2) ) THEN
		RAISE EXCEPTION 'invalid dimension';
		RETURN 'fail';
	END IF;
	IF ( (new_type LIKE '%M') AND (new_dim!=3) ) THEN
		RAISE EXCEPTION 'TypeM needs 3 dimensions';
		RETURN 'fail';
	END IF;

	-- Verify SRID
	IF ( new_srid_in > 0 ) THEN
		IF new_srid_in > 998999 THEN
			RAISE EXCEPTION 'AddGeometryColumn() - SRID must be <= %', 998999;
		END IF;
		new_srid := new_srid_in;
		SELECT SRID INTO sr FROM spatial_ref_sys WHERE SRID = new_srid;
		IF NOT FOUND THEN
			RAISE EXCEPTION 'AddGeometryColumn() - invalid SRID';
			RETURN 'fail';
		END IF;
	ELSE
		new_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid_in != new_srid ) THEN
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;

	-- Verify schema
	IF ( schema_name IS NOT NULL AND schema_name != '' ) THEN
		sql := 'SELECT nspname FROM pg_namespace ' ||
			'WHERE text(nspname) = ' || quote_literal(schema_name) ||
			'LIMIT 1';
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;
		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Schema % is not a valid schemaname', quote_literal(schema_name);
			RETURN 'fail';
		END IF;
	END IF;
	IF ( real_schema IS NULL ) THEN
		RAISE DEBUG 'Detecting schema';
		sql := 'SELECT n.nspname AS schemaname ' ||
			'FROM pg_catalog.pg_class c ' ||
			  'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace ' ||
			'WHERE c.relkind = ' || quote_literal('r') ||
			' AND n.nspname NOT IN (' || quote_literal('pg_catalog') || ', ' || quote_literal('pg_toast') || ')' ||
			' AND pg_catalog.pg_table_is_visible(c.oid)' ||
			' AND c.relname = ' || quote_literal(table_name);
		RAISE DEBUG '%', sql;
		EXECUTE sql INTO real_schema;
		IF ( real_schema IS NULL ) THEN
			RAISE EXCEPTION 'Table % does not occur in the search_path', quote_literal(table_name);
			RETURN 'fail';
		END IF;
	END IF;

	-- Add geometry column to table
	IF use_typmod THEN
	     sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry(' || postgis_type_name(new_type, new_dim) || ', ' || new_srid::text || ')';
        RAISE DEBUG '%', sql;
	ELSE
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD COLUMN ' || quote_ident(column_name) ||
            ' geometry ';
        RAISE DEBUG '%', sql;
    END IF;
	EXECUTE sql;
	IF NOT use_typmod THEN
        -- Add table CHECKs
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_srid_' || column_name)
            || ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        sql := 'ALTER TABLE ' ||
            quote_ident(real_schema) || '.' || quote_ident(table_name)
            || ' ADD CONSTRAINT '
            || quote_ident('enforce_dims_' || column_name)
            || ' CHECK (st_ndims(' || quote_ident(column_name) ||
            ') = ' || new_dim::text || ')' ;
        RAISE DEBUG '%', sql;
        EXECUTE sql;
    
        IF ( NOT (new_type = 'GEOMETRY')) THEN
            sql := 'ALTER TABLE ' ||
                quote_ident(real_schema) || '.' || quote_ident(table_name) || ' ADD CONSTRAINT ' ||
                quote_ident('enforce_geotype_' || column_name) ||
                ' CHECK (GeometryType(' ||
                quote_ident(column_name) || ')=' ||
                quote_literal(new_type) || ' OR (' ||
                quote_ident(column_name) || ') is null)';
            RAISE DEBUG '%', sql;
            EXECUTE sql;
        END IF;
    END IF;
	RETURN
		real_schema || '.' ||
		table_name || '.' || column_name ||
		' SRID:' || new_srid::text ||
		' TYPE:' || new_type ||
		' DIMS:' || new_dim::text || ' ';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
		</function>
		<function name="addgeometrycolumn_001" id="Function_22d41959" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
		</function>
		<function name="addgeometrycolumn_002" id="Function_23adf5a2" isSystem="false" >
			<comment><![CDATA[args: table_name, column_name, srid, type, dimension, use_typmod=true - Adds a geometry column to an existing table of attributes. By default uses type modifier to define rather than constraints. Pass in false for use_typmod to get old check constraint based behavior]]></comment>
		</function>
		<function name="addoverviewconstraints" id="Function_379706ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addoverviewconstraints(ovtable name, ovcolumn name, reftable name, refcolumn name, ovfactor integer)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT AddOverviewConstraints('', $1, $2, '', $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.addoverviewconstraints(ovschema name, ovtable name, ovcolumn name, refschema name, reftable name, refcolumn name, ovfactor integer)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		x int;
		s name;
		t name;
		oschema name;
		rschema name;
		sql text;
		rtn boolean;
	BEGIN
		FOR x IN 1..2 LOOP
			s := '';
			IF x = 1 THEN
				s := $1;
				t := $2;
			ELSE
				s := $4;
				t := $5;
			END IF;
			-- validate user-provided schema
			IF length(s) > 0 THEN
				sql := 'SELECT nspname FROM pg_namespace '
					|| 'WHERE nspname = ' || quote_literal(s)
					|| 'LIMIT 1';
				EXECUTE sql INTO s;
				IF s IS NULL THEN
					RAISE EXCEPTION 'The value % is not a valid schema', quote_literal(s);
					RETURN FALSE;
				END IF;
			END IF;
			-- no schema, determine what it could be using the table
			IF length(s) < 1 THEN
				sql := 'SELECT n.nspname AS schemaname '
					|| 'FROM pg_catalog.pg_class c '
					|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
					|| 'WHERE c.relkind = ' || quote_literal('r')
					|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
					|| ', ' || quote_literal('pg_toast')
					|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
					|| ' AND c.relname = ' || quote_literal(t);
				EXECUTE sql INTO s;
				IF s IS NULL THEN
					RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal(t);
					RETURN FALSE;
				END IF;
			END IF;
			IF x = 1 THEN
				oschema := s;
			ELSE
				rschema := s;
			END IF;
		END LOOP;
		-- reference raster
		rtn := _add_overview_constraint(oschema, $2, $3, rschema, $5, $6, $7);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to add the overview constraint.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: ovschema, ovtable, ovcolumn, refschema, reftable, refcolumn, ovfactor - Tag a raster column as being an overview of another.]]></comment>
		</function>
		<function name="addoverviewconstraints_001" id="Function_14659af3" isSystem="false" >
			<comment><![CDATA[args: ovtable, ovcolumn, reftable, refcolumn, ovfactor - Tag a raster column as being an overview of another.]]></comment>
		</function>
		<function name="addrasterconstraints" id="Function_1ba473fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.addrasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT AddRasterConstraints('', $1, $2, VARIADIC $3) $function$
CREATE OR REPLACE FUNCTION public.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		max int;
		cnt int;
		sql text;
		schema name;
		x int;
		kw text;
		rtn boolean;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be added.  Doing nothing';
			RETURN TRUE;
		END IF;
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));
			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Adding SRID constraint';
						rtn := _add_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Adding scale-X constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Adding scale-Y constraint';
						rtn := _add_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Adding blocksize-X constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Adding blocksize-Y constraint';
						rtn := _add_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Adding alignment constraint';
						rtn := _add_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						RAISE NOTICE 'Adding coverage tile constraint required for regular blocking';
						rtn := _add_raster_constraint_coverage_tile(schema, $2, $3);
						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Adding spatially unique constraint required for regular blocking';
							rtn := _add_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Adding number of bands constraint';
						rtn := _add_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Adding pixel type constraint';
						rtn := _add_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Adding nodata value constraint';
						rtn := _add_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Adding out-of-database constraint';
						rtn := _add_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Adding maximum extent constraint';
						rtn := _add_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;
			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to add constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;
		END LOOP kwloop;
		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be added.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.addrasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT AddRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $function$
CREATE OR REPLACE FUNCTION public.addrasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT false, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;
		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;
		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;
		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;
		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;
		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;
		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;
		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;
		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;
		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;
		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;
		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;
		RETURN AddRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="addrasterconstraints_001" id="Function_2332f298" isSystem="false" >
			<comment><![CDATA[args: rasttable, rastcolumn, VARIADIC constraints - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="addrasterconstraints_002" id="Function_38085362" isSystem="false" >
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="addrasterconstraints_003" id="Function_841d989" isSystem="false" >
			<comment><![CDATA[args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Adds raster constraints to a loaded raster table for a specific column that constrains spatial ref, scaling, blocksize, alignment, bands, band type and a flag to denote if raster column is regularly blocked. The table must be loaded with data for the constraints to be inferred. Returns true of the constraint setting was accomplished and if issues a notice.]]></comment>
		</function>
		<function name="box" id="Function_a1b30e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box(geometry)
 RETURNS box
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_BOX$function$
CREATE OR REPLACE FUNCTION public.box(box3d)
 RETURNS box
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_to_BOX$function$
]]></string>
		</function>
		<function name="box2d" id="Function_20fa8805" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box2d(geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_BOX2D$function$
CREATE OR REPLACE FUNCTION public.box2d(box3d)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_to_BOX2D$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns a BOX2D representing the maximum extents of the geometry.]]></comment>
		</function>
		<function name="box2d_001" id="Function_3acd74b0" isSystem="false" />
		<function name="box2d_in" id="Function_2a989020" isSystem="false" />
		<function name="box2d_out" id="Function_efa3f7a" isSystem="false" />
		<function name="box2df_in" id="Function_26c904db" isSystem="false" />
		<function name="box2df_out" id="Function_1253922d" isSystem="false" />
		<function name="box3d" id="Function_246d658f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3d(geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_BOX3D$function$
CREATE OR REPLACE FUNCTION public.box3d(box2d)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX2D_to_BOX3D$function$
CREATE OR REPLACE FUNCTION public.box3d(raster)
 RETURNS box3d
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select box3d(st_convexhull($1))$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns a BOX3D representing the maximum extents of the geometry.]]></comment>
		</function>
		<function name="box3d_001" id="Function_2ad40628" isSystem="false" />
		<function name="box3d_002" id="Function_1e521070" isSystem="false" />
		<function name="box3d_in" id="Function_1c4d746" isSystem="false" />
		<function name="box3d_out" id="Function_128d3434" isSystem="false" />
		<function name="box3dtobox" id="Function_dc8d638" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.box3dtobox(box3d)
 RETURNS box
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT box($1)$function$
]]></string>
		</function>
		<function name="box_001" id="Function_2c4db99f" isSystem="false" />
		<function name="bytea" id="Function_363e2fb0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.bytea(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_bytea$function$
CREATE OR REPLACE FUNCTION public.bytea(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_bytea$function$
CREATE OR REPLACE FUNCTION public.bytea(raster)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_to_bytea$function$
]]></string>
		</function>
		<function name="bytea_001" id="Function_31129fdf" isSystem="false" />
		<function name="bytea_002" id="Function_8a77310" isSystem="false" />
		<function name="checkauth" id="Function_1c12d560" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.checkauth(text, text)
 RETURNS integer
 LANGUAGE sql
AS $function$ SELECT CheckAuth('', $1, $2) $function$
CREATE OR REPLACE FUNCTION public.checkauth(text, text, text)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	schema text;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	if ( $1 != '' ) THEN
		schema = $1;
	ELSE
		SELECT current_schema() into schema;
	END IF;
	-- TODO: check for an already existing trigger ?
	EXECUTE 'CREATE TRIGGER check_auth BEFORE UPDATE OR DELETE ON ' 
		|| quote_ident(schema) || '.' || quote_ident($2)
		||' FOR EACH ROW EXECUTE PROCEDURE CheckAuthTrigger('
		|| quote_literal($3) || ')';
	RETURN 0;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
		</function>
		<function name="checkauth_001" id="Function_16ca2f7b" isSystem="false" >
			<comment><![CDATA[args: a_table_name, a_key_column_name - Creates trigger on a table to prevent/allow updates and deletes of rows based on authorization token.]]></comment>
		</function>
		<function name="checkauthtrigger" id="Function_1ff3f30c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.checkauthtrigger()
 RETURNS trigger
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$check_authorization$function$
]]></string>
		</function>
		<function name="difference" id="Function_20a4b2fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.difference(text, text)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$difference$function$
]]></string>
		</function>
		<function name="disablelongtransactions" id="Function_5fefba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.disablelongtransactions()
 RETURNS text
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	rec RECORD;
BEGIN
	--
	-- Drop all triggers applied by CheckAuth()
	--
	FOR rec IN
		SELECT c.relname, t.tgname, t.tgargs FROM pg_trigger t, pg_class c, pg_proc p
		WHERE p.proname = 'checkauthtrigger' and t.tgfoid = p.oid and t.tgrelid = c.oid
	LOOP
		EXECUTE 'DROP TRIGGER ' || quote_ident(rec.tgname) ||
			' ON ' || quote_ident(rec.relname);
	END LOOP;
	--
	-- Drop the authorization_table table
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table' LOOP
		DROP TABLE authorization_table;
	END LOOP;
	--
	-- Drop the authorized_tables view
	--
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables' LOOP
		DROP VIEW authorized_tables;
	END LOOP;
	RETURN 'Long transactions support disabled';
END;
$function$
]]></string>
			<comment><![CDATA[Disable long transaction support. This function removes the long transaction support metadata tables, and drops all triggers attached to lock-checked tables.]]></comment>
		</function>
		<function name="dmetaphone" id="Function_f45d8c8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dmetaphone(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$dmetaphone$function$
]]></string>
		</function>
		<function name="dmetaphone_alt" id="Function_2418d7a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dmetaphone_alt(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$dmetaphone_alt$function$
]]></string>
		</function>
		<function name="dropgeometrycolumn" id="Function_18f97977" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('','',$1,$2) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(schema_name character varying, table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret text;
BEGIN
	SELECT DropGeometryColumn('',$1,$2,$3) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.dropgeometrycolumn(catalog_name character varying, schema_name character varying, table_name character varying, column_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	myrec RECORD;
	okay boolean;
	real_schema name;
BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;
		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;
		IF ( okay <>  true ) THEN
			RAISE NOTICE 'Invalid schema name - using current_schema()';
			SELECT current_schema() into real_schema;
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT current_schema() into real_schema;
	END IF;
	-- Find out if the column is in the geometry_columns table
	okay = false;
	FOR myrec IN SELECT * from geometry_columns where f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (okay <> true) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;
	-- Remove table column
	EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' DROP COLUMN ' ||
		quote_ident(column_name);
	RETURN real_schema || '.' || table_name || '.' || column_name ||' effectively removed.';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
		</function>
		<function name="dropgeometrycolumn_001" id="Function_ea4733c" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
		</function>
		<function name="dropgeometrycolumn_002" id="Function_376afb8f" isSystem="false" >
			<comment><![CDATA[args: table_name, column_name - Removes a geometry column from a spatial table.]]></comment>
		</function>
		<function name="dropgeometrytable" id="Function_31aef16f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropgeometrytable(table_name character varying)
 RETURNS text
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropGeometryTable('','',$1) $function$
CREATE OR REPLACE FUNCTION public.dropgeometrytable(schema_name character varying, table_name character varying)
 RETURNS text
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropGeometryTable('',$1,$2) $function$
CREATE OR REPLACE FUNCTION public.dropgeometrytable(catalog_name character varying, schema_name character varying, table_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	real_schema name;
BEGIN
	IF ( schema_name = '' ) THEN
		SELECT current_schema() into real_schema;
	ELSE
		real_schema = schema_name;
	END IF;
	-- TODO: Should we warn if table doesn't exist probably instead just saying dropped
	-- Remove table
	EXECUTE 'DROP TABLE IF EXISTS '
		|| quote_ident(real_schema) || '.' ||
		quote_ident(table_name) || ' RESTRICT';
	RETURN
		real_schema || '.' ||
		table_name ||' dropped.';
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
		</function>
		<function name="dropgeometrytable_001" id="Function_3482192" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name - Drops a table and all its references in geometry_columns.]]></comment>
		</function>
		<function name="dropgeometrytable_002" id="Function_275d8c4d" isSystem="false" >
			<comment><![CDATA[args: table_name - Drops a table and all its references in geometry_columns.]]></comment>
		</function>
		<function name="dropoverviewconstraints" id="Function_1afbf1c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.dropoverviewconstraints(ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropOverviewConstraints('', $1, $2) $function$
CREATE OR REPLACE FUNCTION public.dropoverviewconstraints(ovschema name, ovtable name, ovcolumn name)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		schema name;
		sql text;
		rtn boolean;
	BEGIN
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		rtn := _drop_overview_constraint(schema, $2, $3);
		IF rtn IS FALSE THEN
			RAISE EXCEPTION 'Unable to drop the overview constraint .  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
			<comment><![CDATA[args: ovschema, ovtable, ovcolumn - Untag a raster column from being an overview of another.]]></comment>
		</function>
		<function name="dropoverviewconstraints_001" id="Function_2f9e4898" isSystem="false" >
			<comment><![CDATA[args: ovtable, ovcolumn - Untag a raster column from being an overview of another.]]></comment>
		</function>
		<function name="droprasterconstraints" id="Function_bc44751" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.droprasterconstraints(rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropRasterConstraints('', $1, $2, VARIADIC $3) $function$
CREATE OR REPLACE FUNCTION public.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, VARIADIC constraints text[])
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		max int;
		x int;
		schema name;
		sql text;
		kw text;
		rtn boolean;
		cnt int;
	BEGIN
		cnt := 0;
		max := array_length(constraints, 1);
		IF max < 1 THEN
			RAISE NOTICE 'No constraints indicated to be dropped.  Doing nothing';
			RETURN TRUE;
		END IF;
		-- validate schema
		schema := NULL;
		IF length($1) > 0 THEN
			sql := 'SELECT nspname FROM pg_namespace '
				|| 'WHERE nspname = ' || quote_literal($1)
				|| 'LIMIT 1';
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The value provided for schema is invalid';
				RETURN FALSE;
			END IF;
		END IF;
		IF schema IS NULL THEN
			sql := 'SELECT n.nspname AS schemaname '
				|| 'FROM pg_catalog.pg_class c '
				|| 'JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace '
				|| 'WHERE c.relkind = ' || quote_literal('r')
				|| ' AND n.nspname NOT IN (' || quote_literal('pg_catalog')
				|| ', ' || quote_literal('pg_toast')
				|| ') AND pg_catalog.pg_table_is_visible(c.oid)'
				|| ' AND c.relname = ' || quote_literal($2);
			EXECUTE sql INTO schema;
			IF schema IS NULL THEN
				RAISE EXCEPTION 'The table % does not occur in the search_path', quote_literal($2);
				RETURN FALSE;
			END IF;
		END IF;
		<<kwloop>>
		FOR x in 1..max LOOP
			kw := trim(both from lower(constraints[x]));
			BEGIN
				CASE
					WHEN kw = 'srid' THEN
						RAISE NOTICE 'Dropping SRID constraint';
						rtn := _drop_raster_constraint_srid(schema, $2, $3);
					WHEN kw IN ('scale_x', 'scalex') THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
					WHEN kw IN ('scale_y', 'scaley') THEN
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw = 'scale' THEN
						RAISE NOTICE 'Dropping scale-X constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'x');
						RAISE NOTICE 'Dropping scale-Y constraint';
						rtn := _drop_raster_constraint_scale(schema, $2, $3, 'y');
					WHEN kw IN ('blocksize_x', 'blocksizex', 'width') THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
					WHEN kw IN ('blocksize_y', 'blocksizey', 'height') THEN
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw = 'blocksize' THEN
						RAISE NOTICE 'Dropping blocksize-X constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'width');
						RAISE NOTICE 'Dropping blocksize-Y constraint';
						rtn := _drop_raster_constraint_blocksize(schema, $2, $3, 'height');
					WHEN kw IN ('same_alignment', 'samealignment', 'alignment') THEN
						RAISE NOTICE 'Dropping alignment constraint';
						rtn := _drop_raster_constraint_alignment(schema, $2, $3);
					WHEN kw IN ('regular_blocking', 'regularblocking') THEN
						rtn := _drop_raster_constraint_regular_blocking(schema, $2, $3);
						RAISE NOTICE 'Dropping coverage tile constraint required for regular blocking';
						rtn := _drop_raster_constraint_coverage_tile(schema, $2, $3);
						IF rtn IS NOT FALSE THEN
							RAISE NOTICE 'Dropping spatially unique constraint required for regular blocking';
							rtn := _drop_raster_constraint_spatially_unique(schema, $2, $3);
						END IF;
					WHEN kw IN ('num_bands', 'numbands') THEN
						RAISE NOTICE 'Dropping number of bands constraint';
						rtn := _drop_raster_constraint_num_bands(schema, $2, $3);
					WHEN kw IN ('pixel_types', 'pixeltypes') THEN
						RAISE NOTICE 'Dropping pixel type constraint';
						rtn := _drop_raster_constraint_pixel_types(schema, $2, $3);
					WHEN kw IN ('nodata_values', 'nodatavalues', 'nodata') THEN
						RAISE NOTICE 'Dropping nodata value constraint';
						rtn := _drop_raster_constraint_nodata_values(schema, $2, $3);
					WHEN kw IN ('out_db', 'outdb') THEN
						RAISE NOTICE 'Dropping out-of-database constraint';
						rtn := _drop_raster_constraint_out_db(schema, $2, $3);
					WHEN kw = 'extent' THEN
						RAISE NOTICE 'Dropping maximum extent constraint';
						rtn := _drop_raster_constraint_extent(schema, $2, $3);
					ELSE
						RAISE NOTICE 'Unknown constraint: %.  Skipping', quote_literal(constraints[x]);
						CONTINUE kwloop;
				END CASE;
			END;
			IF rtn IS FALSE THEN
				cnt := cnt + 1;
				RAISE WARNING 'Unable to drop constraint: %.  Skipping', quote_literal(constraints[x]);
			END IF;
		END LOOP kwloop;
		IF cnt = max THEN
			RAISE EXCEPTION 'None of the constraints specified could be dropped.  Is the schema name, table name or column name incorrect?';
			RETURN FALSE;
		END IF;
		RETURN TRUE;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.droprasterconstraints(rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT DropRasterConstraints('', $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) $function$
CREATE OR REPLACE FUNCTION public.droprasterconstraints(rastschema name, rasttable name, rastcolumn name, srid boolean DEFAULT true, scale_x boolean DEFAULT true, scale_y boolean DEFAULT true, blocksize_x boolean DEFAULT true, blocksize_y boolean DEFAULT true, same_alignment boolean DEFAULT true, regular_blocking boolean DEFAULT true, num_bands boolean DEFAULT true, pixel_types boolean DEFAULT true, nodata_values boolean DEFAULT true, out_db boolean DEFAULT true, extent boolean DEFAULT true)
 RETURNS boolean
 LANGUAGE plpgsql
 STRICT
AS $function$
	DECLARE
		constraints text[];
	BEGIN
		IF srid IS TRUE THEN
			constraints := constraints || 'srid'::text;
		END IF;
		IF scale_x IS TRUE THEN
			constraints := constraints || 'scale_x'::text;
		END IF;
		IF scale_y IS TRUE THEN
			constraints := constraints || 'scale_y'::text;
		END IF;
		IF blocksize_x IS TRUE THEN
			constraints := constraints || 'blocksize_x'::text;
		END IF;
		IF blocksize_y IS TRUE THEN
			constraints := constraints || 'blocksize_y'::text;
		END IF;
		IF same_alignment IS TRUE THEN
			constraints := constraints || 'same_alignment'::text;
		END IF;
		IF regular_blocking IS TRUE THEN
			constraints := constraints || 'regular_blocking'::text;
		END IF;
		IF num_bands IS TRUE THEN
			constraints := constraints || 'num_bands'::text;
		END IF;
		IF pixel_types IS TRUE THEN
			constraints := constraints || 'pixel_types'::text;
		END IF;
		IF nodata_values IS TRUE THEN
			constraints := constraints || 'nodata_values'::text;
		END IF;
		IF out_db IS TRUE THEN
			constraints := constraints || 'out_db'::text;
		END IF;
		IF extent IS TRUE THEN
			constraints := constraints || 'extent'::text;
		END IF;
		RETURN DropRasterConstraints($1, $2, $3, VARIADIC constraints);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, constraints - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
		</function>
		<function name="droprasterconstraints_001" id="Function_2f4b0cb3" isSystem="false" />
		<function name="droprasterconstraints_002" id="Function_121769af" isSystem="false" >
			<comment><![CDATA[args: rastschema, rasttable, rastcolumn, srid=true, scale_x=true, scale_y=true, blocksize_x=true, blocksize_y=true, same_alignment=true, regular_blocking=false, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
		</function>
		<function name="droprasterconstraints_003" id="Function_157a178e" isSystem="false" >
			<comment><![CDATA[args: rasttable, rastcolumn, srid, scale_x, scale_y, blocksize_x, blocksize_y, same_alignment, regular_blocking, num_bands=true, pixel_types=true, nodata_values=true, out_db=true, extent=true - Drops PostGIS raster constraints that refer to a raster table column. Useful if you need to reload data or update your raster column data.]]></comment>
		</function>
		<function name="enablelongtransactions" id="Function_182637a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.enablelongtransactions()
 RETURNS text
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	"query" text;
	exists bool;
	rec RECORD;
BEGIN
	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorization_table'
	LOOP
		exists = 't';
	END LOOP;
	IF NOT exists
	THEN
		"query" = 'CREATE TABLE authorization_table (
			toid oid, -- table oid
			rid text, -- row id
			expires timestamp,
			authid text
		)';
		EXECUTE "query";
	END IF;
	exists = 'f';
	FOR rec IN SELECT * FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		exists = 't';
	END LOOP;
	IF NOT exists THEN
		"query" = 'CREATE VIEW authorized_tables AS ' ||
			'SELECT ' ||
			'n.nspname as schema, ' ||
			'c.relname as table, trim(' ||
			quote_literal(chr(92) || '000') ||
			' from t.tgargs) as id_column ' ||
			'FROM pg_trigger t, pg_class c, pg_proc p ' ||
			', pg_namespace n ' ||
			'WHERE p.proname = ' || quote_literal('checkauthtrigger') ||
			' AND c.relnamespace = n.oid' ||
			' AND t.tgfoid = p.oid and t.tgrelid = c.oid';
		EXECUTE "query";
	END IF;
	RETURN 'Long transactions support enabled';
END;
$function$
]]></string>
			<comment><![CDATA[Enable long transaction support. This function creates the required metadata tables, needs to be called once before using the other functions in this section. Calling it twice is harmless.]]></comment>
		</function>
		<function name="equals" id="Function_f5ded5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_Equals$function$
]]></string>
		</function>
		<function name="find_srid" id="Function_1436131" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.find_srid(character varying, character varying, character varying)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	schem text;
	tabl text;
	sr int4;
BEGIN
	IF $1 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - schema is NULL!';
	END IF;
	IF $2 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - table name is NULL!';
	END IF;
	IF $3 IS NULL THEN
	  RAISE EXCEPTION 'find_srid() - column name is NULL!';
	END IF;
	schem = $1;
	tabl = $2;
-- if the table contains a . and the schema is empty
-- split the table into a schema and a table
-- otherwise drop through to default behavior
	IF ( schem = '' and tabl LIKE '%.%' ) THEN
	 schem = substr(tabl,1,strpos(tabl,'.')-1);
	 tabl = substr(tabl,length(schem)+2);
	ELSE
	 schem = schem || '%';
	END IF;
	select SRID into sr from geometry_columns where f_table_schema like schem and f_table_name = tabl and f_geometry_column = $3;
	IF NOT FOUND THEN
	   RAISE EXCEPTION 'find_srid() - couldnt find the corresponding SRID - is the geometry registered in the GEOMETRY_COLUMNS table?  Is there an uppercase/lowercase missmatch?';
	END IF;
	return sr;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_geomfield_name - The syntax is find_srid(a_db_schema, a_table, a_column) and the function returns the integer SRID of the specified column by searching through the GEOMETRY_COLUMNS table.]]></comment>
		</function>
		<function name="geography" id="Function_908d60b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography(bytea)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_from_binary$function$
CREATE OR REPLACE FUNCTION public.geography(geometry)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_from_geometry$function$
CREATE OR REPLACE FUNCTION public.geography(geography, integer, boolean)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_enforce_typmod$function$
]]></string>
		</function>
		<function name="geography_001" id="Function_7c19314" isSystem="false" />
		<function name="geography_002" id="Function_17d9e55e" isSystem="false" />
		<function name="geography_analyze" id="Function_a844c76" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_analyze(internal)
 RETURNS boolean
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.1', $function$gserialized_analyze_nd$function$
]]></string>
		</function>
		<function name="geography_cmp" id="Function_2a4aee58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_cmp(geography, geography)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_cmp$function$
]]></string>
		</function>
		<function name="geography_eq" id="Function_23208b09" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_eq(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_eq$function$
]]></string>
		</function>
		<function name="geography_ge" id="Function_20f75ee3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_ge(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_ge$function$
]]></string>
		</function>
		<function name="geography_gist_compress" id="Function_1174888" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_compress(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_compress$function$
]]></string>
		</function>
		<function name="geography_gist_consistent" id="Function_351a6e98" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_consistent(internal, geography, integer)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_consistent$function$
]]></string>
		</function>
		<function name="geography_gist_decompress" id="Function_2dfd8ffe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_decompress(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_decompress$function$
]]></string>
		</function>
		<function name="geography_gist_penalty" id="Function_31bbca5b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_penalty(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_penalty$function$
]]></string>
		</function>
		<function name="geography_gist_picksplit" id="Function_fbe990" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_picksplit(internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_picksplit$function$
]]></string>
		</function>
		<function name="geography_gist_same" id="Function_1faa0a98" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_same(box2d, box2d, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_same$function$
]]></string>
		</function>
		<function name="geography_gist_union" id="Function_291ae6c9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gist_union(bytea, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_union$function$
]]></string>
		</function>
		<function name="geography_gt" id="Function_fb80f2b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_gt(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_gt$function$
]]></string>
		</function>
		<function name="geography_in" id="Function_19ecd1bc" isSystem="false" />
		<function name="geography_le" id="Function_346caebb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_le(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_le$function$
]]></string>
		</function>
		<function name="geography_lt" id="Function_1191edf4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_lt(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_lt$function$
]]></string>
		</function>
		<function name="geography_out" id="Function_21823550" isSystem="false" />
		<function name="geography_overlaps" id="Function_10ef035" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_overlaps(geography, geography)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_overlaps$function$
]]></string>
		</function>
		<function name="geography_recv" id="Function_c072e55" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_recv(internal, oid, integer)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_recv$function$
]]></string>
		</function>
		<function name="geography_send" id="Function_125d9613" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_send(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_send$function$
]]></string>
		</function>
		<function name="geography_typmod_in" id="Function_166fd636" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geography_typmod_in(cstring[])
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_typmod_in$function$
]]></string>
		</function>
		<function name="geography_typmod_out" id="Function_327e1f9c" isSystem="false" />
		<function name="geometry" id="Function_5407752" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry(geometry, integer, boolean)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geometry_enforce_typmod$function$
CREATE OR REPLACE FUNCTION public.geometry(point)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$point_to_geometry$function$
CREATE OR REPLACE FUNCTION public.geometry(path)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$path_to_geometry$function$
CREATE OR REPLACE FUNCTION public.geometry(polygon)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$polygon_to_geometry$function$
CREATE OR REPLACE FUNCTION public.geometry(box2d)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX2D_to_LWGEOM$function$
CREATE OR REPLACE FUNCTION public.geometry(box3d)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_to_LWGEOM$function$
CREATE OR REPLACE FUNCTION public.geometry(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$parse_WKT_lwgeom$function$
CREATE OR REPLACE FUNCTION public.geometry(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_bytea$function$
CREATE OR REPLACE FUNCTION public.geometry(geography)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geometry_from_geography$function$
]]></string>
		</function>
		<function name="geometry_001" id="Function_232e99e4" isSystem="false" />
		<function name="geometry_002" id="Function_313a5d27" isSystem="false" />
		<function name="geometry_003" id="Function_1a463ec8" isSystem="false" />
		<function name="geometry_004" id="Function_191eec5b" isSystem="false" />
		<function name="geometry_005" id="Function_220a5015" isSystem="false" />
		<function name="geometry_006" id="Function_c8b6f12" isSystem="false" />
		<function name="geometry_007" id="Function_bc0b195" isSystem="false" />
		<function name="geometry_008" id="Function_27ee0a26" isSystem="false" />
		<function name="geometry_above" id="Function_293f9a52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_above(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_above_2d$function$
]]></string>
		</function>
		<function name="geometry_analyze" id="Function_19f0af97" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_analyze(internal)
 RETURNS boolean
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.1', $function$gserialized_analyze_nd$function$
]]></string>
		</function>
		<function name="geometry_below" id="Function_15e1714c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_below(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_below_2d$function$
]]></string>
		</function>
		<function name="geometry_cmp" id="Function_8ea3d81" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_cmp(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$lwgeom_cmp$function$
]]></string>
		</function>
		<function name="geometry_contained_by_raster" id="Function_2e27f386" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_contained_by_raster(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1 @ $2::geometry$function$
]]></string>
		</function>
		<function name="geometry_contains" id="Function_c8c8574" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_contains_2d$function$
]]></string>
		</function>
		<function name="geometry_distance_box" id="Function_31bc1ea2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_box(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_distance_box_2d$function$
]]></string>
		</function>
		<function name="geometry_distance_centroid" id="Function_a40b88f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_distance_centroid(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_distance_centroid_2d$function$
]]></string>
		</function>
		<function name="geometry_eq" id="Function_2b00d02c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_eq(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$lwgeom_eq$function$
]]></string>
		</function>
		<function name="geometry_ge" id="Function_15e7633f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_ge(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$lwgeom_ge$function$
]]></string>
		</function>
		<function name="geometry_gist_compress_2d" id="Function_72fadb2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_compress_2d(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_compress_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_compress_nd" id="Function_2011f3a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_compress_nd(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_compress$function$
]]></string>
		</function>
		<function name="geometry_gist_consistent_2d" id="Function_3ac7b8f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_consistent_2d(internal, geometry, integer)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_consistent_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_consistent_nd" id="Function_293d627b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_consistent_nd(internal, geometry, integer)
 RETURNS boolean
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_consistent$function$
]]></string>
		</function>
		<function name="geometry_gist_decompress_2d" id="Function_b8f66ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_decompress_2d(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_decompress_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_decompress_nd" id="Function_27d808cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_decompress_nd(internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_decompress$function$
]]></string>
		</function>
		<function name="geometry_gist_distance_2d" id="Function_2f224d00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_distance_2d(internal, geometry, integer)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_distance_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_penalty_2d" id="Function_1f56bdde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_penalty_2d(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_penalty_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_penalty_nd" id="Function_3350289c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_penalty_nd(internal, internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_penalty$function$
]]></string>
		</function>
		<function name="geometry_gist_picksplit_2d" id="Function_2e141460" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_picksplit_2d(internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_picksplit_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_picksplit_nd" id="Function_a5fdada" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_picksplit_nd(internal, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_picksplit$function$
]]></string>
		</function>
		<function name="geometry_gist_same_2d" id="Function_9cbe65" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_same_2d(geom1 geometry, geom2 geometry, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_same_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_same_nd" id="Function_2c44dd21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_same_nd(geometry, geometry, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_same$function$
]]></string>
		</function>
		<function name="geometry_gist_union_2d" id="Function_32b2b92a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_union_2d(bytea, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_union_2d$function$
]]></string>
		</function>
		<function name="geometry_gist_union_nd" id="Function_21393864" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gist_union_nd(bytea, internal)
 RETURNS internal
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_union$function$
]]></string>
		</function>
		<function name="geometry_gt" id="Function_efd40ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_gt(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$lwgeom_gt$function$
]]></string>
		</function>
		<function name="geometry_in" id="Function_6147f5b" isSystem="false" />
		<function name="geometry_le" id="Function_3ab8be30" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_le(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$lwgeom_le$function$
]]></string>
		</function>
		<function name="geometry_left" id="Function_2810f5f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_left(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_left_2d$function$
]]></string>
		</function>
		<function name="geometry_lt" id="Function_346ae4ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_lt(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$lwgeom_lt$function$
]]></string>
		</function>
		<function name="geometry_out" id="Function_442f38c" isSystem="false" />
		<function name="geometry_overabove" id="Function_156ba5c7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overabove(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_overabove_2d$function$
]]></string>
		</function>
		<function name="geometry_overbelow" id="Function_1619faa3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overbelow(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_overbelow_2d$function$
]]></string>
		</function>
		<function name="geometry_overlaps" id="Function_1a3590d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_overlaps_2d$function$
]]></string>
		</function>
		<function name="geometry_overlaps_nd" id="Function_987ed59" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overlaps_nd(geometry, geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_overlaps$function$
]]></string>
		</function>
		<function name="geometry_overleft" id="Function_26079a95" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overleft(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_overleft_2d$function$
]]></string>
		</function>
		<function name="geometry_overright" id="Function_34e6b66" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_overright(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_overright_2d$function$
]]></string>
		</function>
		<function name="geometry_raster_contain" id="Function_3033fd7c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_raster_contain(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1 ~ $2::geometry$function$
]]></string>
		</function>
		<function name="geometry_raster_overlap" id="Function_f9d9de8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_raster_overlap(geometry, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1 && $2::geometry$function$
]]></string>
		</function>
		<function name="geometry_recv" id="Function_3561c935" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_recv(internal)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_recv$function$
]]></string>
		</function>
		<function name="geometry_right" id="Function_c192740" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_right(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_right_2d$function$
]]></string>
		</function>
		<function name="geometry_same" id="Function_1528b476" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_same(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_same_2d$function$
]]></string>
		</function>
		<function name="geometry_send" id="Function_2eb4c74d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_send(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_send$function$
]]></string>
		</function>
		<function name="geometry_typmod_in" id="Function_352949c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_typmod_in(cstring[])
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geometry_typmod_in$function$
]]></string>
		</function>
		<function name="geometry_typmod_out" id="Function_2be96a9c" isSystem="false" />
		<function name="geometry_within" id="Function_34abc94c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometry_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$gserialized_within_2d$function$
]]></string>
		</function>
		<function name="geometrytype" id="Function_36198ed7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geometrytype(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_getTYPE$function$
CREATE OR REPLACE FUNCTION public.geometrytype(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_getTYPE$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the type of the geometry as a string. Eg: LINESTRING, POLYGON, MULTIPOINT, etc.]]></comment>
		</function>
		<function name="geometrytype_001" id="Function_352cb561" isSystem="false" />
		<function name="geomfromewkb" id="Function_2feda124" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geomfromewkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOMFromWKB$function$
]]></string>
		</function>
		<function name="geomfromewkt" id="Function_1d7c225e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.geomfromewkt(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$parse_WKT_lwgeom$function$
]]></string>
		</function>
		<function name="get_proj4_from_srid" id="Function_1c342cd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.get_proj4_from_srid(integer)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
BEGIN
	RETURN proj4text::text FROM spatial_ref_sys WHERE srid= $1;
END;
$function$
]]></string>
		</function>
		<function name="gettransactionid" id="Function_3b8fc1b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gettransactionid()
 RETURNS xid
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$getTransactionID$function$
]]></string>
		</function>
		<function name="gidx_in" id="Function_32e21db6" isSystem="false" />
		<function name="gidx_out" id="Function_1592ec7d" isSystem="false" />
		<function name="gserialized_gist_joinsel_2d" id="Function_18e09603" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_joinsel_2d(internal, oid, internal, smallint)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_joinsel_2d$function$
]]></string>
		</function>
		<function name="gserialized_gist_joinsel_nd" id="Function_2ebd6368" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_joinsel_nd(internal, oid, internal, smallint)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_joinsel_nd$function$
]]></string>
		</function>
		<function name="gserialized_gist_sel_2d" id="Function_2e2e78f0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_sel_2d(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_sel_2d$function$
]]></string>
		</function>
		<function name="gserialized_gist_sel_nd" id="Function_5d9aeb8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.gserialized_gist_sel_nd(internal, oid, internal, integer)
 RETURNS double precision
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$gserialized_gist_sel_nd$function$
]]></string>
		</function>
		<function name="levenshtein" id="Function_e3c1bbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.levenshtein(text, text)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein$function$
CREATE OR REPLACE FUNCTION public.levenshtein(text, text, integer, integer, integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein_with_costs$function$
]]></string>
		</function>
		<function name="levenshtein_001" id="Function_1aed8d5d" isSystem="false" />
		<function name="levenshtein_less_equal" id="Function_f9c604d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.levenshtein_less_equal(text, text, integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein_less_equal$function$
CREATE OR REPLACE FUNCTION public.levenshtein_less_equal(text, text, integer, integer, integer, integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$levenshtein_less_equal_with_costs$function$
]]></string>
		</function>
		<function name="levenshtein_less_equal_001" id="Function_3020cd72" isSystem="false" />
		<function name="lockrow" id="Function_1ca96dc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.lockrow(text, text, text)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow(current_schema(), $1, $2, $3, now()::timestamp+'1:00'); $function$
CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, text)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow($1, $2, $3, $4, now()::timestamp+'1:00'); $function$
CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, timestamp without time zone)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT LockRow(current_schema(), $1, $2, $3, $4); $function$
CREATE OR REPLACE FUNCTION public.lockrow(text, text, text, text, timestamp without time zone)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$ 
DECLARE
	myschema alias for $1;
	mytable alias for $2;
	myrid   alias for $3;
	authid alias for $4;
	expires alias for $5;
	ret int;
	mytoid oid;
	myrec RECORD;
	
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	EXECUTE 'DELETE FROM authorization_table WHERE expires < now()'; 
	SELECT c.oid INTO mytoid FROM pg_class c, pg_namespace n
		WHERE c.relname = mytable
		AND c.relnamespace = n.oid
		AND n.nspname = myschema;
	-- RAISE NOTICE 'toid: %', mytoid;
	FOR myrec IN SELECT * FROM authorization_table WHERE 
		toid = mytoid AND rid = myrid
	LOOP
		IF myrec.authid != authid THEN
			RETURN 0;
		ELSE
			RETURN 1;
		END IF;
	END LOOP;
	EXECUTE 'INSERT INTO authorization_table VALUES ('||
		quote_literal(mytoid::text)||','||quote_literal(myrid)||
		','||quote_literal(expires::text)||
		','||quote_literal(authid) ||')';
	GET DIAGNOSTICS ret = ROW_COUNT;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: a_schema_name, a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
		</function>
		<function name="lockrow_001" id="Function_9ad7cb4" isSystem="false" />
		<function name="lockrow_002" id="Function_1d95209c" isSystem="false" >
			<comment><![CDATA[args: a_table_name, a_row_key, an_auth_token - Set lock/authorization for specific row in table]]></comment>
		</function>
		<function name="lockrow_003" id="Function_8e36ea0" isSystem="false" >
			<comment><![CDATA[args: a_table_name, a_row_key, an_auth_token, expire_dt - Set lock/authorization for specific row in table]]></comment>
		</function>
		<function name="longtransactionsenabled" id="Function_2ff666ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.longtransactionsenabled()
 RETURNS boolean
 LANGUAGE plpgsql
AS $function$ 
DECLARE
	rec RECORD;
BEGIN
	FOR rec IN SELECT oid FROM pg_class WHERE relname = 'authorized_tables'
	LOOP
		return 't';
	END LOOP;
	return 'f';
END;
$function$
]]></string>
		</function>
		<function name="metaphone" id="Function_160fdfa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.metaphone(text, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$metaphone$function$
]]></string>
		</function>
		<function name="path" id="Function_29bab74c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.path(geometry)
 RETURNS path
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geometry_to_path$function$
]]></string>
		</function>
		<function name="pgis_abs_in" id="Function_2bd3cc49" isSystem="false" />
		<function name="pgis_abs_out" id="Function_3125ad8c" isSystem="false" />
		<function name="pgis_geometry_accum_finalfn" id="Function_147f37b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_finalfn(pgis_abs)
 RETURNS geometry[]
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$pgis_geometry_accum_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_accum_transfn" id="Function_69054b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_accum_transfn(pgis_abs, geometry)
 RETURNS pgis_abs
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$pgis_geometry_accum_transfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_collect_finalfn" id="Function_39bf01d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_collect_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$pgis_geometry_collect_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_makeline_finalfn" id="Function_1e7e62e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_makeline_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$pgis_geometry_makeline_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_polygonize_finalfn" id="Function_25c8ce45" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_polygonize_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$pgis_geometry_polygonize_finalfn$function$
]]></string>
		</function>
		<function name="pgis_geometry_union_finalfn" id="Function_1a7b82f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.pgis_geometry_union_finalfn(pgis_abs)
 RETURNS geometry
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$pgis_geometry_union_finalfn$function$
]]></string>
		</function>
		<function name="point" id="Function_3b051251" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.point(geometry)
 RETURNS point
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geometry_to_point$function$
]]></string>
		</function>
		<function name="polygon" id="Function_25f823de" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.polygon(geometry)
 RETURNS polygon
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geometry_to_polygon$function$
]]></string>
		</function>
		<function name="populate_geometry_columns" id="Function_8be0e28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.populate_geometry_columns(use_typmod boolean DEFAULT true)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
	inserted    integer;
	oldcount    integer;
	probed      integer;
	stale       integer;
	gcs         RECORD;
	gc          RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
BEGIN
	SELECT count(*) INTO oldcount FROM geometry_columns;
	inserted := 0;
	-- Count the number of geometry columns in all tables and views
	SELECT count(DISTINCT c.oid) INTO probed
	FROM pg_class c,
		 pg_attribute a,
		 pg_type t,
		 pg_namespace n
	WHERE (c.relkind = 'r' OR c.relkind = 'v')
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' ;
	-- Iterate through all non-dropped geometry columns
	RAISE DEBUG 'Processing Tables.....';
	FOR gcs IN
	SELECT DISTINCT ON (c.oid) c.oid, n.nspname, c.relname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%' AND c.relname != 'raster_columns' 
	LOOP
		inserted := inserted + populate_geometry_columns(gcs.oid, use_typmod);
	END LOOP;
	IF oldcount > inserted THEN
	    stale = oldcount-inserted;
	ELSE
	    stale = 0;
	END IF;
	RETURN 'probed:' ||probed|| ' inserted:'||inserted;
END
$function$
CREATE OR REPLACE FUNCTION public.populate_geometry_columns(tbl_oid oid, use_typmod boolean DEFAULT true)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	gcs         RECORD;
	gc          RECORD;
	gc_old      RECORD;
	gsrid       integer;
	gndims      integer;
	gtype       text;
	query       text;
	gc_is_valid boolean;
	inserted    integer;
	constraint_successful boolean := false;
BEGIN
	inserted := 0;
	-- Iterate through all geometry columns in this table
	FOR gcs IN
	SELECT n.nspname, c.relname, a.attname
		FROM pg_class c,
			 pg_attribute a,
			 pg_type t,
			 pg_namespace n
		WHERE c.relkind = 'r'
		AND t.typname = 'geometry'
		AND a.attisdropped = false
		AND a.atttypid = t.oid
		AND a.attrelid = c.oid
		AND c.relnamespace = n.oid
		AND n.nspname NOT ILIKE 'pg_temp%'
		AND c.oid = tbl_oid
	LOOP
        RAISE DEBUG 'Processing column %.%.%', gcs.nspname, gcs.relname, gcs.attname;
    
        gc_is_valid := true;
        -- Find the srid, coord_dimension, and type of current geometry
        -- in geometry_columns -- which is now a view
        
        SELECT type, srid, coord_dimension INTO gc_old 
            FROM geometry_columns 
            WHERE f_table_schema = gcs.nspname AND f_table_name = gcs.relname AND f_geometry_column = gcs.attname; 
            
        IF upper(gc_old.type) = 'GEOMETRY' THEN
        -- This is an unconstrained geometry we need to do something
        -- We need to figure out what to set the type by inspecting the data
            EXECUTE 'SELECT st_srid(' || quote_ident(gcs.attname) || ') As srid, GeometryType(' || quote_ident(gcs.attname) || ') As type, ST_NDims(' || quote_ident(gcs.attname) || ') As dims ' ||
                     ' FROM ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                     ' WHERE ' || quote_ident(gcs.attname) || ' IS NOT NULL LIMIT 1;'
                INTO gc;
            IF gc IS NULL THEN -- there is no data so we can not determine geometry type
            	RAISE WARNING 'No data in table %.%, so no information to determine geometry type and srid', gcs.nspname, gcs.relname;
            	RETURN 0;
            END IF;
            gsrid := gc.srid; gtype := gc.type; gndims := gc.dims;
            	
            IF use_typmod THEN
                BEGIN
                    EXECUTE 'ALTER TABLE ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || ' ALTER COLUMN ' || quote_ident(gcs.attname) || 
                        ' TYPE geometry(' || postgis_type_name(gtype, gndims, true) || ', ' || gsrid::text  || ') ';
                    inserted := inserted + 1;
                EXCEPTION
                        WHEN invalid_parameter_value OR feature_not_supported THEN
                        RAISE WARNING 'Could not convert ''%'' in ''%.%'' to use typmod with srid %, type %: %', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), gsrid, postgis_type_name(gtype, gndims, true), SQLERRM;
                            gc_is_valid := false;
                END;
                
            ELSE
                -- Try to apply srid check to column
            	constraint_successful = false;
                IF (gsrid > 0 AND postgis_constraint_srid(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || 
                                 ' ADD CONSTRAINT ' || quote_ident('enforce_srid_' || gcs.attname) || 
                                 ' CHECK (st_srid(' || quote_ident(gcs.attname) || ') = ' || gsrid || ')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_srid(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gsrid;
                            gc_is_valid := false;
                    END;
                END IF;
                
                -- Try to apply ndims check to column
                IF (gndims IS NOT NULL AND postgis_constraint_dims(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                                 ADD CONSTRAINT ' || quote_ident('enforce_dims_' || gcs.attname) || '
                                 CHECK (st_ndims(' || quote_ident(gcs.attname) || ') = '||gndims||')';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            RAISE WARNING 'Not inserting ''%'' in ''%.%'' into geometry_columns: could not apply constraint CHECK (st_ndims(%) = %)', quote_ident(gcs.attname), quote_ident(gcs.nspname), quote_ident(gcs.relname), quote_ident(gcs.attname), gndims;
                            gc_is_valid := false;
                    END;
                END IF;
    
                -- Try to apply geometrytype check to column
                IF (gtype IS NOT NULL AND postgis_constraint_type(gcs.nspname, gcs.relname,gcs.attname) IS NULL ) THEN
                    BEGIN
                        EXECUTE 'ALTER TABLE ONLY ' || quote_ident(gcs.nspname) || '.' || quote_ident(gcs.relname) || '
                        ADD CONSTRAINT ' || quote_ident('enforce_geotype_' || gcs.attname) || '
                        CHECK ((geometrytype(' || quote_ident(gcs.attname) || ') = ' || quote_literal(gtype) || ') OR (' || quote_ident(gcs.attname) || ' IS NULL))';
                        constraint_successful := true;
                    EXCEPTION
                        WHEN check_violation THEN
                            -- No geometry check can be applied. This column contains a number of geometry types.
                            RAISE WARNING 'Could not add geometry type check (%) to table column: %.%.%', gtype, quote_ident(gcs.nspname),quote_ident(gcs.relname),quote_ident(gcs.attname);
                    END;
                END IF;
                 --only count if we were successful in applying at least one constraint
                IF constraint_successful THEN
                	inserted := inserted + 1;
                END IF;
            END IF;	        
	    END IF;
	END LOOP;
	RETURN inserted;
END
$function$
]]></string>
			<comment><![CDATA[args: use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
		</function>
		<function name="populate_geometry_columns_001" id="Function_3ae82682" isSystem="false" >
			<comment><![CDATA[args: relation_oid, use_typmod=true - Ensures geometry columns are defined with type modifiers or have appropriate spatial constraints This ensures they will be registered correctly in geometry_columns view. By default will convert all geometry columns with no type modifier to ones with type modifiers. To get old behavior set use_typmod=false]]></comment>
		</function>
		<function name="postgis_addbbox" id="Function_2c91ced8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_addbbox(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_addBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Add bounding box to the geometry.]]></comment>
		</function>
		<function name="postgis_cache_bbox" id="Function_192f0527" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_cache_bbox()
 RETURNS trigger
 LANGUAGE c
AS '$libdir/postgis-2.1', $function$cache_bbox$function$
]]></string>
		</function>
		<function name="postgis_constraint_dims" id="Function_172ca6d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_dims(geomschema text, geomtable text, geomcolumn text)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT  replace(split_part(s.consrc, ' = ', 2), ')', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%ndims(% = %';
$function$
]]></string>
		</function>
		<function name="postgis_constraint_srid" id="Function_107b7dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_srid(geomschema text, geomtable text, geomcolumn text)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT replace(replace(split_part(s.consrc, ' = ', 2), ')', ''), '(', '')::integer
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%srid(% = %';
$function$
]]></string>
		</function>
		<function name="postgis_constraint_type" id="Function_13b990fa" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_constraint_type(geomschema text, geomtable text, geomcolumn text)
 RETURNS character varying
 LANGUAGE sql
 STABLE STRICT
AS $function$
SELECT  replace(split_part(s.consrc, '''', 2), ')', '')::varchar		
		 FROM pg_class c, pg_namespace n, pg_attribute a, pg_constraint s
		 WHERE n.nspname = $1
		 AND c.relname = $2
		 AND a.attname = $3
		 AND a.attrelid = c.oid
		 AND s.connamespace = n.oid
		 AND s.conrelid = c.oid
		 AND a.attnum = ANY (s.conkey)
		 AND s.consrc LIKE '%geometrytype(% = %';
$function$
]]></string>
		</function>
		<function name="postgis_dropbbox" id="Function_11746e44" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_dropbbox(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_dropBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Drop the bounding box cache from the geometry.]]></comment>
		</function>
		<function name="postgis_full_version" id="Function_35c55d57" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_full_version()
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
DECLARE
	libver text;
	svnver text;
	projver text;
	geosver text;
	sfcgalver text;
	cgalver text;
	gdalver text;
	libxmlver text;
	dbproc text;
	relproc text;
	fullver text;
	rast_lib_ver text;
	rast_scr_ver text;
	topo_scr_ver text;
	json_lib_ver text;
BEGIN
	SELECT postgis_lib_version() INTO libver;
	SELECT postgis_proj_version() INTO projver;
	SELECT postgis_geos_version() INTO geosver;
	SELECT postgis_libjson_version() INTO json_lib_ver;
	BEGIN
		SELECT postgis_gdal_version() INTO gdalver;
	EXCEPTION
		WHEN undefined_function THEN
			gdalver := NULL;
			RAISE NOTICE 'Function postgis_gdal_version() not found.  Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT postgis_sfcgal_version() INTO sfcgalver;
	EXCEPTION
		WHEN undefined_function THEN
			sfcgalver := NULL;
	END;
	SELECT postgis_libxml_version() INTO libxmlver;
	SELECT postgis_scripts_installed() INTO dbproc;
	SELECT postgis_scripts_released() INTO relproc;
	select postgis_svn_version() INTO svnver;
	BEGIN
		SELECT topology.postgis_topology_scripts_installed() INTO topo_scr_ver;
	EXCEPTION
		WHEN undefined_function OR invalid_schema_name THEN
			topo_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_topology_scripts_installed() not found. Is topology support enabled and topology.sql installed?';
		WHEN insufficient_privilege THEN
			RAISE NOTICE 'Topology support cannot be inspected. Is current user granted USAGE on schema "topology" ?';
		WHEN OTHERS THEN
			RAISE NOTICE 'Function postgis_topology_scripts_installed() could not be called: % (%)', SQLERRM, SQLSTATE;
	END;
	BEGIN
		SELECT postgis_raster_scripts_installed() INTO rast_scr_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_scr_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_scripts_installed() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;
	BEGIN
		SELECT postgis_raster_lib_version() INTO rast_lib_ver;
	EXCEPTION
		WHEN undefined_function THEN
			rast_lib_ver := NULL;
			RAISE NOTICE 'Function postgis_raster_lib_version() not found. Is raster support enabled and rtpostgis.sql installed?';
	END;
	fullver = 'POSTGIS="' || libver;
	IF  svnver IS NOT NULL THEN
		fullver = fullver || ' r' || svnver;
	END IF;
	fullver = fullver || '"';
	IF  geosver IS NOT NULL THEN
		fullver = fullver || ' GEOS="' || geosver || '"';
	END IF;
	IF  sfcgalver IS NOT NULL THEN
		fullver = fullver || ' SFCGAL="' || sfcgalver || '"';
	END IF;
	IF  projver IS NOT NULL THEN
		fullver = fullver || ' PROJ="' || projver || '"';
	END IF;
	IF  gdalver IS NOT NULL THEN
		fullver = fullver || ' GDAL="' || gdalver || '"';
	END IF;
	IF  libxmlver IS NOT NULL THEN
		fullver = fullver || ' LIBXML="' || libxmlver || '"';
	END IF;
	IF json_lib_ver IS NOT NULL THEN
		fullver = fullver || ' LIBJSON="' || json_lib_ver || '"';
	END IF;
	-- fullver = fullver || ' DBPROC="' || dbproc || '"';
	-- fullver = fullver || ' RELPROC="' || relproc || '"';
	IF dbproc != relproc THEN
		fullver = fullver || ' (core procs from "' || dbproc || '" need upgrade)';
	END IF;
	IF topo_scr_ver IS NOT NULL THEN
		fullver = fullver || ' TOPOLOGY';
		IF topo_scr_ver != relproc THEN
			fullver = fullver || ' (topology procs from "' || topo_scr_ver || '" need upgrade)';
		END IF;
	END IF;
	IF rast_lib_ver IS NOT NULL THEN
		fullver = fullver || ' RASTER';
		IF rast_lib_ver != relproc THEN
			fullver = fullver || ' (raster lib from "' || rast_lib_ver || '" need upgrade)';
		END IF;
	END IF;
	IF rast_scr_ver IS NOT NULL AND rast_scr_ver != relproc THEN
		fullver = fullver || ' (raster procs from "' || rast_scr_ver || '" need upgrade)';
	END IF;
	RETURN fullver;
END
$function$
]]></string>
			<comment><![CDATA[Reports full postgis version and build configuration infos.]]></comment>
		</function>
		<function name="postgis_gdal_version" id="Function_17028032" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_gdal_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_gdal_version$function$
]]></string>
		</function>
		<function name="postgis_geos_version" id="Function_2493a659" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_geos_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_geos_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the GEOS library.]]></comment>
		</function>
		<function name="postgis_getbbox" id="Function_16e9bd94" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_getbbox(geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_BOX2D$function$
]]></string>
		</function>
		<function name="postgis_hasbbox" id="Function_2faa3257" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_hasbbox(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_hasBBOX$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns TRUE if the bbox of this geometry is cached, FALSE otherwise.]]></comment>
		</function>
		<function name="postgis_lib_build_date" id="Function_2ddf7f51" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_lib_build_date()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_lib_build_date$function$
]]></string>
			<comment><![CDATA[Returns build date of the PostGIS library.]]></comment>
		</function>
		<function name="postgis_lib_version" id="Function_38400a87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_lib_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_lib_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the PostGIS library.]]></comment>
		</function>
		<function name="postgis_libjson_version" id="Function_f1fb004" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_libjson_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$postgis_libjson_version$function$
]]></string>
		</function>
		<function name="postgis_libxml_version" id="Function_3b144cd9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_libxml_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_libxml_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the libxml2 library.]]></comment>
		</function>
		<function name="postgis_noop" id="Function_cfca248" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_noop(geometry)
 RETURNS geometry
 LANGUAGE c
 STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_noop$function$
]]></string>
		</function>
		<function name="postgis_proj_version" id="Function_4f69928" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_proj_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_proj_version$function$
]]></string>
			<comment><![CDATA[Returns the version number of the PROJ4 library.]]></comment>
		</function>
		<function name="postgis_raster_lib_build_date" id="Function_308b071" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_lib_build_date()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_lib_build_date$function$
]]></string>
			<comment><![CDATA[Reports full raster library build date.]]></comment>
		</function>
		<function name="postgis_raster_lib_version" id="Function_2dcffa23" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_lib_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_lib_version$function$
]]></string>
			<comment><![CDATA[Reports full raster version and build configuration infos.]]></comment>
		</function>
		<function name="postgis_raster_scripts_installed" id="Function_17c52f3f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_raster_scripts_installed()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT '2.1.7'::text || ' r' || 13414::text AS version $function$
]]></string>
		</function>
		<function name="postgis_scripts_build_date" id="Function_3312c276" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_build_date()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT '2015-07-10 09:31:18'::text AS version$function$
]]></string>
			<comment><![CDATA[Returns build date of the PostGIS scripts.]]></comment>
		</function>
		<function name="postgis_scripts_installed" id="Function_1071bbbd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_installed()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT '2.1.7'::text || ' r' || 13414::text AS version $function$
]]></string>
			<comment><![CDATA[Returns version of the postgis scripts installed in this database.]]></comment>
		</function>
		<function name="postgis_scripts_released" id="Function_1a2c99c5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_scripts_released()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_scripts_released$function$
]]></string>
			<comment><![CDATA[Returns the version number of the postgis.sql script released with the installed postgis lib.]]></comment>
		</function>
		<function name="postgis_svn_version" id="Function_8de8f90" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_svn_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_svn_version$function$
]]></string>
		</function>
		<function name="postgis_transform_geometry" id="Function_3b5851fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_transform_geometry(geometry, text, text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$transform_geom$function$
]]></string>
		</function>
		<function name="postgis_type_name" id="Function_718ae4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_type_name(geomname character varying, coord_dimension integer, use_new_name boolean DEFAULT true)
 RETURNS character varying
 LANGUAGE sql
 IMMUTABLE STRICT COST 200
AS $function$
 SELECT CASE WHEN $3 THEN new_name ELSE old_name END As geomname
 	FROM 
 	( VALUES
 		 ('GEOMETRY', 'Geometry', 2) ,
 		 	('GEOMETRY', 'GeometryZ', 3) ,
 		 	('GEOMETRY', 'GeometryZM', 4) ,
			('GEOMETRYCOLLECTION', 'GeometryCollection', 2) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZ', 3) ,
			('GEOMETRYCOLLECTIONM', 'GeometryCollectionM', 3) ,
			('GEOMETRYCOLLECTION', 'GeometryCollectionZM', 4) ,
			
			('POINT', 'Point',2) ,
			('POINTM','PointM',3) ,
			('POINT', 'PointZ',3) ,
			('POINT', 'PointZM',4) ,
			
			('MULTIPOINT','MultiPoint',2) ,
			('MULTIPOINT','MultiPointZ',3) ,
			('MULTIPOINTM','MultiPointM',3) ,
			('MULTIPOINT','MultiPointZM',4) ,
			
			('POLYGON', 'Polygon',2) ,
			('POLYGON', 'PolygonZ',3) ,
			('POLYGONM', 'PolygonM',3) ,
			('POLYGON', 'PolygonZM',4) ,
			
			('MULTIPOLYGON', 'MultiPolygon',2) ,
			('MULTIPOLYGON', 'MultiPolygonZ',3) ,
			('MULTIPOLYGONM', 'MultiPolygonM',3) ,
			('MULTIPOLYGON', 'MultiPolygonZM',4) ,
			
			('MULTILINESTRING', 'MultiLineString',2) ,
			('MULTILINESTRING', 'MultiLineStringZ',3) ,
			('MULTILINESTRINGM', 'MultiLineStringM',3) ,
			('MULTILINESTRING', 'MultiLineStringZM',4) ,
			
			('LINESTRING', 'LineString',2) ,
			('LINESTRING', 'LineStringZ',3) ,
			('LINESTRINGM', 'LineStringM',3) ,
			('LINESTRING', 'LineStringZM',4) ,
			
			('CIRCULARSTRING', 'CircularString',2) ,
			('CIRCULARSTRING', 'CircularStringZ',3) ,
			('CIRCULARSTRINGM', 'CircularStringM',3) ,
			('CIRCULARSTRING', 'CircularStringZM',4) ,
			
			('COMPOUNDCURVE', 'CompoundCurve',2) ,
			('COMPOUNDCURVE', 'CompoundCurveZ',3) ,
			('COMPOUNDCURVEM', 'CompoundCurveM',3) ,
			('COMPOUNDCURVE', 'CompoundCurveZM',4) ,
			
			('CURVEPOLYGON', 'CurvePolygon',2) ,
			('CURVEPOLYGON', 'CurvePolygonZ',3) ,
			('CURVEPOLYGONM', 'CurvePolygonM',3) ,
			('CURVEPOLYGON', 'CurvePolygonZM',4) ,
			
			('MULTICURVE', 'MultiCurve',2 ) ,
			('MULTICURVE', 'MultiCurveZ',3 ) ,
			('MULTICURVEM', 'MultiCurveM',3 ) ,
			('MULTICURVE', 'MultiCurveZM',4 ) ,
			
			('MULTISURFACE', 'MultiSurface', 2) ,
			('MULTISURFACE', 'MultiSurfaceZ', 3) ,
			('MULTISURFACEM', 'MultiSurfaceM', 3) ,
			('MULTISURFACE', 'MultiSurfaceZM', 4) ,
			
			('POLYHEDRALSURFACE', 'PolyhedralSurface',2) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZ',3) ,
			('POLYHEDRALSURFACEM', 'PolyhedralSurfaceM',3) ,
			('POLYHEDRALSURFACE', 'PolyhedralSurfaceZM',4) ,
			
			('TRIANGLE', 'Triangle',2) ,
			('TRIANGLE', 'TriangleZ',3) ,
			('TRIANGLEM', 'TriangleM',3) ,
			('TRIANGLE', 'TriangleZM',4) ,
			('TIN', 'Tin', 2),
			('TIN', 'TinZ', 3),
			('TIN', 'TinM', 3),
			('TIN', 'TinZM', 4) )
			 As g(old_name, new_name, coord_dimension)
		WHERE (upper(old_name) = upper($1) OR upper(new_name) = upper($1))
			AND coord_dimension = $2;
$function$
]]></string>
		</function>
		<function name="postgis_typmod_dims" id="Function_3b0c9415" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_dims(integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$postgis_typmod_dims$function$
]]></string>
		</function>
		<function name="postgis_typmod_srid" id="Function_2b1468eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_srid(integer)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$postgis_typmod_srid$function$
]]></string>
		</function>
		<function name="postgis_typmod_type" id="Function_1c959b4b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_typmod_type(integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$postgis_typmod_type$function$
]]></string>
		</function>
		<function name="postgis_version" id="Function_12071ef2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.postgis_version()
 RETURNS text
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$postgis_version$function$
]]></string>
			<comment><![CDATA[Returns PostGIS version number and compile-time options.]]></comment>
		</function>
		<function name="raster_above" id="Function_151c2e4f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_above(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry |>> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_below" id="Function_1a557466" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_below(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry <<| $2::geometry$function$
]]></string>
		</function>
		<function name="raster_contain" id="Function_105dfc4d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contain(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry ~ $2::geometry$function$
]]></string>
		</function>
		<function name="raster_contained" id="Function_10f8beab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contained(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry @ $2::geometry$function$
]]></string>
		</function>
		<function name="raster_contained_by_geometry" id="Function_28f506f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_contained_by_geometry(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry @ $2$function$
]]></string>
		</function>
		<function name="raster_eq" id="Function_1059f33f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_eq(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT raster_hash($1) = raster_hash($2) $function$
]]></string>
		</function>
		<function name="raster_geometry_contain" id="Function_2bf4a435" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_geometry_contain(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry ~ $2$function$
]]></string>
		</function>
		<function name="raster_geometry_overlap" id="Function_27f00b79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_geometry_overlap(raster, geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry && $2$function$
]]></string>
		</function>
		<function name="raster_hash" id="Function_e9a55d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_hash(raster)
 RETURNS integer
 LANGUAGE internal
 IMMUTABLE STRICT
AS $function$hashvarlena$function$
]]></string>
		</function>
		<function name="raster_in" id="Function_f19392f" isSystem="false" />
		<function name="raster_left" id="Function_708514d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_left(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry << $2::geometry$function$
]]></string>
		</function>
		<function name="raster_out" id="Function_27efadf6" isSystem="false" />
		<function name="raster_overabove" id="Function_31653b0f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overabove(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry |&> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overbelow" id="Function_1fc3c75a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overbelow(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry &<| $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overlap" id="Function_1f7179db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overlap(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry && $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overleft" id="Function_1e49960d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overleft(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry &< $2::geometry$function$
]]></string>
		</function>
		<function name="raster_overright" id="Function_1df335bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_overright(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry &> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_right" id="Function_12f0483e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_right(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry >> $2::geometry$function$
]]></string>
		</function>
		<function name="raster_same" id="Function_1b819a52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.raster_same(raster, raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select $1::geometry ~= $2::geometry$function$
]]></string>
		</function>
		<function name="soundex" id="Function_2b527d01" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.soundex(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$soundex$function$
]]></string>
		</function>
		<function name="spheroid_in" id="Function_f75e848" isSystem="false" />
		<function name="spheroid_out" id="Function_3340dd38" isSystem="false" />
		<function name="st_3dclosestpoint" id="Function_1bb9c333" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dclosestpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_closestpoint3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional point on g1 that is closest to g2. This is the first point of the 3D shortest line.]]></comment>
		</function>
		<function name="st_3ddfullywithin" id="Function_1b70fa1c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDFullyWithin($1, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance - Returns true if all of the 3D geometries are within the specified distance of one another.]]></comment>
		</function>
		<function name="st_3ddistance" id="Function_229b7f01" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$distance3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units.]]></comment>
		</function>
		<function name="st_3ddwithin" id="Function_cae42f8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3ddwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_3DDWithin($1, $2, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance_of_srid - For 3d (z) geometry type Returns true if two geometries 3d distance is within number of units.]]></comment>
		</function>
		<function name="st_3dextent" id="Function_308b1272" isSystem="false" >
			<comment><![CDATA[args: geomfield - an aggregate function that returns the box3D bounding box that bounds rows of geometries.]]></comment>
		</function>
		<function name="st_3dintersects" id="Function_33e3f08f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dintersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_3DIntersects($1, $2)$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries "spatially intersect" in 3d - only for points and linestrings]]></comment>
		</function>
		<function name="st_3dlength" id="Function_16b306bd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlength(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_length_linestring$function$
]]></string>
			<comment><![CDATA[args: a_3dlinestring - Returns the 3-dimensional or 2-dimensional length of the geometry if it is a linestring or multi-linestring.]]></comment>
		</function>
		<function name="st_3dlength_spheroid" id="Function_1b0ee594" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlength_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_length_ellipsoid_linestring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_spheroid - Calculates the length of a geometry on an ellipsoid, taking the elevation into account. This is just an alias for ST_Length_Spheroid.]]></comment>
		</function>
		<function name="st_3dlongestline" id="Function_8b00135" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dlongestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_longestline3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional longest line between two geometries]]></comment>
		</function>
		<function name="st_3dmakebox" id="Function_65aa4e6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dmakebox(geom1 geometry, geom2 geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_construct$function$
]]></string>
			<comment><![CDATA[args: point3DLowLeftBottom, point3DUpRightTop - Creates a BOX3D defined by the given 3d point geometries.]]></comment>
		</function>
		<function name="st_3dmaxdistance" id="Function_2774652a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dmaxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_maxdistance3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 3-dimensional cartesian maximum distance (based on spatial ref) between two geometries in projected units.]]></comment>
		</function>
		<function name="st_3dperimeter" id="Function_2688df43" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dperimeter(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_perimeter_poly$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the 3-dimensional perimeter of the geometry, if it is a polygon or multi-polygon.]]></comment>
		</function>
		<function name="st_3dshortestline" id="Function_309bcafc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_3dshortestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_shortestline3d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 3-dimensional shortest line between two geometries]]></comment>
		</function>
		<function name="st_accum" id="Function_14babb72" isSystem="false" >
			<comment><![CDATA[args: geomfield - Aggregate. Constructs an array of geometries.]]></comment>
		</function>
		<function name="st_addband" id="Function_1255a630" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addband(rast raster, addbandargset addbandarg[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_addBand$function$
CREATE OR REPLACE FUNCTION public.st_addband(rast raster, pixeltype text, initialvalue double precision DEFAULT 0::numeric, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_addband($1, ARRAY[ROW(NULL, $2, $3, $4)]::addbandarg[]) $function$
CREATE OR REPLACE FUNCTION public.st_addband(torast raster, fromrast raster, fromband integer DEFAULT 1, torastindex integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_copyBand$function$
CREATE OR REPLACE FUNCTION public.st_addband(torast raster, fromrasts raster[], fromband integer DEFAULT 1, torastindex integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_addBandRasterArray$function$
CREATE OR REPLACE FUNCTION public.st_addband(rast raster, index integer, pixeltype text, initialvalue double precision DEFAULT 0::numeric, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_addband($1, ARRAY[ROW($2, $3, $4, $5)]::addbandarg[]) $function$
CREATE OR REPLACE FUNCTION public.st_addband(rast raster, index integer, outdbfile text, outdbindex integer[], nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_addBandOutDB$function$
CREATE OR REPLACE FUNCTION public.st_addband(rast raster, outdbfile text, outdbindex integer[], index integer DEFAULT NULL::integer, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_AddBand($1, $4, $2, $3, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, addbandargset - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_001" id="Function_353d1875" isSystem="false" >
			<comment><![CDATA[args: rast, index, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_002" id="Function_177986e7" isSystem="false" >
			<comment><![CDATA[args: rast, pixeltype, initialvalue=0, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_003" id="Function_2a9545af" isSystem="false" >
			<comment><![CDATA[args: torast, fromrast, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_004" id="Function_323790ed" isSystem="false" >
			<comment><![CDATA[args: torast, fromrasts, fromband=1, torastindex=at_end - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_005" id="Function_1b524288" isSystem="false" >
			<comment><![CDATA[args: rast, index, outdbfile, outdbindex, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addband_006" id="Function_65094c8" isSystem="false" >
			<comment><![CDATA[args: rast, outdbfile, outdbindex, index=at_end, nodataval=NULL - Returns a raster with the new band(s) of given type added with given initial value in the given index location. If no index is specified, the band is added to the end.]]></comment>
		</function>
		<function name="st_addmeasure" id="Function_57445cb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addmeasure(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_AddMeasure$function$
]]></string>
			<comment><![CDATA[args: geom_mline, measure_start, measure_end - Return a derived geometry with measure elements linearly interpolated between the start and end points. If the geometry has no measure dimension, one is added. If the geometry has a measure dimension, it is over-written with new values. Only LINESTRINGS and MULTILINESTRINGS are supported.]]></comment>
		</function>
		<function name="st_addpoint" id="Function_26ef296b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_addpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_addpoint$function$
CREATE OR REPLACE FUNCTION public.st_addpoint(geom1 geometry, geom2 geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_addpoint$function$
]]></string>
			<comment><![CDATA[args: linestring, point - Adds a point to a LineString before point <position> (0-based index).]]></comment>
		</function>
		<function name="st_addpoint_001" id="Function_4c19262" isSystem="false" >
			<comment><![CDATA[args: linestring, point, position - Adds a point to a LineString before point <position> (0-based index).]]></comment>
		</function>
		<function name="st_affine" id="Function_d3dc9af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  $2, $3, 0,  $4, $5, 0,  0, 0, 1,  $6, $7, 0)$function$
CREATE OR REPLACE FUNCTION public.st_affine(geometry, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_affine$function$
]]></string>
			<comment><![CDATA[args: geomA, a, b, c, d, e, f, g, h, i, xoff, yoff, zoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.]]></comment>
		</function>
		<function name="st_affine_001" id="Function_be4e264" isSystem="false" >
			<comment><![CDATA[args: geomA, a, b, d, e, xoff, yoff - Applies a 3d affine transformation to the geometry to do things like translate, rotate, scale in one step.]]></comment>
		</function>
		<function name="st_approxcount" id="Function_73fc5f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, nband integer, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, $2, TRUE, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rast raster, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, 1, TRUE, $2) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, nband integer, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, TRUE, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, 1, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxcount(rastertable text, rastercolumn text, sample_percent double precision)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, 1, TRUE, $3) $function$
]]></string>
		</function>
		<function name="st_approxcount_001" id="Function_105c428a" isSystem="false" />
		<function name="st_approxcount_002" id="Function_15e8b7a4" isSystem="false" />
		<function name="st_approxcount_003" id="Function_21e3c76f" isSystem="false" />
		<function name="st_approxcount_004" id="Function_154bc4b5" isSystem="false" />
		<function name="st_approxcount_005" id="Function_26feae27" isSystem="false" />
		<function name="st_approxcount_006" id="Function_1c3744a7" isSystem="false" />
		<function name="st_approxcount_007" id="Function_193cac10" isSystem="false" />
		<function name="st_approxhistogram" id="Function_2b9a0368" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, $6, $7) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, $4, $5, NULL, $6) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, 1, TRUE, $2, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rast raster, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, $3, $4, NULL, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, $7, $8) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, $4, $5, $6, NULL, $7) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, $4, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, sample_percent double precision, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, 1, TRUE, $3, 0, NULL, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, $6, $7) $function$
CREATE OR REPLACE FUNCTION public.st_approxhistogram(rastertable text, rastercolumn text, nband integer, sample_percent double precision, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, $4, $5, NULL, $6) $function$
]]></string>
		</function>
		<function name="st_approxhistogram_001" id="Function_90e913" isSystem="false" />
		<function name="st_approxhistogram_002" id="Function_25307bb9" isSystem="false" />
		<function name="st_approxhistogram_003" id="Function_3400be8d" isSystem="false" />
		<function name="st_approxhistogram_004" id="Function_cc1adfe" isSystem="false" />
		<function name="st_approxhistogram_005" id="Function_ba04aee" isSystem="false" />
		<function name="st_approxhistogram_006" id="Function_15e45b23" isSystem="false" />
		<function name="st_approxhistogram_007" id="Function_c59ec9b" isSystem="false" />
		<function name="st_approxhistogram_008" id="Function_23497441" isSystem="false" />
		<function name="st_approxhistogram_009" id="Function_271b7356" isSystem="false" />
		<function name="st_approxhistogram_010" id="Function_90961df" isSystem="false" />
		<function name="st_approxhistogram_011" id="Function_21b88e36" isSystem="false" />
		<function name="st_approxquantile" id="Function_b5d715" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, 1, TRUE, $3, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT (_st_quantile($1, 1, $2, 0.1, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT (_st_quantile($1, 1, TRUE, 0.1, ARRAY[$2]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT (_st_quantile($1, $2, 1, $3, 0.1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, $2, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, 1, TRUE, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_quantile($1, 1, TRUE, 0.1, $2) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, $4, ARRAY[$5]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, nband integer, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, TRUE, $3, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rast raster, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, 1, TRUE, $2, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, $3, TRUE, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, sample_percent double precision, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, 1, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, 1, TRUE, 0.1, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, $4, $5, ARRAY[$6]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, nband integer, sample_percent double precision, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, TRUE, $4, ARRAY[$5]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_approxquantile(rastertable text, rastercolumn text, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT (_st_quantile($1, $2, 1, TRUE, 0.1, ARRAY[$3]::double precision[])).value $function$
]]></string>
		</function>
		<function name="st_approxquantile_001" id="Function_2df2dd69" isSystem="false" />
		<function name="st_approxquantile_002" id="Function_1960a5b9" isSystem="false" />
		<function name="st_approxquantile_003" id="Function_2934ea29" isSystem="false" />
		<function name="st_approxquantile_004" id="Function_3729ee8d" isSystem="false" />
		<function name="st_approxquantile_005" id="Function_33122a3" isSystem="false" />
		<function name="st_approxquantile_006" id="Function_23be71bd" isSystem="false" />
		<function name="st_approxquantile_007" id="Function_18d0279" isSystem="false" />
		<function name="st_approxquantile_008" id="Function_1a88a7e0" isSystem="false" />
		<function name="st_approxquantile_009" id="Function_2763ae2e" isSystem="false" />
		<function name="st_approxquantile_010" id="Function_1db80cc2" isSystem="false" />
		<function name="st_approxquantile_011" id="Function_36c2a676" isSystem="false" />
		<function name="st_approxquantile_012" id="Function_12e742b9" isSystem="false" />
		<function name="st_approxquantile_013" id="Function_225e02c4" isSystem="false" />
		<function name="st_approxquantile_014" id="Function_9d484ae" isSystem="false" />
		<function name="st_approxquantile_015" id="Function_11d620f6" isSystem="false" />
		<function name="st_approxquantile_016" id="Function_c51545f" isSystem="false" />
		<function name="st_approxquantile_017" id="Function_1278cdba" isSystem="false" />
		<function name="st_approxsummarystats" id="Function_3368c65b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, nband integer, sample_percent double precision, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, TRUE, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, exclude_nodata_value boolean, sample_percent double precision DEFAULT 0.1, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rast raster, sample_percent double precision, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, 1, TRUE, $2) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, sample_percent double precision DEFAULT 0.1, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, nband integer, sample_percent double precision, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, TRUE, $4) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, 1, $3, 0.1) $function$
CREATE OR REPLACE FUNCTION public.st_approxsummarystats(rastertable text, rastercolumn text, sample_percent double precision, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, 1, TRUE, $3) $function$
]]></string>
		</function>
		<function name="st_approxsummarystats_001" id="Function_2dfdd68a" isSystem="false" />
		<function name="st_approxsummarystats_002" id="Function_2d0ceb87" isSystem="false" />
		<function name="st_approxsummarystats_003" id="Function_37d02c81" isSystem="false" />
		<function name="st_approxsummarystats_004" id="Function_36db3ce0" isSystem="false" />
		<function name="st_approxsummarystats_005" id="Function_2a93fdbb" isSystem="false" />
		<function name="st_approxsummarystats_006" id="Function_3702723f" isSystem="false" />
		<function name="st_approxsummarystats_007" id="Function_31cf5af1" isSystem="false" />
		<function name="st_area" id="Function_24b8f199" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area(text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Area($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_area(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$area$function$
CREATE OR REPLACE FUNCTION public.st_area(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_area$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.]]></comment>
		</function>
		<function name="st_area2d" id="Function_1fdef1cc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_area2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_area_polygon$function$
]]></string>
		</function>
		<function name="st_area_001" id="Function_26260de6" isSystem="false" >
			<comment><![CDATA[args: geog, use_spheroid=true - Returns the area of the surface if it is a polygon or multi-polygon. For "geometry" type area is in SRID units. For "geography" area is in square meters.]]></comment>
		</function>
		<function name="st_area_002" id="Function_1a422343" isSystem="false" />
		<function name="st_asbinary" id="Function_266e95ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asbinary(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asBinary$function$
CREATE OR REPLACE FUNCTION public.st_asbinary(geography)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asBinary$function$
CREATE OR REPLACE FUNCTION public.st_asbinary(geometry, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asBinary$function$
CREATE OR REPLACE FUNCTION public.st_asbinary(geography, text)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsBinary($1::geometry, $2);  $function$
CREATE OR REPLACE FUNCTION public.st_asbinary(raster, outasin boolean DEFAULT false)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_to_binary$function$
]]></string>
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_001" id="Function_2d7a51b5" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_002" id="Function_321feb2d" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_003" id="Function_26e8bb8d" isSystem="false" >
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry/geography without SRID meta data.]]></comment>
		</function>
		<function name="st_asbinary_004" id="Function_32477f12" isSystem="false" >
			<comment><![CDATA[args: rast, outasin=FALSE - Return the Well-Known Binary (WKB) representation of the raster without SRID meta data.]]></comment>
		</function>
		<function name="st_asewkb" id="Function_1ae70797" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkb(geometry)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$WKBFromLWGEOM$function$
CREATE OR REPLACE FUNCTION public.st_asewkb(geometry, text)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$WKBFromLWGEOM$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkb_001" id="Function_171e1ccb" isSystem="false" >
			<comment><![CDATA[args: g1, NDR_or_XDR - Return the Well-Known Binary (WKB) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkt" id="Function_3bc8cd9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asewkt(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsEWKT($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_asewkt(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asEWKT$function$
CREATE OR REPLACE FUNCTION public.st_asewkt(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asEWKT$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkt_001" id="Function_2cc7086d" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry with SRID meta data.]]></comment>
		</function>
		<function name="st_asewkt_002" id="Function_3b84c719" isSystem="false" />
		<function name="st_asgdalraster" id="Function_197a3a6b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgdalraster(rast raster, format text, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_asGDALRaster$function$
]]></string>
			<comment><![CDATA[args: rast, format, options=NULL, srid=sameassource - Return the raster tile in the designated GDAL Raster format. Raster formats are one of those supported by your compiled library. Use ST_GDALRasters() to get a list of formats supported by your library.]]></comment>
		</function>
		<function name="st_asgeojson" id="Function_1e13e86" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgeojson(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson(1, $1::geometry,15,0);  $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson(1, $1, $2, $3); $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(gj_version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $function$
CREATE OR REPLACE FUNCTION public.st_asgeojson(gj_version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGeoJson($1, $2, $3, $4); $function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgeojson_001" id="Function_100f0099" isSystem="false" >
			<comment><![CDATA[args: gj_version, geom, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgeojson_002" id="Function_3800ae5c" isSystem="false" />
		<function name="st_asgeojson_003" id="Function_775ca9f" isSystem="false" >
			<comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgeojson_004" id="Function_1109d67c" isSystem="false" >
			<comment><![CDATA[args: gj_version, geog, maxdecimaldigits=15, options=0 - Return the geometry as a GeoJSON element.]]></comment>
		</function>
		<function name="st_asgml" id="Function_99fffe6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asgml(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGML(2,$1::geometry,15,0, NULL, NULL);  $function$
CREATE OR REPLACE FUNCTION public.st_asgml(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsGML(2, $1, $2, $3, null, null); $function$
CREATE OR REPLACE FUNCTION public.st_asgml(geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_AsGML(2, $1, $2, $3, null, null)$function$
CREATE OR REPLACE FUNCTION public.st_asgml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text, id text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _ST_AsGML($1, $2, $3, $4, $5, $6); $function$
CREATE OR REPLACE FUNCTION public.st_asgml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0, nprefix text DEFAULT NULL::text, id text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _ST_AsGML($1, $2, $3, $4, $5, $6);$function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_asgml_001" id="Function_391a048d" isSystem="false" >
			<comment><![CDATA[args: version, geom, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_asgml_002" id="Function_1149aa5b" isSystem="false" />
		<function name="st_asgml_003" id="Function_27292e65" isSystem="false" >
			<comment><![CDATA[args: geog, maxdecimaldigits=15, options=0 - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_asgml_004" id="Function_16808ea6" isSystem="false" >
			<comment><![CDATA[args: version, geog, maxdecimaldigits=15, options=0, nprefix=null, id=null - Return the geometry as a GML version 2 or 3 element.]]></comment>
		</function>
		<function name="st_ashexewkb" id="Function_10e3519e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ashexewkb(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asHEXEWKB$function$
CREATE OR REPLACE FUNCTION public.st_ashexewkb(geometry, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asHEXEWKB$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
		</function>
		<function name="st_ashexewkb_001" id="Function_5073b1" isSystem="false" >
			<comment><![CDATA[args: g1, NDRorXDR - Returns a Geometry in HEXEWKB format (as text) using either little-endian (NDR) or big-endian (XDR) encoding.]]></comment>
		</function>
		<function name="st_asjpeg" id="Function_c4f6c58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		num_bands := st_numbands($1);
		-- JPEG allows 1 or 3 bands
		IF num_bands <> 1 AND num_bands <> 3 THEN
			RAISE NOTICE 'The JPEG format only permits one or three bands.  The first band will be used.';
			rast2 := st_band(rast, ARRAY[1]);
			num_bands := st_numbands(rast);
		ELSE
			rast2 := rast;
		END IF;
		-- JPEG only supports 8BUI pixeltype
		FOR i IN 1..num_bands LOOP
			IF st_bandpixeltype(rast, i) != '8BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  The JPEG format can only be used with the 8BUI pixel type.', i;
			END IF;
		END LOOP;
		RETURN st_asgdalraster(rast2, 'JPEG', $2, NULL);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nband integer, quality integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_asjpeg($1, ARRAY[$2], $3) $function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nband integer, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_asjpeg(st_band($1, $2), $3) $function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nbands integer[], quality integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		quality2 int;
		options text[];
	BEGIN
		IF quality IS NOT NULL THEN
			IF quality > 100 THEN
				quality2 := 100;
			ELSEIF quality < 10 THEN
				quality2 := 10;
			ELSE
				quality2 := quality;
			END IF;
			options := array_append(options, 'QUALITY=' || quality2);
		END IF;
		RETURN st_asjpeg(st_band($1, $2), options);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_asjpeg(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_asjpeg(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_001" id="Function_d647a7c" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_002" id="Function_15807ecb" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_003" id="Function_4d912cd" isSystem="false" >
			<comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_asjpeg_004" id="Function_1e1c4d9d" isSystem="false" >
			<comment><![CDATA[args: rast, nband, quality - Return the raster tile selected bands as a single Joint Photographic Exports Group (JPEG) image (byte array). If no band is specified and 1 or more than 3 bands, then only the first band is used. If only 3 bands then all 3 bands are used and mapped to RGB.]]></comment>
		</function>
		<function name="st_askml" id="Function_ce471ec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_askml(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsKML(2, $1::geometry, 15, null);  $function$
CREATE OR REPLACE FUNCTION public.st_askml(geom geometry, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_AsKML(2, ST_Transform($1,4326), $2, null); $function$
CREATE OR REPLACE FUNCTION public.st_askml(geog geography, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_AsKML(2, $1, $2, null)$function$
CREATE OR REPLACE FUNCTION public.st_askml(version integer, geom geometry, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _ST_AsKML($1, ST_Transform($2,4326), $3, $4); $function$
CREATE OR REPLACE FUNCTION public.st_askml(version integer, geog geography, maxdecimaldigits integer DEFAULT 15, nprefix text DEFAULT NULL::text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT _ST_AsKML($1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: geom, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_askml_001" id="Function_1d4cb914" isSystem="false" >
			<comment><![CDATA[args: version, geom, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_askml_002" id="Function_3743badb" isSystem="false" >
			<comment><![CDATA[args: geog, maxdecimaldigits=15 - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_askml_003" id="Function_2b18e23" isSystem="false" />
		<function name="st_askml_004" id="Function_1a81033" isSystem="false" >
			<comment><![CDATA[args: version, geog, maxdecimaldigits=15, nprefix=NULL - Return the geometry as a KML element. Several variants. Default version=2, default precision=15]]></comment>
		</function>
		<function name="st_aslatlontext" id="Function_542e963" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aslatlontext(geometry)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsLatLonText($1, '') $function$
CREATE OR REPLACE FUNCTION public.st_aslatlontext(geometry, text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_latlon$function$
]]></string>
			<comment><![CDATA[args: pt, format - Return the Degrees, Minutes, Seconds representation of the given point.]]></comment>
		</function>
		<function name="st_aslatlontext_001" id="Function_119ac25f" isSystem="false" >
			<comment><![CDATA[args: pt - Return the Degrees, Minutes, Seconds representation of the given point.]]></comment>
		</function>
		<function name="st_aspect" id="Function_23e707fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspect(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_aspect($1, $2, NULL::raster, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_aspect(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);
		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_aspect4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_width::text, _height::text,
			units::text
		);
	END;
	$function$
]]></string>
		</function>
		<function name="st_aspect_001" id="Function_15a9b966" isSystem="false" />
		<function name="st_aspng" id="Function_9df80ef" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		rast2 raster;
		num_bands int;
		i int;
		pt text;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		num_bands := st_numbands($1);
		-- PNG allows 1, 3 or 4 bands
		IF num_bands <> 1 AND num_bands <> 3 AND num_bands <> 4 THEN
			RAISE NOTICE 'The PNG format only permits one, three or four bands.  The first band will be used.';
			rast2 := st_band($1, ARRAY[1]);
			num_bands := st_numbands(rast2);
		ELSE
			rast2 := rast;
		END IF;
		-- PNG only supports 8BUI and 16BUI pixeltype
		FOR i IN 1..num_bands LOOP
			pt = st_bandpixeltype(rast, i);
			IF pt != '8BUI' AND pt != '16BUI' THEN
				RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI or 16BUI.  The PNG format can only be used with 8BUI and 16BUI pixel types.', i;
			END IF;
		END LOOP;
		RETURN st_asgdalraster(rast2, 'PNG', $2, NULL);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nband integer, compression integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_aspng($1, ARRAY[$2], $3) $function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nband integer, options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_aspng(st_band($1, $2), $3) $function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nbands integer[], compression integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		compression2 int;
		options text[];
	BEGIN
		IF compression IS NOT NULL THEN
			IF compression > 9 THEN
				compression2 := 9;
			ELSEIF compression < 1 THEN
				compression2 := 1;
			ELSE
				compression2 := compression;
			END IF;
			options := array_append(options, 'ZLEVEL=' || compression2);
		END IF;
		RETURN st_aspng(st_band($1, $2), options);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_aspng(rast raster, nbands integer[], options text[] DEFAULT NULL::text[])
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_aspng(st_band($1, $2), $3) $function$
]]></string>
			<comment><![CDATA[args: rast, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_001" id="Function_1db4bfb0" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_002" id="Function_2ba39c16" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_003" id="Function_296e199e" isSystem="false" >
			<comment><![CDATA[args: rast, nband, options=NULL - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_aspng_004" id="Function_29a39ada" isSystem="false" >
			<comment><![CDATA[args: rast, nband, compression - Return the raster tile selected bands as a single portable network graphics (PNG) image (byte array). If 1, 3, or 4 bands in raster and no bands are specified, then all bands are used. If more 2 or more than 4 bands and no bands specified, then only band 1 is used. Bands are mapped to RGB or RGBA space.]]></comment>
		</function>
		<function name="st_asraster" id="Function_6f7d817" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $6, $7, $8, NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, pixeltype text[], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, $4, $5, $6, $7, $8, NULL, NULL,	$9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, scalex double precision, scaley double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, $2, $3, NULL, NULL, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, gridx double precision, gridy double precision, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$6]::text[], ARRAY[$7]::double precision[], ARRAY[$8]::double precision[], NULL, NULL, $4, $5, $9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, width integer, height integer, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, upperleftx double precision DEFAULT NULL::double precision, upperlefty double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_asraster($1, NULL, NULL, $2, $3, ARRAY[$4]::text[], ARRAY[$5]::double precision[], ARRAY[$6]::double precision[], $7, $8, NULL, NULL,$9, $10, $11) $function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, ref raster, pixeltype text[] DEFAULT ARRAY['8BUI'::text], value double precision[] DEFAULT ARRAY[(1)::double precision], nodataval double precision[] DEFAULT ARRAY[(0)::double precision], touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE
AS $function$
	DECLARE
		g geometry;
		g_srid integer;
		ul_x double precision;
		ul_y double precision;
		scale_x double precision;
		scale_y double precision;
		skew_x double precision;
		skew_y double precision;
		sr_id integer;
	BEGIN
		SELECT upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(ref);
		--RAISE NOTICE '%, %, %, %, %, %, %', ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id;
		-- geometry and raster has different SRID
		g_srid := ST_SRID(geom);
		IF g_srid != sr_id THEN
			RAISE NOTICE 'The geometry''s SRID (%) is not the same as the raster''s SRID (%).  The geometry will be transformed to the raster''s projection', g_srid, sr_id;
			g := ST_Transform(geom, sr_id);
		ELSE
			g := geom;
		END IF;
		RETURN _st_asraster(g, scale_x, scale_y, NULL, NULL, $3, $4, $5, NULL, NULL, ul_x, ul_y, skew_x, skew_y, $6);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_asraster(geom geometry, ref raster, pixeltype text, value double precision DEFAULT 1, nodataval double precision DEFAULT 0, touched boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_asraster($1, $2, ARRAY[$3]::text[], ARRAY[$4]::double precision[], ARRAY[$5]::double precision[], $6) $function$
]]></string>
			<comment><![CDATA[args: geom, scalex, scaley, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_001" id="Function_1cdfca6c" isSystem="false" >
			<comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_002" id="Function_2e0af8b6" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, gridx=NULL, gridy=NULL, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_003" id="Function_1ed04df6" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, pixeltype, value=ARRAY[1], nodataval=ARRAY[0], upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_004" id="Function_370f526a" isSystem="false" >
			<comment><![CDATA[args: geom, scalex, scaley, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_005" id="Function_32b7efb7" isSystem="false" >
			<comment><![CDATA[args: geom, scalex, scaley, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_006" id="Function_1f482bd3" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, gridx, gridy, pixeltype, value=1, nodataval=0, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_007" id="Function_1c901243" isSystem="false" >
			<comment><![CDATA[args: geom, width, height, pixeltype, value=1, nodataval=0, upperleftx=NULL, upperlefty=NULL, skewx=0, skewy=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_008" id="Function_2bbda44b" isSystem="false" >
			<comment><![CDATA[args: geom, ref, pixeltype=ARRAY['8BUI'], value=ARRAY[1], nodataval=ARRAY[0], touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_asraster_009" id="Function_192bfa3c" isSystem="false" >
			<comment><![CDATA[args: geom, ref, pixeltype, value=1, nodataval=0, touched=false - Converts a PostGIS geometry to a PostGIS raster.]]></comment>
		</function>
		<function name="st_assvg" id="Function_1c3d421d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_assvg(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsSVG($1::geometry,0,15);  $function$
CREATE OR REPLACE FUNCTION public.st_assvg(geom geometry, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asSVG$function$
CREATE OR REPLACE FUNCTION public.st_assvg(geog geography, rel integer DEFAULT 0, maxdecimaldigits integer DEFAULT 15)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_as_svg$function$
]]></string>
			<comment><![CDATA[args: geom, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
		</function>
		<function name="st_assvg_001" id="Function_2dd4dce5" isSystem="false" >
			<comment><![CDATA[args: geog, rel=0, maxdecimaldigits=15 - Returns a Geometry in SVG path data given a geometry or geography object.]]></comment>
		</function>
		<function name="st_assvg_002" id="Function_9502fb2" isSystem="false" />
		<function name="st_astext" id="Function_d65c856" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astext(text)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_AsText($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_astext(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asText$function$
CREATE OR REPLACE FUNCTION public.st_astext(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_asText$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
		</function>
		<function name="st_astext_001" id="Function_39b06b9" isSystem="false" >
			<comment><![CDATA[args: g1 - Return the Well-Known Text (WKT) representation of the geometry/geography without SRID metadata.]]></comment>
		</function>
		<function name="st_astext_002" id="Function_1172723c" isSystem="false" />
		<function name="st_astiff" id="Function_2e0b3325" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, compression text, srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		compression2 text;
		c_type text;
		c_level int;
		i int;
		num_bands int;
		options text[];
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		compression2 := trim(both from upper(compression));
		IF length(compression2) > 0 THEN
			-- JPEG
			IF position('JPEG' in compression2) != 0 THEN
				c_type := 'JPEG';
				c_level := substring(compression2 from '[0-9]+$');
				IF c_level IS NOT NULL THEN
					IF c_level > 100 THEN
						c_level := 100;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;
					options := array_append(options, 'JPEG_QUALITY=' || c_level);
				END IF;
				-- per band pixel type check
				num_bands := st_numbands($1);
				FOR i IN 1..num_bands LOOP
					IF st_bandpixeltype($1, i) != '8BUI' THEN
						RAISE EXCEPTION 'The pixel type of band % in the raster is not 8BUI.  JPEG compression can only be used with the 8BUI pixel type.', i;
					END IF;
				END LOOP;
			-- DEFLATE
			ELSEIF position('DEFLATE' in compression2) != 0 THEN
				c_type := 'DEFLATE';
				c_level := substring(compression2 from '[0-9]+$');
				IF c_level IS NOT NULL THEN
					IF c_level > 9 THEN
						c_level := 9;
					ELSEIF c_level < 1 THEN
						c_level := 1;
					END IF;
					options := array_append(options, 'ZLEVEL=' || c_level);
				END IF;
			ELSE
				c_type := compression2;
				-- CCITT
				IF position('CCITT' in compression2) THEN
					-- per band pixel type check
					num_bands := st_numbands($1);
					FOR i IN 1..num_bands LOOP
						IF st_bandpixeltype($1, i) != '1BB' THEN
							RAISE EXCEPTION 'The pixel type of band % in the raster is not 1BB.  CCITT compression can only be used with the 1BB pixel type.', i;
						END IF;
					END LOOP;
				END IF;
			END IF;
			-- compression type check
			IF ARRAY[c_type] <@ ARRAY['JPEG', 'LZW', 'PACKBITS', 'DEFLATE', 'CCITTRLE', 'CCITTFAX3', 'CCITTFAX4', 'NONE'] THEN
				options := array_append(options, 'COMPRESS=' || c_type);
			ELSE
				RAISE NOTICE 'Unknown compression type: %.  The outputted TIFF will not be COMPRESSED.', c_type;
			END IF;
		END IF;
		RETURN st_astiff($1, options, $3);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		i int;
		num_bands int;
		nodata double precision;
		last_nodata double precision;
	BEGIN
		IF rast IS NULL THEN
			RETURN NULL;
		END IF;
		num_bands := st_numbands($1);
		-- TIFF only allows one NODATA value for ALL bands
		FOR i IN 1..num_bands LOOP
			nodata := st_bandnodatavalue($1, i);
			IF last_nodata IS NULL THEN
				last_nodata := nodata;
			ELSEIF nodata != last_nodata THEN
				RAISE NOTICE 'The TIFF format only permits one NODATA value for all bands.  The value used will be the last band with a NODATA value.';
			END IF;
		END LOOP;
		RETURN st_asgdalraster($1, 'GTiff', $2, $3);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, nbands integer[], compression text, srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_astiff(st_band($1, $2), $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_astiff(rast raster, nbands integer[], options text[] DEFAULT NULL::text[], srid integer DEFAULT NULL::integer)
 RETURNS bytea
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_astiff(st_band($1, $2), $3, $4) $function$
]]></string>
			<comment><![CDATA[args: rast, options=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_astiff_001" id="Function_2b80a2dd" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, options, srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_astiff_002" id="Function_15099f06" isSystem="false" >
			<comment><![CDATA[args: rast, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_astiff_003" id="Function_1331fe9f" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, compression=', srid=sameassource - Return the raster selected bands as a single TIFF image (byte array). If no band is specified, then will try to use all bands.]]></comment>
		</function>
		<function name="st_asx3d" id="Function_5a2d5c6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_asx3d(geom geometry, maxdecimaldigits integer DEFAULT 15, options integer DEFAULT 0)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT _ST_AsX3D(3,$1,$2,$3,'');$function$
]]></string>
			<comment><![CDATA[args: g1, maxdecimaldigits=15, options=0 - Returns a Geometry in X3D xml node element format: ISO-IEC-19776-1.2-X3DEncodings-XML]]></comment>
		</function>
		<function name="st_azimuth" id="Function_2308bc52" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_azimuth(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_azimuth$function$
CREATE OR REPLACE FUNCTION public.st_azimuth(geog1 geography, geog2 geography)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_azimuth$function$
]]></string>
			<comment><![CDATA[args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.]]></comment>
		</function>
		<function name="st_azimuth_001" id="Function_1a7b5abe" isSystem="false" >
			<comment><![CDATA[args: pointA, pointB - Returns the north-based azimuth as the angle in radians measured clockwise from the vertical on pointA to pointB.]]></comment>
		</function>
		<function name="st_band" id="Function_2ad81bbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_band(rast raster, nband integer)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_band($1, ARRAY[$2]) $function$
CREATE OR REPLACE FUNCTION public.st_band(rast raster, nbands integer[] DEFAULT ARRAY[1])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_band$function$
CREATE OR REPLACE FUNCTION public.st_band(rast raster, nbands text, delimiter character DEFAULT ','::bpchar)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_band($1, regexp_split_to_array(regexp_replace($2, '[[:space:]]', '', 'g'), E'\\' || array_to_string(regexp_split_to_array($3, ''), E'\\'))::int[]) $function$
]]></string>
			<comment><![CDATA[args: rast, nbands = ARRAY[1] - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
		</function>
		<function name="st_band_001" id="Function_2dab83a8" isSystem="false" >
			<comment><![CDATA[args: rast, nband - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
		</function>
		<function name="st_band_002" id="Function_2af71ad6" isSystem="false" >
			<comment><![CDATA[args: rast, nbands, delimiter=, - Returns one or more bands of an existing raster as a new raster. Useful for building new rasters from existing rasters.]]></comment>
		</function>
		<function name="st_bandisnodata" id="Function_1c8c1495" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandisnodata(rast raster, forcechecking boolean)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_bandisnodata($1, 1, $2) $function$
CREATE OR REPLACE FUNCTION public.st_bandisnodata(rast raster, band integer DEFAULT 1, forcechecking boolean DEFAULT false)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_bandIsNoData$function$
]]></string>
			<comment><![CDATA[args: rast, band, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
		</function>
		<function name="st_bandisnodata_001" id="Function_128e8960" isSystem="false" >
			<comment><![CDATA[args: rast, forceChecking=true - Returns true if the band is filled with only nodata values.]]></comment>
		</function>
		<function name="st_bandmetadata" id="Function_336cee7b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandmetadata(rast raster, band integer DEFAULT 1, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT pixeltype, nodatavalue, isoutdb, path FROM st_bandmetadata($1, ARRAY[$2]::int[]) LIMIT 1 $function$
CREATE OR REPLACE FUNCTION public.st_bandmetadata(rast raster, band integer[], OUT bandnum integer, OUT pixeltype text, OUT nodatavalue double precision, OUT isoutdb boolean, OUT path text)
 RETURNS record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_bandmetadata$function$
]]></string>
		</function>
		<function name="st_bandmetadata_001" id="Function_1e48b06" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum=1 - Returns basic meta data for a specific raster band. band num 1 is assumed if none-specified.]]></comment>
		</function>
		<function name="st_bandnodatavalue" id="Function_26c7dbba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandnodatavalue(rast raster, band integer DEFAULT 1)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getBandNoDataValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns the value in a given band that represents no data. If no band num 1 is assumed.]]></comment>
		</function>
		<function name="st_bandpath" id="Function_eb368dd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandpath(rast raster, band integer DEFAULT 1)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getBandPath$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns system file path to a band stored in file system. If no bandnum specified, 1 is assumed.]]></comment>
		</function>
		<function name="st_bandpixeltype" id="Function_30bb9563" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bandpixeltype(rast raster, band integer DEFAULT 1)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getBandPixelTypeName$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns the type of pixel for given band. If no bandnum specified, 1 is assumed.]]></comment>
		</function>
		<function name="st_bdmpolyfromtext" id="Function_7d491ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bdmpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);
	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;
	geom := ST_Multi(ST_BuildArea(mline));
	RETURN geom;
END;
$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Construct a MultiPolygon given an arbitrary collection of closed linestrings as a MultiLineString text representation Well-Known text representation.]]></comment>
		</function>
		<function name="st_bdpolyfromtext" id="Function_2a01620c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_bdpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	geomtext alias for $1;
	srid alias for $2;
	mline geometry;
	geom geometry;
BEGIN
	mline := ST_MultiLineStringFromText(geomtext, srid);
	IF mline IS NULL
	THEN
		RAISE EXCEPTION 'Input is not a MultiLinestring';
	END IF;
	geom := ST_BuildArea(mline);
	IF GeometryType(geom) != 'POLYGON'
	THEN
		RAISE EXCEPTION 'Input returns more then a single polygon, try using BdMPolyFromText instead';
	END IF;
	RETURN geom;
END;
$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Construct a Polygon given an arbitrary collection of closed linestrings as a MultiLineString Well-Known text representation.]]></comment>
		</function>
		<function name="st_boundary" id="Function_19e85985" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_boundary(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$boundary$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the closure of the combinatorial boundary of this Geometry.]]></comment>
		</function>
		<function name="st_box2dfromgeohash" id="Function_1b43706b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_box2dfromgeohash(text, integer DEFAULT NULL::integer)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$box2d_from_geohash$function$
]]></string>
			<comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a BOX2D from a GeoHash string.]]></comment>
		</function>
		<function name="st_buffer" id="Function_a2c3cb3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buffer(text, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Buffer($1::geometry, $2);  $function$
CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$buffer$function$
CREATE OR REPLACE FUNCTION public.st_buffer(geography, double precision)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT geography(ST_Transform(ST_Buffer(ST_Transform(geometry($1), _ST_BestSRID($1)), $2), 4326))$function$
CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_Buffer($1, $2,
		CAST('quad_segs='||CAST($3 AS text) as cstring))
	   $function$
CREATE OR REPLACE FUNCTION public.st_buffer(geometry, double precision, text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _ST_Buffer($1, $2,
		CAST( regexp_replace($3, '^[0123456789]+$',
			'quad_segs='||$3) AS cstring)
		)
	   $function$
]]></string>
			<comment><![CDATA[args: g1, radius_of_buffer - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_001" id="Function_1aa7910d" isSystem="false" >
			<comment><![CDATA[args: g1, radius_of_buffer, num_seg_quarter_circle - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_002" id="Function_1f14e0bb" isSystem="false" >
			<comment><![CDATA[args: g1, radius_of_buffer, buffer_style_parameters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_003" id="Function_337fe30d" isSystem="false" >
			<comment><![CDATA[args: g1, radius_of_buffer_in_meters - (T) For geometry: Returns a geometry that represents all points whose distance from this Geometry is less than or equal to distance. Calculations are in the Spatial Reference System of this Geometry. For geography: Uses a planar transform wrapper. Introduced in 1.5 support for different end cap and mitre settings to control shape. buffer_style options: quad_segs=#,endcap=round|flat|square,join=round|mitre|bevel,mitre_limit=#.#]]></comment>
		</function>
		<function name="st_buffer_004" id="Function_469719b" isSystem="false" />
		<function name="st_buildarea" id="Function_1e9713f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_buildarea(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_BuildArea$function$
]]></string>
			<comment><![CDATA[args: A - Creates an areal geometry formed by the constituent linework of given geometry]]></comment>
		</function>
		<function name="st_centroid" id="Function_acb6df1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_centroid(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$centroid$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the geometric center of a geometry.]]></comment>
		</function>
		<function name="st_cleangeometry" id="Function_11af4c8a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_cleangeometry(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_CleanGeometry$function$
]]></string>
		</function>
		<function name="st_clip" id="Function_cbcac74" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, crop boolean)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Clip($1, NULL, $2, null::double precision[], $3) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, nband integer, geom geometry, crop boolean)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Clip($1, ARRAY[$2]::integer[], $3, null::double precision[], $4) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, nodataval double precision, crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Clip($1, NULL, $2, ARRAY[$3]::double precision[], $4) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Clip($1, NULL, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, nband integer, geom geometry, nodataval double precision, crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Clip($1, ARRAY[$2]::integer[], $3, ARRAY[$4]::double precision[], $5) $function$
CREATE OR REPLACE FUNCTION public.st_clip(rast raster, nband integer[], geom geometry, nodataval double precision[] DEFAULT NULL::double precision[], crop boolean DEFAULT true)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
  BEGIN
		-- short-cut if geometry's extent fully contains raster's extent
		IF (nodataval IS NULL OR array_length(nodataval, 1) < 1) AND geom ~ ST_Envelope(rast) THEN
			RETURN rast;
		END IF;
		RETURN _ST_Clip($1, $2, $3, $4, $5);
	END;
	$function$
]]></string>
		</function>
		<function name="st_clip_001" id="Function_acd67f4" isSystem="false" />
		<function name="st_clip_002" id="Function_359bfc85" isSystem="false" />
		<function name="st_clip_003" id="Function_c5751e6" isSystem="false" />
		<function name="st_clip_004" id="Function_32142fc2" isSystem="false" />
		<function name="st_clip_005" id="Function_13b8f7fb" isSystem="false" />
		<function name="st_closestpoint" id="Function_31f5a1a3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_closestpoint(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_closestpoint$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional point on g1 that is closest to g2. This is the first point of the shortest line.]]></comment>
		</function>
		<function name="st_collect" id="Function_1b46c69b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collect(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_collect_garray$function$
CREATE OR REPLACE FUNCTION public.st_collect(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$LWGEOM_collect$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
		</function>
		<function name="st_collect_001" id="Function_17272b8d" isSystem="false" >
			<comment><![CDATA[args: g1_array - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
		</function>
		<function name="st_collect_002" id="Function_2c0a354d" isSystem="false" >
			<comment><![CDATA[args: g1field - Return a specified ST_Geometry value from a collection of other geometries.]]></comment>
		</function>
		<function name="st_collectionextract" id="Function_308ab196" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collectionextract(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_CollectionExtract$function$
]]></string>
			<comment><![CDATA[args: collection, type - Given a (multi)geometry, returns a (multi)geometry consisting only of elements of the specified type.]]></comment>
		</function>
		<function name="st_collectionhomogenize" id="Function_cdbd5f3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_collectionhomogenize(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_CollectionHomogenize$function$
]]></string>
			<comment><![CDATA[args: collection - Given a geometry collection, returns the "simplest" representation of the contents.]]></comment>
		</function>
		<function name="st_colormap" id="Function_6fa95e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_colormap(rast raster, colormap text, method text DEFAULT 'INTERPOLATE'::text)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_ColorMap($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_colormap(rast raster, nband integer DEFAULT 1, colormap text DEFAULT 'grayscale'::text, method text DEFAULT 'INTERPOLATE'::text)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		_ismap boolean;
		_colormap text;
		_element text[];
	BEGIN
		_ismap := TRUE;
		-- clean colormap to see what it is
		_colormap := split_part(colormap, E'\n', 1);
		_colormap := regexp_replace(_colormap, E':+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E',+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E'\\t+', ' ', 'g');
		_colormap := regexp_replace(_colormap, E' +', ' ', 'g');
		_element := regexp_split_to_array(_colormap, ' ');
		-- treat as colormap
		IF (array_length(_element, 1) > 1) THEN
			_colormap := colormap;
		-- treat as keyword
		ELSE
			method := 'INTERPOLATE';
			CASE lower(trim(both from _colormap))
				WHEN 'grayscale', 'greyscale' THEN
					_colormap := '
100%   0
  0% 254
  nv 255 
					';
				WHEN 'pseudocolor' THEN
					_colormap := '
100% 255   0   0 255
 50%   0 255   0 255
  0%   0   0 255 255
  nv   0   0   0   0
					';
				WHEN 'fire' THEN
					_colormap := '
  100% 243 255 221 255
93.75% 242 255 178 255
 87.5% 255 255 135 255
81.25% 255 228  96 255
   75% 255 187  53 255
68.75% 255 131   7 255
 62.5% 255  84   0 255
56.25% 255  42   0 255
   50% 255   0   0 255
43.75% 255  42   0 255
 37.5% 224  74   0 255
31.25% 183  91   0 255
   25% 140  93   0 255
18.75%  99  82   0 255
 12.5%  58  58   1 255
 6.25%  12  15   0 255
    0%   0   0   0 255
    nv   0   0   0   0
					';
				WHEN 'bluered' THEN
					_colormap := '
100.00% 165   0  33 255
 94.12% 216  21  47 255
 88.24% 247  39  53 255
 82.35% 255  61  61 255
 76.47% 255 120  86 255
 70.59% 255 172 117 255
 64.71% 255 214 153 255
 58.82% 255 241 188 255
 52.94% 255 255 234 255
 47.06% 234 255 255 255
 41.18% 188 249 255 255
 35.29% 153 234 255 255
 29.41% 117 211 255 255
 23.53%  86 176 255 255
 17.65%  61 135 255 255
 11.76%  40  87 255 255
  5.88%  24  28 247 255
  0.00%  36   0 216 255
     nv   0   0   0   0
					';
				ELSE
					RAISE EXCEPTION 'Unknown colormap keyword: %', colormap;
			END CASE;
		END IF;
		RETURN _st_colormap($1, $2, _colormap, $4);
	END;
	$function$
]]></string>
		</function>
		<function name="st_colormap_001" id="Function_2e9cf2b2" isSystem="false" />
		<function name="st_combine_bbox" id="Function_360d0831" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_combine_bbox(box3d, geometry)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$BOX3D_combine$function$
CREATE OR REPLACE FUNCTION public.st_combine_bbox(box2d, geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$BOX2D_combine$function$
]]></string>
		</function>
		<function name="st_combine_bbox_001" id="Function_25e08abe" isSystem="false" />
		<function name="st_concavehull" id="Function_18306dbe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_concavehull(param_geom geometry, param_pctconvex double precision, param_allow_holes boolean DEFAULT false)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		var_convhull geometry := ST_ConvexHull(param_geom);
		var_param_geom geometry := param_geom;
		var_initarea float := ST_Area(var_convhull);
		var_newarea float := var_initarea;
		var_div integer := 6; 
		var_tempgeom geometry;
		var_tempgeom2 geometry;
		var_cent geometry;
		var_geoms geometry[4]; 
		var_enline geometry;
		var_resultgeom geometry;
		var_atempgeoms geometry[];
		var_buf float := 1; 
	BEGIN
		-- We start with convex hull as our base
		var_resultgeom := var_convhull;
		
		IF param_pctconvex = 1 THEN
			return var_resultgeom;
		ELSIF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN -- it is as concave as it is going to get
			IF param_allow_holes THEN -- leave the holes
				RETURN var_param_geom;
			ELSE -- remove the holes
				var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				RETURN var_resultgeom;
			END IF;
		END IF;
		IF ST_Dimension(var_resultgeom) > 1 AND param_pctconvex BETWEEN 0 and 0.98 THEN
		-- get linestring that forms envelope of geometry
			var_enline := ST_Boundary(ST_Envelope(var_param_geom));
			var_buf := ST_Length(var_enline)/1000.0;
			IF ST_GeometryType(var_param_geom) = 'ST_MultiPoint' AND ST_NumGeometries(var_param_geom) BETWEEN 4 and 200 THEN
			-- we make polygons out of points since they are easier to cave in. 
			-- Note we limit to between 4 and 200 points because this process is slow and gets quadratically slow
				var_buf := sqrt(ST_Area(var_convhull)*0.8/(ST_NumGeometries(var_param_geom)*ST_NumGeometries(var_param_geom)));
				var_atempgeoms := ARRAY(SELECT geom FROM ST_DumpPoints(var_param_geom));
				-- 5 and 10 and just fudge factors
				var_tempgeom := ST_Union(ARRAY(SELECT geom
						FROM (
						-- fuse near neighbors together
						SELECT DISTINCT ON (i) i,  ST_Distance(var_atempgeoms[i],var_atempgeoms[j]), ST_Buffer(ST_MakeLine(var_atempgeoms[i], var_atempgeoms[j]) , var_buf*5, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									INNER JOIN generate_series(1,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10)
									)
								UNION ALL
						-- catch the ones with no near neighbors
								SELECT i, 0, ST_Buffer(var_atempgeoms[i] , var_buf*10, 'quad_segs=3') As geom
								FROM generate_series(1,array_upper(var_atempgeoms, 1)) As i
									LEFT JOIN generate_series(ceiling(array_upper(var_atempgeoms,1)/2)::integer,array_upper(var_atempgeoms, 1)) As j 
										ON (
								 NOT ST_Intersects(var_atempgeoms[i],var_atempgeoms[j])
									AND ST_DWithin(var_atempgeoms[i],var_atempgeoms[j], var_buf*10) 
									)
									WHERE j IS NULL
								ORDER BY 1, 2
							) As foo	) );
				IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) = 'ST_Polygon' THEN
					var_tempgeom := ST_ForceSFS(ST_Intersection(var_tempgeom, var_convhull));
					IF param_allow_holes THEN
						var_param_geom := var_tempgeom;
					ELSE
						var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_tempgeom));
					END IF;
					return var_param_geom;
				ELSIF ST_IsValid(var_tempgeom) THEN
					var_param_geom := ST_ForceSFS(ST_Intersection(var_tempgeom, var_convhull));	
				END IF;
			END IF;
			IF ST_GeometryType(var_param_geom) = 'ST_Polygon' THEN
				IF NOT param_allow_holes THEN
					var_param_geom := ST_MakePolygon(ST_ExteriorRing(var_param_geom));
				END IF;
				return var_param_geom;
			END IF;
            var_cent := ST_Centroid(var_param_geom);
            IF (ST_XMax(var_enline) - ST_XMin(var_enline) ) > var_buf AND (ST_YMax(var_enline) - ST_YMin(var_enline) ) > var_buf THEN
                    IF ST_Dwithin(ST_Centroid(var_convhull) , ST_Centroid(ST_Envelope(var_param_geom)), var_buf/2) THEN
                -- If the geometric dimension is > 1 and the object is symettric (cutting at centroid will not work -- offset a bit)
                        var_cent := ST_Translate(var_cent, (ST_XMax(var_enline) - ST_XMin(var_enline))/1000,  (ST_YMAX(var_enline) - ST_YMin(var_enline))/1000);
                    ELSE
                        -- uses closest point on geometry to centroid. I can't explain why we are doing this
                        var_cent := ST_ClosestPoint(var_param_geom,var_cent);
                    END IF;
                    IF ST_DWithin(var_cent, var_enline,var_buf) THEN
                        var_cent := ST_centroid(ST_Envelope(var_param_geom));
                    END IF;
                    -- break envelope into 4 triangles about the centroid of the geometry and returned the clipped geometry in each quadrant
                    FOR i in 1 .. 4 LOOP
                       var_geoms[i] := ST_MakePolygon(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       var_geoms[i] := ST_ForceSFS(ST_Intersection(var_param_geom, ST_Buffer(var_geoms[i],var_buf)));
                       IF ST_IsValid(var_geoms[i]) THEN 
                            
                       ELSE
                            var_geoms[i] := ST_BuildArea(ST_MakeLine(ARRAY[ST_PointN(var_enline,i), ST_PointN(var_enline,i+1), var_cent, ST_PointN(var_enline,i)]));
                       END IF; 
                    END LOOP;
                    var_tempgeom := ST_Union(ARRAY[ST_ConvexHull(var_geoms[1]), ST_ConvexHull(var_geoms[2]) , ST_ConvexHull(var_geoms[3]), ST_ConvexHull(var_geoms[4])]); 
                    --RAISE NOTICE 'Curr vex % ', ST_AsText(var_tempgeom);
                    IF ST_Area(var_tempgeom) <= var_newarea AND ST_IsValid(var_tempgeom)  THEN --AND ST_GeometryType(var_tempgeom) ILIKE '%Polygon'
                        
                        var_tempgeom := ST_Buffer(ST_ConcaveHull(var_geoms[1],least(param_pctconvex + param_pctconvex/var_div),true),var_buf, 'quad_segs=2');
                        FOR i IN 1 .. 4 LOOP
                            var_geoms[i] := ST_Buffer(ST_ConcaveHull(var_geoms[i],least(param_pctconvex + param_pctconvex/var_div),true), var_buf, 'quad_segs=2');
                            IF ST_IsValid(var_geoms[i]) Then
                                var_tempgeom := ST_Union(var_tempgeom, var_geoms[i]);
                            ELSE
                                RAISE NOTICE 'Not valid % %', i, ST_AsText(var_tempgeom);
                                var_tempgeom := ST_Union(var_tempgeom, ST_ConvexHull(var_geoms[i]));
                            END IF; 
                        END LOOP;
                        --RAISE NOTICE 'Curr concave % ', ST_AsText(var_tempgeom);
                        IF ST_IsValid(var_tempgeom) THEN
                            var_resultgeom := var_tempgeom;
                        END IF;
                        var_newarea := ST_Area(var_resultgeom);
                    ELSIF ST_IsValid(var_tempgeom) THEN
                        var_resultgeom := var_tempgeom;
                    END IF;
                    IF ST_NumGeometries(var_resultgeom) > 1  THEN
                        var_tempgeom := _ST_ConcaveHull(var_resultgeom);
                        IF ST_IsValid(var_tempgeom) AND ST_GeometryType(var_tempgeom) ILIKE 'ST_Polygon' THEN
                            var_resultgeom := var_tempgeom;
                        ELSE
                            var_resultgeom := ST_Buffer(var_tempgeom,var_buf, 'quad_segs=2');
                        END IF;
                    END IF;
                    IF param_allow_holes = false THEN 
                    -- only keep exterior ring since we do not want holes
                        var_resultgeom := ST_MakePolygon(ST_ExteriorRing(var_resultgeom));
                    END IF;
                ELSE
                    var_resultgeom := ST_Buffer(var_resultgeom,var_buf);
                END IF;
                var_resultgeom := ST_ForceSFS(ST_Intersection(var_resultgeom, ST_ConvexHull(var_param_geom)));
            ELSE
                -- dimensions are too small to cut
                var_resultgeom := _ST_ConcaveHull(var_param_geom);
            END IF;
            RETURN var_resultgeom;
	END;
$function$
]]></string>
			<comment><![CDATA[args: geomA, target_percent, allow_holes=false - The concave hull of a geometry represents a possibly concave geometry that encloses all geometries within the set. You can think of it as shrink wrapping.]]></comment>
		</function>
		<function name="st_contains" id="Function_1061825c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_contains(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Contains($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_contains(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_contains($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_contains(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_contains(st_convexhull($1), st_convexhull($3)) ELSE _st_contains($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if and only if no points of B lie in the exterior of A, and at least one point of the interior of B lies in the interior of A.]]></comment>
		</function>
		<function name="st_contains_001" id="Function_2a5f8f27" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.]]></comment>
		</function>
		<function name="st_contains_002" id="Function_15b0b0b5" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastB lie in the exterior of raster rastA and at least one point of the interior of rastB lies in the interior of rastA.]]></comment>
		</function>
		<function name="st_containsproperly" id="Function_19f934b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_containsproperly(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_ContainsProperly($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_containsproperly(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_containsproperly($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_containsproperly(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_containsproperly(st_convexhull($1), st_convexhull($3)) ELSE _st_containsproperly($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if B intersects the interior of A but not the boundary (or exterior). A does not contain properly itself, but does contain itself.]]></comment>
		</function>
		<function name="st_containsproperly_001" id="Function_24201310" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.]]></comment>
		</function>
		<function name="st_containsproperly_002" id="Function_2fddd1d7" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if rastB intersects the interior of rastA but not the boundary or exterior of rastA.]]></comment>
		</function>
		<function name="st_convexhull" id="Function_6a41cca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_convexhull(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$convexhull$function$
CREATE OR REPLACE FUNCTION public.st_convexhull(raster)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 300
AS '$libdir/rtpostgis-2.1', $function$RASTER_convex_hull$function$
]]></string>
			<comment><![CDATA[args: geomA - The convex hull of a geometry represents the minimum convex geometry that encloses all geometries within the set.]]></comment>
		</function>
		<function name="st_convexhull_001" id="Function_361bfd29" isSystem="false" />
		<function name="st_coorddim" id="Function_2168d078" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coorddim(geometry geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_ndims$function$
]]></string>
			<comment><![CDATA[args: geomA - Return the coordinate dimension of the ST_Geometry value.]]></comment>
		</function>
		<function name="st_count" id="Function_2097406a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_count(rast raster, exclude_nodata_value boolean)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, 1, $2, 1) $function$
CREATE OR REPLACE FUNCTION public.st_count(rastertable text, rastercolumn text, exclude_nodata_value boolean)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, 1, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_count(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS bigint
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_count(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS bigint
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_count($1, $2, $3, $4, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_count_001" id="Function_b23fde" isSystem="false" >
			<comment><![CDATA[args: rast, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_count_002" id="Function_36a08b65" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_count_003" id="Function_c8f2e59" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns the number of pixels in a given band of a raster or raster coverage. If no band is specified defaults to band 1. If exclude_nodata_value is set to true, will only count pixels that are not equal to the nodata value.]]></comment>
		</function>
		<function name="st_coveredby" id="Function_3a220831" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_coveredby(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_CoveredBy($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_coveredby(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_CoveredBy($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_coveredby(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Covers($2, $1)$function$
CREATE OR REPLACE FUNCTION public.st_coveredby(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_coveredby($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_coveredby(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_coveredby(st_convexhull($1), st_convexhull($3)) ELSE _st_coveredby($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
		</function>
		<function name="st_coveredby_001" id="Function_fadd537" isSystem="false" >
			<comment><![CDATA[args: geogA, geogB - Returns 1 (TRUE) if no point in Geometry/Geography A is outside Geometry/Geography B]]></comment>
		</function>
		<function name="st_coveredby_002" id="Function_5568589" isSystem="false" />
		<function name="st_coveredby_003" id="Function_2db4d94" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie outside raster rastB.]]></comment>
		</function>
		<function name="st_coveredby_004" id="Function_722e7b9" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastA lie outside raster rastB.]]></comment>
		</function>
		<function name="st_covers" id="Function_233fcf00" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_covers(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Covers($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_covers(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Covers($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_covers(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Covers($1, $2)$function$
CREATE OR REPLACE FUNCTION public.st_covers(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_covers($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_covers(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_covers(st_convexhull($1), st_convexhull($3)) ELSE _st_covers($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
		</function>
		<function name="st_covers_001" id="Function_256f2d4e" isSystem="false" >
			<comment><![CDATA[args: geogpolyA, geogpointB - Returns 1 (TRUE) if no point in Geometry B is outside Geometry A]]></comment>
		</function>
		<function name="st_covers_002" id="Function_4f9cd41" isSystem="false" />
		<function name="st_covers_003" id="Function_30a452fc" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastB lie outside raster rastA.]]></comment>
		</function>
		<function name="st_covers_004" id="Function_18071195" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastB lie outside raster rastA.]]></comment>
		</function>
		<function name="st_crosses" id="Function_37e020f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_crosses(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Crosses($1,$2)$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns TRUE if the supplied geometries have some, but not all, interior points in common.]]></comment>
		</function>
		<function name="st_curvetoline" id="Function_3b6e1528" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_curvetoline(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_CurveToLine($1, 32)$function$
CREATE OR REPLACE FUNCTION public.st_curvetoline(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_curve_segmentize$function$
]]></string>
			<comment><![CDATA[args: curveGeom, segments_per_qtr_circle - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON]]></comment>
		</function>
		<function name="st_curvetoline_001" id="Function_2b0189df" isSystem="false" >
			<comment><![CDATA[args: curveGeom - Converts a CIRCULARSTRING/CURVEDPOLYGON to a LINESTRING/POLYGON]]></comment>
		</function>
		<function name="st_delaunaytriangles" id="Function_66e3407" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_delaunaytriangles(g1 geometry, tolerance double precision DEFAULT 0.0, flags integer DEFAULT 0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_DelaunayTriangles$function$
]]></string>
			<comment><![CDATA[args: g1, tolerance, flags - Return a Delaunay triangulation around the given input points.]]></comment>
		</function>
		<function name="st_dfullywithin" id="Function_794858e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dfullywithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DFullyWithin(ST_ConvexHull($1), ST_ConvexHull($2), $3)$function$
CREATE OR REPLACE FUNCTION public.st_dfullywithin(rast1 raster, rast2 raster, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_dfullywithin($1, NULL::integer, $2, NULL::integer, $3) $function$
CREATE OR REPLACE FUNCTION public.st_dfullywithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1::geometry && ST_Expand(ST_ConvexHull($3), $5) AND $3::geometry && ST_Expand(ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_dfullywithin(st_convexhull($1), st_convexhull($3), $5) ELSE _st_dfullywithin($1, $2, $3, $4, $5) END $function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance - Returns true if all of the geometries are within the specified distance of one another]]></comment>
		</function>
		<function name="st_dfullywithin_001" id="Function_1fdc5058" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.]]></comment>
		</function>
		<function name="st_dfullywithin_002" id="Function_3b6faf15" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are fully within the specified distance of each other.]]></comment>
		</function>
		<function name="st_difference" id="Function_3a821440" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_difference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$difference$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns a geometry that represents that part of geometry A that does not intersect with geometry B.]]></comment>
		</function>
		<function name="st_dimension" id="Function_2e23c908" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dimension(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_dimension$function$
]]></string>
			<comment><![CDATA[args: g - The inherent dimension of this Geometry object, which must be less than or equal to the coordinate dimension.]]></comment>
		</function>
		<function name="st_disjoint" id="Function_fc60c85" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_disjoint(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$disjoint$function$
CREATE OR REPLACE FUNCTION public.st_disjoint(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_disjoint($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_disjoint(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT CASE WHEN $2 IS NULL OR $4 IS NULL THEN st_disjoint(st_convexhull($1), st_convexhull($3)) ELSE NOT _st_intersects($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: A, B - Returns TRUE if the Geometries do not "spatially intersect" - if they do not share any space together.]]></comment>
		</function>
		<function name="st_disjoint_001" id="Function_3415ea40" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA does not spatially intersect rastB.]]></comment>
		</function>
		<function name="st_disjoint_002" id="Function_6c6c97b" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA does not spatially intersect rastB.]]></comment>
		</function>
		<function name="st_distance" id="Function_3b4acd39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance(text, text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Distance($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_distance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$distance$function$
CREATE OR REPLACE FUNCTION public.st_distance(geography, geography)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_Distance($1, $2, 0.0, true)$function$
CREATE OR REPLACE FUNCTION public.st_distance(geography, geography, boolean)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_Distance($1, $2, 0.0, $3)$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.]]></comment>
		</function>
		<function name="st_distance_001" id="Function_1d63c822" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2, use_spheroid - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.]]></comment>
		</function>
		<function name="st_distance_002" id="Function_6634212" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2 - For geometry type Returns the 2-dimensional cartesian minimum distance (based on spatial ref) between two geometries in projected units. For geography type defaults to return spheroidal minimum distance between two geographies in meters.]]></comment>
		</function>
		<function name="st_distance_003" id="Function_1a01ab4b" isSystem="false" />
		<function name="st_distance_sphere" id="Function_31d0d1b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance_sphere(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT COST 300
AS $function$
	select st_distance(geography($1),geography($2),false)
	$function$
]]></string>
			<comment><![CDATA[args: geomlonlatA, geomlonlatB - Returns minimum distance in meters between two lon/lat geometries. Uses a spherical earth and radius of 6370986 meters. Faster than ST_Distance_Spheroid , but less accurate. PostGIS versions prior to 1.5 only implemented for points.]]></comment>
		</function>
		<function name="st_distance_spheroid" id="Function_23d9f634" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distance_spheroid(geom1 geometry, geom2 geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_distance_ellipsoid$function$
]]></string>
			<comment><![CDATA[args: geomlonlatA, geomlonlatB, measurement_spheroid - Returns the minimum distance between two lon/lat geometries given a particular spheroid. PostGIS versions prior to 1.5 only support points.]]></comment>
		</function>
		<function name="st_distinct4ma" id="Function_8eb7ffb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_distinct4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT COUNT(DISTINCT unnest)::float FROM unnest($1) $function$
CREATE OR REPLACE FUNCTION public.st_distinct4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT COUNT(DISTINCT unnest)::double precision FROM unnest($1) $function$
]]></string>
		</function>
		<function name="st_distinct4ma_001" id="Function_21e7886e" isSystem="false" />
		<function name="st_dump" id="Function_19ed1ead" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dump(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_dump$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a set of geometry_dump (geom,path) rows, that make up a geometry g1.]]></comment>
		</function>
		<function name="st_dumpaspolygons" id="Function_13b039b1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumpaspolygons(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true)
 RETURNS SETOF geomval
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_dumpAsPolygons$function$
]]></string>
		</function>
		<function name="st_dumppoints" id="Function_2aeb124a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumppoints(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_dumppoints$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a set of geometry_dump (geom,path) rows of all points that make up a geometry.]]></comment>
		</function>
		<function name="st_dumprings" id="Function_d8981ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumprings(geometry)
 RETURNS SETOF geometry_dump
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_dump_rings$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Returns a set of geometry_dump rows, representing the exterior and interior rings of a polygon.]]></comment>
		</function>
		<function name="st_dumpvalues" id="Function_231101ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dumpvalues(rast raster, nband integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT valarray FROM st_dumpvalues($1, ARRAY[$2]::integer[], $3) $function$
CREATE OR REPLACE FUNCTION public.st_dumpvalues(rast raster, nband integer[] DEFAULT NULL::integer[], exclude_nodata_value boolean DEFAULT true, OUT nband integer, OUT valarray double precision[])
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_dumpValues$function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.]]></comment>
		</function>
		<function name="st_dumpvalues_001" id="Function_212db78f" isSystem="false" >
			<comment><![CDATA[args: rast, nband, exclude_nodata_value=true - Get the values of the specified band as a 2-dimension array.]]></comment>
		</function>
		<function name="st_dwithin" id="Function_13e62293" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_dwithin(text, text, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_DWithin($1::geometry, $2::geometry, $3);  $function$
CREATE OR REPLACE FUNCTION public.st_dwithin(geom1 geometry, geom2 geometry, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && ST_Expand($2,$3) AND $2 && ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3)$function$
CREATE OR REPLACE FUNCTION public.st_dwithin(geography, geography, double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, true)$function$
CREATE OR REPLACE FUNCTION public.st_dwithin(rast1 raster, rast2 raster, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_dwithin($1, NULL::integer, $2, NULL::integer, $3) $function$
CREATE OR REPLACE FUNCTION public.st_dwithin(geography, geography, double precision, boolean)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && _ST_Expand($2,$3) AND $2 && _ST_Expand($1,$3) AND _ST_DWithin($1, $2, $3, $4)$function$
CREATE OR REPLACE FUNCTION public.st_dwithin(rast1 raster, nband1 integer, rast2 raster, nband2 integer, distance double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1::geometry && ST_Expand(ST_ConvexHull($3), $5) AND $3::geometry && ST_Expand(ST_ConvexHull($1), $5) AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_dwithin(st_convexhull($1), st_convexhull($3), $5) ELSE _st_dwithin($1, $2, $3, $4, $5) END $function$
]]></string>
			<comment><![CDATA[args: g1, g2, distance_of_srid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
		</function>
		<function name="st_dwithin_001" id="Function_ea4dbc6" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2, distance_meters, use_spheroid - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
		</function>
		<function name="st_dwithin_002" id="Function_f229c88" isSystem="false" >
			<comment><![CDATA[args: gg1, gg2, distance_meters - Returns true if the geometries are within the specified distance of one another. For geometry units are in those of spatial reference and For geography units are in meters and measurement is defaulted to use_spheroid=true (measure around spheroid), for faster check, use_spheroid=false to measure along sphere.]]></comment>
		</function>
		<function name="st_dwithin_003" id="Function_37847495" isSystem="false" />
		<function name="st_dwithin_004" id="Function_10559092" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.]]></comment>
		</function>
		<function name="st_dwithin_005" id="Function_32016e4e" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB, distance_of_srid - Return true if rasters rastA and rastB are within the specified distance of each other.]]></comment>
		</function>
		<function name="st_endpoint" id="Function_28654393" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_endpoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_endpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: g - Returns the last point of a LINESTRING geometry as a POINT.]]></comment>
		</function>
		<function name="st_envelope" id="Function_13fed107" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_envelope(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_envelope$function$
CREATE OR REPLACE FUNCTION public.st_envelope(raster)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$select st_envelope(st_convexhull($1))$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a geometry representing the double precision (float8) bounding box of the supplied geometry.]]></comment>
		</function>
		<function name="st_envelope_001" id="Function_197a45f8" isSystem="false" />
		<function name="st_equals" id="Function_231cb1ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_equals(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 ~= $2 AND _ST_Equals($1,$2)$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry. Directionality is ignored.]]></comment>
		</function>
		<function name="st_estimated_extent" id="Function_2ebdadc4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimated_extent(text, text)
 RETURNS box2d
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer 
    -- to prevent malicious injection of a same named different function
    -- that would be run under elevated permissions
    SELECT ST_EstimatedExtent($1, $2);
  $function$
CREATE OR REPLACE FUNCTION public.st_estimated_extent(text, text, text)
 RETURNS box2d
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Estimated_Extent', 'ST_EstimatedExtent', '2.1.0');
    -- We use security invoker instead of security definer 
    -- to prevent malicious injection of a different same named function
    SELECT ST_EstimatedExtent($1, $2, $3);
  $function$
]]></string>
		</function>
		<function name="st_estimated_extent_001" id="Function_1d2a6ed8" isSystem="false" />
		<function name="st_estimatedextent" id="Function_1736579b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_estimatedextent(text, text)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT SECURITY DEFINER
AS '$libdir/postgis-2.1', $function$gserialized_estimated_extent$function$
CREATE OR REPLACE FUNCTION public.st_estimatedextent(text, text, text)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT SECURITY DEFINER
AS '$libdir/postgis-2.1', $function$gserialized_estimated_extent$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
		</function>
		<function name="st_estimatedextent_001" id="Function_2f05a90e" isSystem="false" >
			<comment><![CDATA[args: table_name, geocolumn_name - Return the estimated extent of the given spatial table. The estimated is taken from the geometry columns statistics. The current schema will be used if not specified.]]></comment>
		</function>
		<function name="st_expand" id="Function_2ea75335" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_expand(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_expand$function$
CREATE OR REPLACE FUNCTION public.st_expand(box3d, double precision)
 RETURNS box3d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_expand$function$
CREATE OR REPLACE FUNCTION public.st_expand(box2d, double precision)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX2D_expand$function$
]]></string>
			<comment><![CDATA[args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
		</function>
		<function name="st_expand_001" id="Function_c7e9d7d" isSystem="false" >
			<comment><![CDATA[args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
		</function>
		<function name="st_expand_002" id="Function_ed484b3" isSystem="false" >
			<comment><![CDATA[args: g1, units_to_expand - Returns bounding box expanded in all directions from the bounding box of the input geometry. Uses double-precision]]></comment>
		</function>
		<function name="st_extent" id="Function_b6a51de" isSystem="false" >
			<comment><![CDATA[args: geomfield - an aggregate function that returns the bounding box that bounds rows of geometries.]]></comment>
		</function>
		<function name="st_exteriorring" id="Function_2210750f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_exteriorring(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_exteriorring_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Returns a line string representing the exterior ring of the POLYGON geometry. Return NULL if the geometry is not a polygon. Will not work with MULTIPOLYGON]]></comment>
		</function>
		<function name="st_find_extent" id="Function_2c45b0bb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_find_extent(text, text)
 RETURNS box2d
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	tablename alias for $1;
	columnname alias for $2;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$function$
CREATE OR REPLACE FUNCTION public.st_find_extent(text, text, text)
 RETURNS box2d
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
DECLARE
	schemaname alias for $1;
	tablename alias for $2;
	columnname alias for $3;
	myrec RECORD;
BEGIN
	FOR myrec IN EXECUTE 'SELECT ST_Extent("' || columnname || '") As extent FROM "' || schemaname || '"."' || tablename || '"' LOOP
		return myrec.extent;
	END LOOP;
END;
$function$
]]></string>
		</function>
		<function name="st_find_extent_001" id="Function_1e0f8cd4" isSystem="false" />
		<function name="st_flipcoordinates" id="Function_36f8a0d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_flipcoordinates(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_FlipCoordinates$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a version of the given geometry with X and Y axis flipped. Useful for people who have built latitude/longitude features and need to fix them.]]></comment>
		</function>
		<function name="st_force2d" id="Function_2bc93d77" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force2d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_2d$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into a "2-dimensional mode" so that all output representations will only have the X and Y coordinates.]]></comment>
		</function>
		<function name="st_force3d" id="Function_1376dcde" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force3d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_3dz$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYZ mode. This is an alias for ST_Force3DZ.]]></comment>
		</function>
		<function name="st_force3dm" id="Function_25ea9a1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force3dm(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_3dm$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYM mode.]]></comment>
		</function>
		<function name="st_force3dz" id="Function_11853e98" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force3dz(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_3dz$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYZ mode. This is a synonym for ST_Force3D.]]></comment>
		</function>
		<function name="st_force4d" id="Function_35110188" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force4d(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_4d$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries into XYZM mode.]]></comment>
		</function>
		<function name="st_force_2d" id="Function_25a53878" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_2d(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Force_2d', 'ST_Force2D', '2.1.0');
    SELECT ST_Force2D($1);
  $function$
]]></string>
		</function>
		<function name="st_force_3d" id="Function_390e9243" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3d(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Force_3d', 'ST_Force3D', '2.1.0');
    SELECT ST_Force3D($1);
  $function$
]]></string>
		</function>
		<function name="st_force_3dm" id="Function_1fc538b4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3dm(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Force_3dm', 'ST_Force3DM', '2.1.0');
    SELECT ST_Force3DM($1);
  $function$
]]></string>
		</function>
		<function name="st_force_3dz" id="Function_263da52a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_3dz(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Force_3dz', 'ST_Force3DZ', '2.1.0');
    SELECT ST_Force3DZ($1);
  $function$
]]></string>
		</function>
		<function name="st_force_4d" id="Function_f51460" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_4d(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Force_4d', 'ST_Force4D', '2.1.0');
    SELECT ST_Force4D($1);
  $function$
]]></string>
		</function>
		<function name="st_force_collection" id="Function_1e181b3d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_force_collection(geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Force_Collection', 'ST_ForceCollection', '2.1.0');
    SELECT ST_ForceCollection($1);
  $function$
]]></string>
		</function>
		<function name="st_forcecollection" id="Function_39f1be47" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcecollection(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_collection$function$
]]></string>
			<comment><![CDATA[args: geomA - Converts the geometry into a GEOMETRYCOLLECTION.]]></comment>
		</function>
		<function name="st_forcerhr" id="Function_18175ca8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcerhr(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_clockwise_poly$function$
]]></string>
			<comment><![CDATA[args: g - Forces the orientation of the vertices in a polygon to follow the Right-Hand-Rule.]]></comment>
		</function>
		<function name="st_forcesfs" id="Function_234272e5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_forcesfs(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_sfs$function$
CREATE OR REPLACE FUNCTION public.st_forcesfs(geometry, version text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_sfs$function$
]]></string>
			<comment><![CDATA[args: geomA - Forces the geometries to use SFS 1.1 geometry types only.]]></comment>
		</function>
		<function name="st_forcesfs_001" id="Function_355fd923" isSystem="false" >
			<comment><![CDATA[args: geomA, version - Forces the geometries to use SFS 1.1 geometry types only.]]></comment>
		</function>
		<function name="st_fromgdalraster" id="Function_595033b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_fromgdalraster(gdaldata bytea, srid integer DEFAULT NULL::integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_fromGDALRaster$function$
]]></string>
			<comment><![CDATA[args: gdaldata, srid=NULL - Returns a raster from a supported GDAL raster file.]]></comment>
		</function>
		<function name="st_gdaldrivers" id="Function_383c920c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_gdaldrivers(OUT idx integer, OUT short_name text, OUT long_name text, OUT create_options text)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getGDALDrivers$function$
]]></string>
			<comment><![CDATA[args: OUT idx, OUT short_name, OUT long_name, OUT create_options - Returns a list of raster formats supported by your lib gdal. These are the formats you can output your raster using ST_AsGDALRaster.]]></comment>
		</function>
		<function name="st_geogfromtext" id="Function_3820bbed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geogfromtext(text)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_from_text$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
		</function>
		<function name="st_geogfromwkb" id="Function_fc1066f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geogfromwkb(bytea)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_from_binary$function$
]]></string>
			<comment><![CDATA[args: geom - Creates a geography instance from a Well-Known Binary geometry representation (WKB) or extended Well Known Binary (EWKB).]]></comment>
		</function>
		<function name="st_geographyfromtext" id="Function_36c46575" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geographyfromtext(text)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geography_from_text$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified geography value from Well-Known Text representation or extended (WKT).]]></comment>
		</function>
		<function name="st_geohash" id="Function_200fe884" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geohash(geom geometry, maxchars integer DEFAULT 0)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_GeoHash$function$
CREATE OR REPLACE FUNCTION public.st_geohash(geog geography, maxchars integer DEFAULT 0)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_GeoHash$function$
]]></string>
			<comment><![CDATA[args: geom, maxchars=full_precision_of_point - Return a GeoHash representation of the geometry.]]></comment>
		</function>
		<function name="st_geohash_001" id="Function_3952092d" isSystem="false" />
		<function name="st_geomcollfromtext" id="Function_26074857" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_geomcollfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_geomcollfromtext_001" id="Function_258708bc" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a collection Geometry from collection WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_geomcollfromwkb" id="Function_123175fb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomcollfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_geomcollfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'GEOMETRYCOLLECTION'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_geomcollfromwkb_001" id="Function_2964b008" isSystem="false" />
		<function name="st_geometryfromtext" id="Function_14a865ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometryfromtext(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_text$function$
CREATE OR REPLACE FUNCTION public.st_geometryfromtext(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
		</function>
		<function name="st_geometryfromtext_001" id="Function_3a846ec5" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
		</function>
		<function name="st_geometryn" id="Function_167e13cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometryn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_geometryn_collection$function$
]]></string>
			<comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry if the geometry is a GEOMETRYCOLLECTION, (MULTI)POINT, (MULTI)LINESTRING, MULTICURVE or (MULTI)POLYGON, POLYHEDRALSURFACE Otherwise, return NULL.]]></comment>
		</function>
		<function name="st_geometrytype" id="Function_d7f50f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geometrytype(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geometry_geometrytype$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the geometry type of the ST_Geometry value.]]></comment>
		</function>
		<function name="st_geomfromewkb" id="Function_162f28af" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromewkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOMFromWKB$function$
]]></string>
			<comment><![CDATA[args: EWKB - Return a specified ST_Geometry value from Extended Well-Known Binary representation (EWKB).]]></comment>
		</function>
		<function name="st_geomfromewkt" id="Function_1663ac8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromewkt(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$parse_WKT_lwgeom$function$
]]></string>
			<comment><![CDATA[args: EWKT - Return a specified ST_Geometry value from Extended Well-Known Text representation (EWKT).]]></comment>
		</function>
		<function name="st_geomfromgeohash" id="Function_11456f75" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgeohash(text, integer DEFAULT NULL::integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT CAST(ST_Box2dFromGeoHash($1, $2) AS geometry); $function$
]]></string>
			<comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a geometry from a GeoHash string.]]></comment>
		</function>
		<function name="st_geomfromgeojson" id="Function_285a4366" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgeojson(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geom_from_geojson$function$
]]></string>
			<comment><![CDATA[args: geomjson - Takes as input a geojson representation of a geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromgml" id="Function_32d75967" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromgml(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_GeomFromGML($1, 0)$function$
CREATE OR REPLACE FUNCTION public.st_geomfromgml(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geom_from_gml$function$
]]></string>
			<comment><![CDATA[args: geomgml, srid - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromgml_001" id="Function_33b8abcc" isSystem="false" >
			<comment><![CDATA[args: geomgml - Takes as input GML representation of geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromkml" id="Function_9c1a64b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromkml(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geom_from_kml$function$
]]></string>
			<comment><![CDATA[args: geomkml - Takes as input KML representation of geometry and outputs a PostGIS geometry object]]></comment>
		</function>
		<function name="st_geomfromtext" id="Function_3eca941" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromtext(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_text$function$
CREATE OR REPLACE FUNCTION public.st_geomfromtext(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
		</function>
		<function name="st_geomfromtext_001" id="Function_12a27ce1" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Return a specified ST_Geometry value from Well-Known Text representation (WKT).]]></comment>
		</function>
		<function name="st_geomfromwkb" id="Function_2ebc7944" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geomfromwkb(bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_WKB$function$
CREATE OR REPLACE FUNCTION public.st_geomfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_SetSRID(ST_GeomFromWKB($1), $2)$function$
]]></string>
			<comment><![CDATA[args: geom - Makes a geometry from WKB with the given SRID]]></comment>
		</function>
		<function name="st_geomfromwkb_001" id="Function_270201" isSystem="false" >
			<comment><![CDATA[args: geom, srid - Makes a geometry from WKB with the given SRID]]></comment>
		</function>
		<function name="st_georeference" id="Function_1659f548" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_georeference(rast raster, format text DEFAULT 'GDAL'::text)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
    DECLARE
				scale_x numeric;
				scale_y numeric;
				skew_x numeric;
				skew_y numeric;
				ul_x numeric;
				ul_y numeric;
        result text;
    BEGIN
			SELECT scalex::numeric, scaley::numeric, skewx::numeric, skewy::numeric, upperleftx::numeric, upperlefty::numeric
				INTO scale_x, scale_y, skew_x, skew_y, ul_x, ul_y FROM ST_Metadata(rast);
						-- scale x
            result := trunc(scale_x, 10) || E'\n';
						-- skew y
            result := result || trunc(skew_y, 10) || E'\n';
						-- skew x
            result := result || trunc(skew_x, 10) || E'\n';
						-- scale y
            result := result || trunc(scale_y, 10) || E'\n';
        IF format = 'ESRI' THEN
						-- upper left x
            result := result || trunc((ul_x + scale_x * 0.5), 10) || E'\n';
						-- upper left y
            result = result || trunc((ul_y + scale_y * 0.5), 10) || E'\n';
        ELSE -- IF format = 'GDAL' THEN
						-- upper left x
            result := result || trunc(ul_x, 10) || E'\n';
						-- upper left y
            result := result || trunc(ul_y, 10) || E'\n';
        END IF;
        RETURN result;
    END;
    $function$
]]></string>
			<comment><![CDATA[args: rast, format=GDAL - Returns the georeference meta data in GDAL or ESRI format as commonly seen in a world file. Default is GDAL.]]></comment>
		</function>
		<function name="st_geotransform" id="Function_22014513" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_geotransform(raster, OUT imag double precision, OUT jmag double precision, OUT theta_i double precision, OUT theta_ij double precision, OUT xoffset double precision, OUT yoffset double precision)
 RETURNS record
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_getGeotransform$function$
]]></string>
		</function>
		<function name="st_gmltosql" id="Function_281eeff0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_gmltosql(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_GeomFromGML($1, 0)$function$
CREATE OR REPLACE FUNCTION public.st_gmltosql(text, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geom_from_gml$function$
]]></string>
			<comment><![CDATA[args: geomgml - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
		</function>
		<function name="st_gmltosql_001" id="Function_299e5f9f" isSystem="false" >
			<comment><![CDATA[args: geomgml, srid - Return a specified ST_Geometry value from GML representation. This is an alias name for ST_GeomFromGML]]></comment>
		</function>
		<function name="st_hasarc" id="Function_19f6d1bf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hasarc(geometry geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_has_arc$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns true if a geometry or geometry collection contains a circular string]]></comment>
		</function>
		<function name="st_hasnoband" id="Function_29d2d6d7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hasnoband(rast raster, nband integer DEFAULT 1)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_hasNoBand$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum=1 - Returns true if there is no band with given band number. If no band number is specified, then band number 1 is assumed.]]></comment>
		</function>
		<function name="st_hausdorffdistance" id="Function_3eb035d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hausdorffdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$hausdorffdistance$function$
CREATE OR REPLACE FUNCTION public.st_hausdorffdistance(geom1 geometry, geom2 geometry, double precision)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$hausdorffdistancedensify$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
		</function>
		<function name="st_hausdorffdistance_001" id="Function_8db9390" isSystem="false" >
			<comment><![CDATA[args: g1, g2, densifyFrac - Returns the Hausdorff distance between two geometries. Basically a measure of how similar or dissimilar 2 geometries are. Units are in the units of the spatial reference system of the geometries.]]></comment>
		</function>
		<function name="st_height" id="Function_15b7f9d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_height(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getHeight$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the height of the raster in pixels.]]></comment>
		</function>
		<function name="st_hillshade" id="Function_33740fed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_hillshade(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, azimuth double precision DEFAULT 315.0, altitude double precision DEFAULT 45.0, max_bright double precision DEFAULT 255.0, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_hillshade($1, $2, NULL::raster, $3, $4, $5, $6, $7, $8) $function$
CREATE OR REPLACE FUNCTION public.st_hillshade(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, azimuth double precision DEFAULT 315.0, altitude double precision DEFAULT 45.0, max_bright double precision DEFAULT 255.0, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height, scalex INTO _width, _height FROM ST_Metadata(_rast);
		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_hillshade4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			$5::text, $6::text,
			$7::text, $8::text
		);
	END;
	$function$
]]></string>
		</function>
		<function name="st_hillshade_001" id="Function_8f7842e" isSystem="false" />
		<function name="st_histogram" id="Function_d635dd6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, $3, 1, $4, NULL, $5) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rast raster, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT min, max, count, percent FROM _st_histogram($1, $2, TRUE, 1, $3, NULL, $4) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, bins integer DEFAULT 0, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, $6, $7) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, $4, 1, $5, NULL, $6) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, width double precision[] DEFAULT NULL::double precision[], "right" boolean DEFAULT false, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_histogram(rastertable text, rastercolumn text, nband integer, bins integer, "right" boolean, OUT min double precision, OUT max double precision, OUT count bigint, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_histogram($1, $2, $3, TRUE, 1, $4, NULL, $5) $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_001" id="Function_8f93b93" isSystem="false" >
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_002" id="Function_10b07128" isSystem="false" >
			<comment><![CDATA[args: rast, nband, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_003" id="Function_39f58d29" isSystem="false" >
			<comment><![CDATA[args: rast, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_004" id="Function_b894c66" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, bins=autocomputed, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_005" id="Function_26d509f1" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_006" id="Function_b7255d1" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, bins, width=NULL, right=false - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_histogram_007" id="Function_33f6628c" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, bins, right - Returns a set of record summarizing a raster or raster coverage data distribution separate bin ranges. Number of bins are autocomputed if not specified.]]></comment>
		</function>
		<function name="st_interiorringn" id="Function_240258eb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_interiorringn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_interiorringn_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon, n - Return the Nth interior linestring ring of the polygon geometry. Return NULL if the geometry is not a polygon or the given N is out of range.]]></comment>
		</function>
		<function name="st_interpolatepoint" id="Function_2955d15a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_interpolatepoint(line geometry, point geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_InterpolatePoint$function$
]]></string>
			<comment><![CDATA[args: line, point - Return the value of the measure dimension of a geometry at the point closed to the provided point.]]></comment>
		</function>
		<function name="st_intersection" id="Function_658528e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersection(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$intersection$function$
CREATE OR REPLACE FUNCTION public.st_intersection(geography, geography)
 RETURNS geography
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT geography(ST_Transform(ST_Intersection(ST_Transform(geometry($1), _ST_BestSRID($1, $2)), ST_Transform(geometry($2), _ST_BestSRID($1, $2))), 4326))$function$
CREATE OR REPLACE FUNCTION public.st_intersection(text, text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Intersection($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_intersection(geomin geometry, rast raster, band integer DEFAULT 1)
 RETURNS SETOF geomval
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		intersects boolean := FALSE;
	BEGIN
		intersects := ST_Intersects(geomin, rast, band);
		IF intersects THEN
			-- Return the intersections of the geometry with the vectorized parts of
			-- the raster and the values associated with those parts, if really their
			-- intersection is not empty.
			RETURN QUERY
				SELECT
					intgeom,
					val
				FROM (
					SELECT
						ST_Intersection((gv).geom, geomin) AS intgeom,
						(gv).val
					FROM ST_DumpAsPolygons(rast, band) gv
					WHERE ST_Intersects((gv).geom, geomin)
				) foo
				WHERE NOT ST_IsEmpty(intgeom);
		ELSE
			-- If the geometry does not intersect with the raster, return an empty
			-- geometry and a null value
			RETURN QUERY
				SELECT
					emptygeom,
					NULL::float8
				FROM ST_GeomCollFromText('GEOMETRYCOLLECTION EMPTY', ST_SRID($1)) emptygeom;
		END IF;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast raster, band integer, geomin geometry)
 RETURNS SETOF geomval
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($3, $1, $2) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast raster, geomin geometry)
 RETURNS SETOF geomval
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($2, $1, 1) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])
 RETURNS raster
 LANGUAGE plpgsql
 STABLE
AS $function$
	DECLARE
		rtn raster;
		_returnband text;
		newnodata1 float8;
		newnodata2 float8;
	BEGIN
		IF ST_SRID(rast1) != ST_SRID(rast2) THEN
			RAISE EXCEPTION 'The two rasters do not have the same SRID';
		END IF;
		newnodata1 := coalesce(nodataval[1], ST_BandNodataValue(rast1, band1), ST_MinPossibleValue(ST_BandPixelType(rast1, band1)));
		newnodata2 := coalesce(nodataval[2], ST_BandNodataValue(rast2, band2), ST_MinPossibleValue(ST_BandPixelType(rast2, band2)));
		
		_returnband := upper(returnband);
		rtn := NULL;
		CASE
			WHEN _returnband = 'BAND1' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
			WHEN _returnband = 'BAND2' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata2);
			WHEN _returnband = 'BOTH' THEN
				rtn := ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast1.val]', ST_BandPixelType(rast1, band1), 'INTERSECTION', newnodata1::text, newnodata1::text, newnodata1);
				rtn := ST_SetBandNodataValue(rtn, 1, newnodata1);
				rtn := ST_AddBand(rtn, ST_MapAlgebraExpr(rast1, band1, rast2, band2, '[rast2.val]', ST_BandPixelType(rast2, band2), 'INTERSECTION', newnodata2::text, newnodata2::text, newnodata2));
				rtn := ST_SetBandNodataValue(rtn, 2, newnodata2);
			ELSE
				RAISE EXCEPTION 'Unknown value provided for returnband: %', returnband;
				RETURN NULL;
		END CASE;
		RETURN rtn;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, returnband text, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, $2, $3, $4, $5, ARRAY[$6, $6]) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', $5) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, band1 integer, rast2 raster, band2 integer, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, $2, $3, $4, 'BOTH', ARRAY[$5, $5]) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, returnband text DEFAULT 'BOTH'::text, nodataval double precision[] DEFAULT NULL::double precision[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, returnband text, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, $3, ARRAY[$4, $4]) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, nodataval double precision[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', $3) $function$
CREATE OR REPLACE FUNCTION public.st_intersection(rast1 raster, rast2 raster, nodataval double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_intersection($1, 1, $2, 1, 'BOTH', ARRAY[$3, $3]) $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.]]></comment>
		</function>
		<function name="st_intersection_001" id="Function_19c99a84" isSystem="false" >
			<comment><![CDATA[args: geogA, geogB - (T) Returns a geometry that represents the shared portion of geomA and geomB. The geography implementation does a transform to geometry to do the intersection and then transform back to WGS84.]]></comment>
		</function>
		<function name="st_intersection_002" id="Function_21fcbe51" isSystem="false" />
		<function name="st_intersection_003" id="Function_b8fa38d" isSystem="false" />
		<function name="st_intersection_004" id="Function_fe5b4b8" isSystem="false" />
		<function name="st_intersection_005" id="Function_29a6059d" isSystem="false" />
		<function name="st_intersection_006" id="Function_32be9eea" isSystem="false" />
		<function name="st_intersection_007" id="Function_d42b92c" isSystem="false" />
		<function name="st_intersection_008" id="Function_3305f848" isSystem="false" />
		<function name="st_intersection_009" id="Function_ab841aa" isSystem="false" />
		<function name="st_intersection_010" id="Function_74710e0" isSystem="false" />
		<function name="st_intersection_011" id="Function_29b833df" isSystem="false" />
		<function name="st_intersection_012" id="Function_508948d" isSystem="false" />
		<function name="st_intersection_013" id="Function_d11fc27" isSystem="false" />
		<function name="st_intersects" id="Function_149d25d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_intersects(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Intersects($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_intersects(geography, geography)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Distance($1, $2, 0.0, false) < 0.00001$function$
CREATE OR REPLACE FUNCTION public.st_intersects(text, text)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT ST_Intersects($1::geometry, $2::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_intersects(st_convexhull($1), st_convexhull($3)) ELSE _st_intersects($1, $2, $3, $4) END $function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_intersects($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_intersects(geom geometry, rast raster, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $2::geometry AND _st_intersects($1, $2, $3); $function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast raster, geom geometry, nband integer DEFAULT NULL::integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1::geometry && $2 AND _st_intersects($2, $1, $3) $function$
CREATE OR REPLACE FUNCTION public.st_intersects(rast raster, nband integer, geom geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1::geometry && $3 AND _st_intersects($3, $1, $2) $function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
		</function>
		<function name="st_intersects_001" id="Function_3b8bae15" isSystem="false" >
			<comment><![CDATA[args: geogA, geogB - Returns TRUE if the Geometries/Geography "spatially intersect in 2D" - (share any portion of space) and FALSE if they dont (they are Disjoint). For geography -- tolerance is 0.00001 meters (so any points that close are considered to intersect)]]></comment>
		</function>
		<function name="st_intersects_002" id="Function_3a19b41e" isSystem="false" />
		<function name="st_intersects_003" id="Function_25248468" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA spatially intersects raster rastB.]]></comment>
		</function>
		<function name="st_intersects_004" id="Function_d6ab27f" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA spatially intersects raster rastB.]]></comment>
		</function>
		<function name="st_intersects_005" id="Function_32f27cc" isSystem="false" >
			<comment><![CDATA[args: geommin, rast, nband=NULL - Return true if raster rastA spatially intersects raster rastB.]]></comment>
		</function>
		<function name="st_intersects_006" id="Function_155dc533" isSystem="false" >
			<comment><![CDATA[args: rast, geommin, nband=NULL - Return true if raster rastA spatially intersects raster rastB.]]></comment>
		</function>
		<function name="st_intersects_007" id="Function_3abc3c5" isSystem="false" >
			<comment><![CDATA[args: rast, nband, geommin - Return true if raster rastA spatially intersects raster rastB.]]></comment>
		</function>
		<function name="st_invdistweight4ma" id="Function_1116e8b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_invdistweight4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_value double precision[][][];
		ndims int;
		k double precision DEFAULT 1.;
		_k double precision DEFAULT 1.;
		z double precision[];
		d double precision[];
		_d double precision;
		z0 double precision;
		_z integer;
		x integer;
		y integer;
		cx integer;
		cy integer;
		cv double precision;
		cw double precision DEFAULT NULL;
		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN
--		RAISE NOTICE 'value = %', value;
--		RAISE NOTICE 'userargs = %', userargs;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		_z := array_lower(_value, 1);
		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);
		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;
--		RAISE NOTICE 'max_dx, max_dy = %, %', max_dx, max_dy;
		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;
--		RAISE NOTICE 'w, h = %, %', w, h;
		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;
		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);
--		RAISE NOTICE 'cx, cy = %, %', cx, cy;
		-- if userargs provided, only use the first two args
		IF userargs IS NOT NULL AND array_ndims(userargs) = 1 THEN
			-- first arg is power factor
			k := userargs[array_lower(userargs, 1)]::double precision;
			IF k IS NULL THEN
				k := _k;
			ELSEIF k < 0. THEN
				RAISE NOTICE 'Power factor (< 0) must be between 0 and 1.  Defaulting to 0';
				k := 0.;
			ELSEIF k > 1. THEN
				RAISE NOTICE 'Power factor (> 1) must be between 0 and 1.  Defaulting to 1';
				k := 1.;
			END IF;
			-- second arg is what to do if center pixel has a value
			-- this will be a weight to apply for the center pixel
			IF array_length(userargs, 1) > 1 THEN
				cw := abs(userargs[array_lower(userargs, 1) + 1]::double precision);
				IF cw IS NOT NULL THEN
					IF cw < 0. THEN
						RAISE NOTICE 'Weight (< 0) of center pixel value must be between 0 and 1.  Defaulting to 0';
						cw := 0.;
					ELSEIF cw > 1 THEN
						RAISE NOTICE 'Weight (> 1) of center pixel value must be between 0 and 1.  Defaulting to 1';
						cw := 1.;
					END IF;
				END IF;
			END IF;
		END IF;
--		RAISE NOTICE 'k = %', k;
		k = abs(k) * -1;
		-- center pixel value
		cv := _value[_z][cy][cx];
		-- check to see if center pixel has value
--		RAISE NOTICE 'cw = %', cw;
		IF cw IS NULL AND cv IS NOT NULL THEN
			RETURN cv;
		END IF;
		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
--				RAISE NOTICE 'value[%][%][%] = %', _z, y, x, _value[_z][y][x];
				-- skip NODATA values and center pixel
				IF _value[_z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;
				z := z || _value[_z][y][x];
				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;
				d := d || _d;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'z = %', z;
--		RAISE NOTICE 'd = %', d;
		-- neighborhood is NODATA
		IF z IS NULL OR array_length(z, 1) < 1 THEN
			-- center pixel has value
			IF cv IS NOT NULL THEN
				RETURN cv;
			ELSE
				RETURN NULL;
			END IF;
		END IF;
		z0 := 0;
		_d := 0;
		FOR x IN array_lower(z, 1)..array_upper(z, 1) LOOP
			d[x] := power(d[x], k);
			z[x] := z[x] * d[x];
			_d := _d + d[x];
			z0 := z0 + z[x];
		END LOOP;
		z0 := z0 / _d;
--		RAISE NOTICE 'z0 = %', z0;
		-- apply weight for center pixel if center pixel has value
		IF cv IS NOT NULL THEN
			z0 := (cw * cv) + ((1 - cw) * z0);
--			RAISE NOTICE '*z0 = %', z0;
		END IF;
		RETURN z0;
	END;
	$function$
]]></string>
		</function>
		<function name="st_isclosed" id="Function_2a4f6d1f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isclosed(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_isclosed$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if the LINESTRINGs start and end points are coincident. For Polyhedral surface is closed (volumetric).]]></comment>
		</function>
		<function name="st_iscollection" id="Function_131b3dc9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_iscollection(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_IsCollection$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if the argument is a collection (MULTI*, GEOMETRYCOLLECTION, ...)]]></comment>
		</function>
		<function name="st_iscoveragetile" id="Function_2666d6da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_iscoveragetile(rast raster, coverage raster, tilewidth integer, tileheight integer)
 RETURNS boolean
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		_rastmeta record;
		_covmeta record;
		cr record;
		max integer[];
		tile integer[];
		edge integer[];
	BEGIN
		IF NOT ST_SameAlignment(rast, coverage) THEN
			RAISE NOTICE 'Raster and coverage are not aligned';
			RETURN FALSE;
		END IF;
		_rastmeta := ST_Metadata(rast);
		_covmeta := ST_Metadata(coverage);
		-- get coverage grid coordinates of upper-left of rast
		cr := ST_WorldToRasterCoord(coverage, _rastmeta.upperleftx, _rastmeta.upperlefty);
		-- rast is not part of coverage
		IF
			(cr.columnx < 1 OR cr.columnx > _covmeta.width) OR
			(cr.rowy < 1 OR cr.rowy > _covmeta.height)
		THEN
			RAISE NOTICE 'Raster is not in the coverage';
			RETURN FALSE;
		END IF;
		-- rast isn't on the coverage's grid
		IF
			((cr.columnx - 1) % tilewidth != 0) OR
			((cr.rowy - 1) % tileheight != 0)
		THEN
			RAISE NOTICE 'Raster is not aligned to tile grid of coverage';
			RETURN FALSE;
		END IF;
		-- max # of tiles on X and Y for coverage
		max[0] := ceil(_covmeta.width::double precision / tilewidth::double precision)::integer;
		max[1] := ceil(_covmeta.height::double precision / tileheight::double precision)::integer;
		-- tile # of rast in coverge
		tile[0] := (cr.columnx / tilewidth) + 1;
		tile[1] := (cr.rowy / tileheight) + 1;
		-- inner tile
		IF tile[0] < max[0] AND tile[1] < max[1] THEN
			IF
				(_rastmeta.width != tilewidth) OR
				(_rastmeta.height != tileheight)
			THEN
				RAISE NOTICE 'Raster width/height is invalid for interior tile of coverage';
				RETURN FALSE;
			ELSE
				RETURN TRUE;
			END IF;
		END IF;
		-- edge tile
		-- edge tile may have same size as inner tile
		IF 
			(_rastmeta.width = tilewidth) AND
			(_rastmeta.height = tileheight)
		THEN
			RETURN TRUE;
		END IF;
		-- get edge tile width and height
		edge[0] := _covmeta.width - ((max[0] - 1) * tilewidth);
		edge[1] := _covmeta.height - ((max[1] - 1) * tileheight);
		-- edge tile not of expected tile size
		-- right and bottom
		IF tile[0] = max[0] AND tile[1] = max[1] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most AND bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSEIF tile[0] = max[0] THEN
			IF
				_rastmeta.width != edge[0] OR
				_rastmeta.height != tileheight
			THEN
				RAISE NOTICE 'Raster width/height is invalid for right-most tile of coverage';
				RETURN FALSE;
			END IF;
		ELSE
			IF
				_rastmeta.width != tilewidth OR
				_rastmeta.height != edge[1]
			THEN
				RAISE NOTICE 'Raster width/height is invalid for bottom-most tile of coverage';
				RETURN FALSE;
			END IF;
		END IF;
		RETURN TRUE;
	END;
	$function$
]]></string>
		</function>
		<function name="st_isempty" id="Function_109ff5c3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isempty(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_isempty$function$
CREATE OR REPLACE FUNCTION public.st_isempty(rast raster)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_isEmpty$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns true if this Geometry is an empty geometrycollection, polygon, point etc.]]></comment>
		</function>
		<function name="st_isempty_001" id="Function_396a1e7b" isSystem="false" >
			<comment><![CDATA[args: rast - Returns true if the raster is empty (width = 0 and height = 0). Otherwise, returns false.]]></comment>
		</function>
		<function name="st_isring" id="Function_568a639" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isring(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$isring$function$
]]></string>
			<comment><![CDATA[args: g - Returns TRUE if this LINESTRING is both closed and simple.]]></comment>
		</function>
		<function name="st_issimple" id="Function_e9c65ed" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_issimple(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$issimple$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns (TRUE) if this Geometry has no anomalous geometric points, such as self intersection or self tangency.]]></comment>
		</function>
		<function name="st_isvalid" id="Function_c4bc618" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalid(geometry)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$isvalid$function$
CREATE OR REPLACE FUNCTION public.st_isvalid(geometry, integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT (ST_isValidDetail($1, $2)).valid$function$
]]></string>
			<comment><![CDATA[args: g, flags - Returns true if the ST_Geometry is well formed.]]></comment>
		</function>
		<function name="st_isvalid_001" id="Function_18255395" isSystem="false" >
			<comment><![CDATA[args: g - Returns true if the ST_Geometry is well formed.]]></comment>
		</function>
		<function name="st_isvaliddetail" id="Function_a0fa143" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvaliddetail(geometry)
 RETURNS valid_detail
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$isvaliddetail$function$
CREATE OR REPLACE FUNCTION public.st_isvaliddetail(geometry, integer)
 RETURNS valid_detail
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$isvaliddetail$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
		</function>
		<function name="st_isvaliddetail_001" id="Function_24149855" isSystem="false" >
			<comment><![CDATA[args: geom, flags - Returns a valid_detail (valid,reason,location) row stating if a geometry is valid or not and if not valid, a reason why and a location where.]]></comment>
		</function>
		<function name="st_isvalidreason" id="Function_1e6027b0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_isvalidreason(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$isvalidreason$function$
CREATE OR REPLACE FUNCTION public.st_isvalidreason(geometry, integer)
 RETURNS text
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
SELECT CASE WHEN valid THEN 'Valid Geometry' ELSE reason END FROM (
	SELECT (ST_isValidDetail($1, $2)).*
) foo
	$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
		</function>
		<function name="st_isvalidreason_001" id="Function_28bcd47b" isSystem="false" >
			<comment><![CDATA[args: geomA, flags - Returns text stating if a geometry is valid or not and if not valid, a reason why.]]></comment>
		</function>
		<function name="st_length" id="Function_11734a39" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length(text)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Length($1::geometry);  $function$
CREATE OR REPLACE FUNCTION public.st_length(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_length2d_linestring$function$
CREATE OR REPLACE FUNCTION public.st_length(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_length$function$
]]></string>
			<comment><![CDATA[args: a_2dlinestring - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
		</function>
		<function name="st_length2d" id="Function_1810f6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_length2d_linestring$function$
]]></string>
			<comment><![CDATA[args: a_2dlinestring - Returns the 2-dimensional length of the geometry if it is a linestring or multi-linestring. This is an alias for ST_Length]]></comment>
		</function>
		<function name="st_length2d_spheroid" id="Function_2a6c466c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length2d_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_length2d_ellipsoid$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_spheroid - Calculates the 2D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
		</function>
		<function name="st_length_001" id="Function_3a5a8800" isSystem="false" >
			<comment><![CDATA[args: geog, use_spheroid=true - Returns the 2d length of the geometry if it is a linestring or multilinestring. geometry are in units of spatial reference and geography are in meters (default spheroid)]]></comment>
		</function>
		<function name="st_length_002" id="Function_2451d550" isSystem="false" />
		<function name="st_length_spheroid" id="Function_6203c79" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_length_spheroid(geometry, spheroid)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$LWGEOM_length_ellipsoid_linestring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_spheroid - Calculates the 2D or 3D length of a linestring/multilinestring on an ellipsoid. This is useful if the coordinates of the geometry are in longitude/latitude and a length is desired without reprojection.]]></comment>
		</function>
		<function name="st_line_interpolate_point" id="Function_105e484a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_interpolate_point(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Line_Interpolate_Point', 'ST_LineInterpolatePoint', '2.1.0');
    SELECT ST_LineInterpolatePoint($1, $2);
  $function$
]]></string>
		</function>
		<function name="st_line_locate_point" id="Function_35ccac7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_locate_point(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Line_Locate_Point', 'ST_LineLocatePoint', '2.1.0');
     SELECT ST_LineLocatePoint($1, $2);
  $function$
]]></string>
		</function>
		<function name="st_line_substring" id="Function_6730c48" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_line_substring(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _postgis_deprecate('ST_Line_Substring', 'ST_LineSubstring', '2.1.0');
     SELECT ST_LineSubstring($1, $2, $3);
  $function$
]]></string>
		</function>
		<function name="st_linecrossingdirection" id="Function_21d82c3c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linecrossingdirection(geom1 geometry, geom2 geometry)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT CASE WHEN NOT $1 && $2 THEN 0 ELSE _ST_LineCrossingDirection($1,$2) END $function$
]]></string>
			<comment><![CDATA[args: linestringA, linestringB - Given 2 linestrings, returns a number between -3 and 3 denoting what kind of crossing behavior. 0 is no crossing.]]></comment>
		</function>
		<function name="st_linefrommultipoint" id="Function_33bb581" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefrommultipoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_line_from_mpoint$function$
]]></string>
			<comment><![CDATA[args: aMultiPoint - Creates a LineString from a MultiPoint geometry.]]></comment>
		</function>
		<function name="st_linefromtext" id="Function_2c16d814" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'LINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_linefromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
		</function>
		<function name="st_linefromtext_001" id="Function_19a7e12c" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT representation with the given SRID. If SRID is not given, it defaults to 0.]]></comment>
		</function>
		<function name="st_linefromwkb" id="Function_f0fc554" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_linefromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB, srid - Makes a LINESTRING from WKB with the given SRID]]></comment>
		</function>
		<function name="st_linefromwkb_001" id="Function_1293087c" isSystem="false" >
			<comment><![CDATA[args: WKB - Makes a LINESTRING from WKB with the given SRID]]></comment>
		</function>
		<function name="st_lineinterpolatepoint" id="Function_8eda99b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_lineinterpolatepoint(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_line_interpolate_point$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_fraction - Returns a point interpolated along a line. Second argument is a float8 between 0 and 1 representing fraction of total length of linestring the point has to be located.]]></comment>
		</function>
		<function name="st_linelocatepoint" id="Function_32266d67" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linelocatepoint(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_line_locate_point$function$
]]></string>
			<comment><![CDATA[args: a_linestring, a_point - Returns a float between 0 and 1 representing the location of the closest point on LineString to the given Point, as a fraction of total 2d line length.]]></comment>
		</function>
		<function name="st_linemerge" id="Function_13f9200a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linemerge(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$linemerge$function$
]]></string>
			<comment><![CDATA[args: amultilinestring - Returns a (set of) LineString(s) formed by sewing together a MULTILINESTRING.]]></comment>
		</function>
		<function name="st_linestringfromwkb" id="Function_e74c29a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linestringfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_linestringfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'LINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKB, srid - Makes a geometry from WKB with the given SRID.]]></comment>
		</function>
		<function name="st_linestringfromwkb_001" id="Function_21f54c54" isSystem="false" >
			<comment><![CDATA[args: WKB - Makes a geometry from WKB with the given SRID.]]></comment>
		</function>
		<function name="st_linesubstring" id="Function_39b600a5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linesubstring(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_line_substring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, startfraction, endfraction - Return a linestring being a substring of the input one starting and ending at the given fractions of total 2d length. Second and third arguments are float8 values between 0 and 1.]]></comment>
		</function>
		<function name="st_linetocurve" id="Function_20561cd4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_linetocurve(geometry geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_line_desegmentize$function$
]]></string>
			<comment><![CDATA[args: geomANoncircular - Converts a LINESTRING/POLYGON to a CIRCULARSTRING, CURVED POLYGON]]></comment>
		</function>
		<function name="st_locate_along_measure" id="Function_2520f8f5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locate_along_measure(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_locate_between_measures($1, $2, $2) $function$
]]></string>
		</function>
		<function name="st_locate_between_measures" id="Function_12c6d2d5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locate_between_measures(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_locate_between_m$function$
]]></string>
		</function>
		<function name="st_locatealong" id="Function_2679b8da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatealong(geometry geometry, measure double precision, leftrightoffset double precision DEFAULT 0.0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_LocateAlong$function$
]]></string>
			<comment><![CDATA[args: ageom_with_measure, a_measure, offset - Return a derived geometry collection value with elements that match the specified measure. Polygonal elements are not supported.]]></comment>
		</function>
		<function name="st_locatebetween" id="Function_2b31421a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatebetween(geometry geometry, frommeasure double precision, tomeasure double precision, leftrightoffset double precision DEFAULT 0.0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_LocateBetween$function$
]]></string>
			<comment><![CDATA[args: geomA, measure_start, measure_end, offset - Return a derived geometry collection value with elements that match the specified range of measures inclusively. Polygonal elements are not supported.]]></comment>
		</function>
		<function name="st_locatebetweenelevations" id="Function_379f9407" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_locatebetweenelevations(geometry geometry, fromelevation double precision, toelevation double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_LocateBetweenElevations$function$
]]></string>
			<comment><![CDATA[args: geom_mline, elevation_start, elevation_end - Return a derived geometry (collection) value with elements that intersect the specified range of elevations inclusively. Only 3D, 4D LINESTRINGS and MULTILINESTRINGS are supported.]]></comment>
		</function>
		<function name="st_longestline" id="Function_114718e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_longestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_LongestLine(ST_ConvexHull($1), ST_ConvexHull($2))$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional longest line points of two geometries. The function will only return the first longest line if more than one, that the function finds. The line returned will always start in g1 and end in g2. The length of the line this function returns will always be the same as st_maxdistance returns for g1 and g2.]]></comment>
		</function>
		<function name="st_m" id="Function_16ee16bc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_m(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_m_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the M coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_makebox2d" id="Function_1fda5434" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makebox2d(geom1 geometry, geom2 geometry)
 RETURNS box2d
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX2D_construct$function$
]]></string>
			<comment><![CDATA[args: pointLowLeft, pointUpRight - Creates a BOX2D defined by the given point geometries.]]></comment>
		</function>
		<function name="st_makeemptyraster" id="Function_37ce5e7e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeemptyraster(rast raster)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
		DECLARE
			w int;
			h int;
			ul_x double precision;
			ul_y double precision;
			scale_x double precision;
			scale_y double precision;
			skew_x double precision;
			skew_y double precision;
			sr_id int;
		BEGIN
			SELECT width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid INTO w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id FROM ST_Metadata(rast);
			RETURN st_makeemptyraster(w, h, ul_x, ul_y, scale_x, scale_y, skew_x, skew_y, sr_id);
		END;
    $function$
CREATE OR REPLACE FUNCTION public.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, pixelsize double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_makeemptyraster($1, $2, $3, $4, $5, -($5), 0, 0, ST_SRID('POINT(0 0)'::geometry)) $function$
CREATE OR REPLACE FUNCTION public.st_makeemptyraster(width integer, height integer, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision, srid integer DEFAULT 0)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_makeEmpty$function$
]]></string>
			<comment><![CDATA[args: width, height, upperleftx, upperlefty, scalex, scaley, skewx, skewy, srid=unknown - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
		</function>
		<function name="st_makeemptyraster_001" id="Function_7d61e4d" isSystem="false" >
			<comment><![CDATA[args: width, height, upperleftx, upperlefty, pixelsize - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
		</function>
		<function name="st_makeemptyraster_002" id="Function_34209afe" isSystem="false" >
			<comment><![CDATA[args: rast - Returns an empty raster (having no bands) of given dimensions (width & height), upperleft X and Y, pixel size and rotation (scalex, scaley, skewx & skewy) and reference system (srid). If a raster is passed in, returns a new raster with the same size, alignment and SRID. If srid is left out, the spatial ref is set to unknown (0).]]></comment>
		</function>
		<function name="st_makeenvelope" id="Function_3afe9349" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeenvelope(double precision, double precision, double precision, double precision, integer DEFAULT 0)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_MakeEnvelope$function$
]]></string>
			<comment><![CDATA[args: xmin, ymin, xmax, ymax, srid=unknown - Creates a rectangular Polygon formed from the given minimums and maximums. Input values must be in SRS specified by the SRID.]]></comment>
		</function>
		<function name="st_makeline" id="Function_2c98a9fd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makeline(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makeline_garray$function$
CREATE OR REPLACE FUNCTION public.st_makeline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makeline$function$
]]></string>
			<comment><![CDATA[args: geoms_array - Creates a Linestring from point or line geometries.]]></comment>
		</function>
		<function name="st_makeline_001" id="Function_28712e91" isSystem="false" >
			<comment><![CDATA[args: geom1, geom2 - Creates a Linestring from point or line geometries.]]></comment>
		</function>
		<function name="st_makeline_002" id="Function_36c56cd7" isSystem="false" >
			<comment><![CDATA[args: geoms - Creates a Linestring from point or line geometries.]]></comment>
		</function>
		<function name="st_makepoint" id="Function_38f1e3f6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makepoint$function$
CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makepoint$function$
CREATE OR REPLACE FUNCTION public.st_makepoint(double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x, y - Creates a 2D,3DZ or 4D point geometry.]]></comment>
		</function>
		<function name="st_makepoint_001" id="Function_37aced31" isSystem="false" >
			<comment><![CDATA[args: x, y, z - Creates a 2D,3DZ or 4D point geometry.]]></comment>
		</function>
		<function name="st_makepoint_002" id="Function_2ac3bb80" isSystem="false" >
			<comment><![CDATA[args: x, y, z, m - Creates a 2D,3DZ or 4D point geometry.]]></comment>
		</function>
		<function name="st_makepointm" id="Function_15040960" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepointm(double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makepoint3dm$function$
]]></string>
			<comment><![CDATA[args: x, y, m - Creates a point geometry with an x y and m coordinate.]]></comment>
		</function>
		<function name="st_makepolygon" id="Function_7c7e651" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makepolygon(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makepoly$function$
CREATE OR REPLACE FUNCTION public.st_makepolygon(geometry, geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makepoly$function$
]]></string>
			<comment><![CDATA[args: outerlinestring, interiorlinestrings - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
		</function>
		<function name="st_makepolygon_001" id="Function_b0e1d09" isSystem="false" >
			<comment><![CDATA[args: linestring - Creates a Polygon formed by the given shell. Input geometries must be closed LINESTRINGS.]]></comment>
		</function>
		<function name="st_makevalid" id="Function_2cb178f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_makevalid(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_MakeValid$function$
]]></string>
			<comment><![CDATA[args: input - Attempts to make an invalid geometry valid without losing vertices.]]></comment>
		</function>
		<function name="st_mapalgebra" id="Function_26333995" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebra(rastbandargset rastbandarg[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _ST_MapAlgebra($1, $2, $3, $6, $7, $4, $5, VARIADIC $8) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, nband integer[], callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'FIRST'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE plpgsql
 STABLE
AS $function$
	DECLARE
		x int;
		argset rastbandarg[];
	BEGIN
		IF $2 IS NULL OR array_ndims($2) < 1 OR array_length($2, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;
		FOR x IN array_lower($2, 1)..array_upper($2, 1) LOOP
			IF $2[x] IS NULL THEN
				CONTINUE;
			END IF;
			argset := argset || ROW($1, $2[x])::rastbandarg;
		END LOOP;
		IF array_length(argset, 1) < 1 THEN
			RAISE EXCEPTION 'Populated 1D array must be provided for nband';
			RETURN NULL;
		END IF;
		RETURN _ST_MapAlgebra(argset, $3, $4, $7, $8, $5, $6, VARIADIC $9);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, nband integer, callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'FIRST'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _ST_MapAlgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $3, $4, $7, $8, $5, $6, VARIADIC $9) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast1 raster, nband1 integer, rast2 raster, nband2 integer, callbackfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, customextent raster DEFAULT NULL::raster, distancex integer DEFAULT 0, distancey integer DEFAULT 0, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _ST_MapAlgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $9, $10, $7, $8, VARIADIC $11) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, nband integer, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_mapalgebra(ARRAY[ROW($1, $2)]::rastbandarg[], $4, $3, 'FIRST', $5::text) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast raster, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebra($1, 1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_mapalgebra(ARRAY[ROW($1, $2), ROW($3, $4)]::rastbandarg[], $5, $6, $7, $8, $9, $10) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebra(rast1 raster, rast2 raster, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebra($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $function$
]]></string>
		</function>
		<function name="st_mapalgebra_001" id="Function_392f4dde" isSystem="false" />
		<function name="st_mapalgebra_002" id="Function_293ec004" isSystem="false" />
		<function name="st_mapalgebra_003" id="Function_1f5566a8" isSystem="false" />
		<function name="st_mapalgebra_004" id="Function_3dad684" isSystem="false" />
		<function name="st_mapalgebra_005" id="Function_3afad8a8" isSystem="false" />
		<function name="st_mapalgebra_006" id="Function_18337551" isSystem="false" />
		<function name="st_mapalgebra_007" id="Function_781dff" isSystem="false" />
		<function name="st_mapalgebraexpr" id="Function_24f9a4a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast raster, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebraexpr($1, 1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast raster, band integer, pixeltype text, expression text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_mapAlgebraExpr$function$
CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast1 raster, rast2 raster, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebraexpr($1, 1, $2, 1, $3, $4, $5, $6, $7, $8) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebraexpr(rast1 raster, band1 integer, rast2 raster, band2 integer, expression text, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, nodata1expr text DEFAULT NULL::text, nodata2expr text DEFAULT NULL::text, nodatanodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_mapAlgebra2$function$
]]></string>
		</function>
		<function name="st_mapalgebraexpr_001" id="Function_238ea9a9" isSystem="false" />
		<function name="st_mapalgebraexpr_002" id="Function_118fbe8" isSystem="false" />
		<function name="st_mapalgebraexpr_003" id="Function_11b90f77" isSystem="false" />
		<function name="st_mapalgebrafct" id="Function_15fa677" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_mapAlgebraFct$function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, pixeltype text, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, $2, $3, $4, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, $2, NULL, $3, VARIADIC $4) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, band integer, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, $2, NULL, $3, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, $2, $3, VARIADIC $4) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, pixeltype text, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, $2, $3, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, onerastuserfunc regprocedure, VARIADIC args text[])
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, NULL, $2, VARIADIC $3) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast raster, onerastuserfunc regprocedure)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_mapalgebrafct($1, 1, NULL, $2, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast1 raster, band1 integer, rast2 raster, band2 integer, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE c
 STABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_mapAlgebra2$function$
CREATE OR REPLACE FUNCTION public.st_mapalgebrafct(rast1 raster, rast2 raster, tworastuserfunc regprocedure, pixeltype text DEFAULT NULL::text, extenttype text DEFAULT 'INTERSECTION'::text, VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT st_mapalgebrafct($1, 1, $2, 1, $3, $4, $5, VARIADIC $6) $function$
]]></string>
		</function>
		<function name="st_mapalgebrafct_001" id="Function_27ad743c" isSystem="false" />
		<function name="st_mapalgebrafct_002" id="Function_24709c87" isSystem="false" />
		<function name="st_mapalgebrafct_003" id="Function_2ad81eaa" isSystem="false" />
		<function name="st_mapalgebrafct_004" id="Function_1d48acc5" isSystem="false" />
		<function name="st_mapalgebrafct_005" id="Function_2e28f2ef" isSystem="false" />
		<function name="st_mapalgebrafct_006" id="Function_25f13612" isSystem="false" />
		<function name="st_mapalgebrafct_007" id="Function_33cad5bf" isSystem="false" />
		<function name="st_mapalgebrafct_008" id="Function_12a156fd" isSystem="false" />
		<function name="st_mapalgebrafct_009" id="Function_272a02e5" isSystem="false" />
		<function name="st_mapalgebrafctngb" id="Function_4a1eefe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mapalgebrafctngb(rast raster, band integer, pixeltype text, ngbwidth integer, ngbheight integer, onerastngbuserfunc regprocedure, nodatamode text, VARIADIC args text[])
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_mapAlgebraFctNgb$function$
]]></string>
		</function>
		<function name="st_max4ma" id="Function_3379a4f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_max4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        max float;
    BEGIN
        _matrix := matrix;
        max := '-Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF max < _matrix[x][y] THEN
                    max := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN max;
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_max4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_value double precision[][][];
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		max := '-Infinity'::double precision;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;
		IF max = '-Infinity'::double precision THEN
			RETURN NULL;
		END IF;
		RETURN max;
	END;
	$function$
]]></string>
		</function>
		<function name="st_max4ma_001" id="Function_204c178e" isSystem="false" />
		<function name="st_maxdistance" id="Function_eb92261" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_maxdistance(geom1 geometry, geom2 geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT _ST_MaxDistance(ST_ConvexHull($1), ST_ConvexHull($2))$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional largest distance between two geometries in projected units.]]></comment>
		</function>
		<function name="st_mean4ma" id="Function_17d78ff3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mean4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        sum float;
        count float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        count := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                        count := count + 1;
                    END IF;
                ELSE
                    count := count + 1;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        IF count = 0 THEN
            RETURN NULL;
        END IF;
        RETURN sum / count;
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_mean4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_value double precision[][][];
		sum double precision;
		count int;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;
		count := 0;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					sum := sum + _value[z][y][x];
					count := count + 1;
				END LOOP;
			END LOOP;
		END LOOP;
		IF count < 1 THEN
			RETURN NULL;
		END IF;
		RETURN sum / count::double precision;
	END;
	$function$
]]></string>
		</function>
		<function name="st_mean4ma_001" id="Function_3763fea9" isSystem="false" />
		<function name="st_mem_size" id="Function_21ef6c0c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mem_size(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_mem_size$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the amount of space (in bytes) the geometry takes.]]></comment>
		</function>
		<function name="st_memcollect" id="Function_175f0f0f" isSystem="false" />
		<function name="st_memunion" id="Function_9bf71e4" isSystem="false" >
			<comment><![CDATA[args: geomfield - Same as ST_Union, only memory-friendly (uses less memory and more processor time).]]></comment>
		</function>
		<function name="st_metadata" id="Function_1dca30b2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_metadata(rast raster, OUT upperleftx double precision, OUT upperlefty double precision, OUT width integer, OUT height integer, OUT scalex double precision, OUT scaley double precision, OUT skewx double precision, OUT skewy double precision, OUT srid integer, OUT numbands integer)
 RETURNS record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_metadata$function$
]]></string>
			<comment><![CDATA[args: rast - Returns basic meta data about a raster object such as pixel size, rotation (skew), upper, lower left, etc.]]></comment>
		</function>
		<function name="st_min4ma" id="Function_2a2e2f58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_min4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        min float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        FOR x in array_lower(_matrix, 1)..array_upper(_matrix, 1) LOOP
            FOR y in array_lower(_matrix, 2)..array_upper(_matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min := _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        RETURN min;
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_min4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_value double precision[][][];
		min double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;
		IF min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;
		RETURN min;
	END;
	$function$
]]></string>
		</function>
		<function name="st_min4ma_001" id="Function_18cb7fa3" isSystem="false" />
		<function name="st_minconvexhull" id="Function_3a9f6d68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minconvexhull(rast raster, nband integer DEFAULT NULL::integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_convex_hull$function$
]]></string>
		</function>
		<function name="st_mindist4ma" id="Function_471a4a8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mindist4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_value double precision[][][];
		ndims int;
		d double precision DEFAULT NULL;
		_d double precision;
		z integer;
		x integer;
		y integer;
		cx integer;
		cy integer;
		cv double precision;
		w integer;
		h integer;
		max_dx double precision;
		max_dy double precision;
	BEGIN
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- only use the first raster passed to this function
		IF array_length(_value, 1) > 1 THEN
			RAISE NOTICE 'Only using the values from the first raster';
		END IF;
		z := array_lower(_value, 1);
		-- width and height (0-based)
		h := array_upper(_value, 2) - array_lower(_value, 2);
		w := array_upper(_value, 3) - array_lower(_value, 3);
		-- max distance from center pixel
		max_dx := w / 2;
		max_dy := h / 2;
		-- correct width and height (1-based)
		w := w + 1;
		h := h + 1;
		-- width and height should be odd numbers
		IF w % 2. != 1 THEN
			RAISE EXCEPTION 'Width of neighborhood array does not permit for a center pixel';
		END IF;
		IF h % 2. != 1 THEN
			RAISE EXCEPTION 'Height of neighborhood array does not permit for a center pixel';
		END IF;
		-- center pixel's coordinates
		cy := max_dy + array_lower(_value, 2);
		cx := max_dx + array_lower(_value, 3);
		-- center pixel value
		cv := _value[z][cy][cx];
		-- check to see if center pixel has value
		IF cv IS NOT NULL THEN
			RETURN 0.;
		END IF;
		FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
			FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
				-- skip NODATA values and center pixel
				IF _value[z][y][x] IS NULL OR (x = cx AND y = cy) THEN
					CONTINUE;
				END IF;
				-- use pythagorean theorem
				_d := sqrt(power(cx - x, 2) + power(cy - y, 2));
--				RAISE NOTICE 'distance = %', _d;
				IF d IS NULL OR _d < d THEN
					d := _d;
				END IF;
			END LOOP;
		END LOOP;
--		RAISE NOTICE 'd = %', d;
		RETURN d;
	END;
	$function$
]]></string>
		</function>
		<function name="st_minimumboundingcircle" id="Function_17a114da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minimumboundingcircle(inputgeom geometry, segs_per_quarter integer DEFAULT 48)
 RETURNS geometry
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
	hull GEOMETRY;
	ring GEOMETRY;
	center GEOMETRY;
	radius DOUBLE PRECISION;
	dist DOUBLE PRECISION;
	d DOUBLE PRECISION;
	idx1 integer;
	idx2 integer;
	l1 GEOMETRY;
	l2 GEOMETRY;
	p1 GEOMETRY;
	p2 GEOMETRY;
	a1 DOUBLE PRECISION;
	a2 DOUBLE PRECISION;

	BEGIN
	-- First compute the ConvexHull of the geometry
	hull = ST_ConvexHull(inputgeom);
	--A point really has no MBC
	IF ST_GeometryType(hull) = 'ST_Point' THEN
		RETURN hull;
	END IF;
	-- convert the hull perimeter to a linestring so we can manipulate individual points
	--If its already a linestring force it to a closed linestring
	ring = CASE WHEN ST_GeometryType(hull) = 'ST_LineString' THEN ST_AddPoint(hull, ST_StartPoint(hull)) ELSE ST_ExteriorRing(hull) END;
	dist = 0;
	-- Brute Force - check every pair
	FOR i in 1 .. (ST_NumPoints(ring)-2)
		LOOP
			FOR j in i .. (ST_NumPoints(ring)-1)
				LOOP
				d = ST_Distance(ST_PointN(ring,i),ST_PointN(ring,j));
				-- Check the distance and update if larger
				IF (d > dist) THEN
					dist = d;
					idx1 = i;
					idx2 = j;
				END IF;
			END LOOP;
		END LOOP;
	-- We now have the diameter of the convex hull.  The following line returns it if desired.
	-- RETURN ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2));
	-- Now for the Minimum Bounding Circle.  Since we know the two points furthest from each
	-- other, the MBC must go through those two points. Start with those points as a diameter of a circle.
	-- The radius is half the distance between them and the center is midway between them
	radius = ST_Distance(ST_PointN(ring,idx1),ST_PointN(ring,idx2)) / 2.0;
	center = ST_LineInterpolatePoint(ST_MakeLine(ST_PointN(ring,idx1),ST_PointN(ring,idx2)),0.5);
	-- Loop through each vertex and check if the distance from the center to the point
	-- is greater than the current radius.
	FOR k in 1 .. (ST_NumPoints(ring)-1)
		LOOP
		IF(k <> idx1 and k <> idx2) THEN
			dist = ST_Distance(center,ST_PointN(ring,k));
			IF (dist > radius) THEN
				-- We have to expand the circle.  The new circle must pass trhough
				-- three points - the two original diameters and this point.
				-- Draw a line from the first diameter to this point
				l1 = ST_Makeline(ST_PointN(ring,idx1),ST_PointN(ring,k));
				-- Compute the midpoint
				p1 = ST_LineInterpolatePoint(l1,0.5);
				-- Rotate the line 90 degrees around the midpoint (perpendicular bisector)
				l1 = ST_Rotate(l1,pi()/2,p1);
				--  Compute the azimuth of the bisector
				a1 = ST_Azimuth(ST_PointN(l1,1),ST_PointN(l1,2));
				--  Extend the line in each direction the new computed distance to insure they will intersect
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,2))+sin(a1)*dist,ST_Y(ST_PointN(l1,2))+cos(a1)*dist),-1);
				l1 = ST_AddPoint(l1,ST_Makepoint(ST_X(ST_PointN(l1,1))-sin(a1)*dist,ST_Y(ST_PointN(l1,1))-cos(a1)*dist),0);
				-- Repeat for the line from the point to the other diameter point
				l2 = ST_Makeline(ST_PointN(ring,idx2),ST_PointN(ring,k));
				p2 = ST_LineInterpolatePoint(l2,0.5);
				l2 = ST_Rotate(l2,pi()/2,p2);
				a2 = ST_Azimuth(ST_PointN(l2,1),ST_PointN(l2,2));
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,2))+sin(a2)*dist,ST_Y(ST_PointN(l2,2))+cos(a2)*dist),-1);
				l2 = ST_AddPoint(l2,ST_Makepoint(ST_X(ST_PointN(l2,1))-sin(a2)*dist,ST_Y(ST_PointN(l2,1))-cos(a2)*dist),0);
				-- The new center is the intersection of the two bisectors
				center = ST_Intersection(l1,l2);
				-- The new radius is the distance to any of the three points
				radius = ST_Distance(center,ST_PointN(ring,idx1));
			END IF;
		END IF;
		END LOOP;
	--DONE!!  Return the MBC via the buffer command
	RETURN ST_Buffer(center,radius,segs_per_quarter);
	END;
$function$
]]></string>
			<comment><![CDATA[args: geomA, num_segs_per_qt_circ=48 - Returns the smallest circle polygon that can fully contain a geometry. Default uses 48 segments per quarter circle.]]></comment>
		</function>
		<function name="st_minpossiblevalue" id="Function_3912e5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_minpossiblevalue(pixeltype text)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_minPossibleValue$function$
]]></string>
		</function>
		<function name="st_mlinefromtext" id="Function_330d211d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mlinefromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE
	WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
		</function>
		<function name="st_mlinefromtext_001" id="Function_39dd6e92" isSystem="false" >
			<comment><![CDATA[args: WKT - Return a specified ST_MultiLineString value from WKT representation.]]></comment>
		</function>
		<function name="st_mlinefromwkb" id="Function_5dc0310" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mlinefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mlinefromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_mlinefromwkb_001" id="Function_3a6832b8" isSystem="false" />
		<function name="st_mpointfromtext" id="Function_2c23e9a0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpointfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_mpointfromtext_001" id="Function_2d371fca" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_mpointfromwkb" id="Function_1c0bb1b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_mpointfromwkb_001" id="Function_3598e87b" isSystem="false" />
		<function name="st_mpolyfromtext" id="Function_2854020d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpolyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromText($1,$2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_mpolyfromtext_001" id="Function_2428a833" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a MultiPolygon Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_mpolyfromwkb" id="Function_37be94ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_mpolyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_mpolyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_mpolyfromwkb_001" id="Function_2aaf44c2" isSystem="false" />
		<function name="st_multi" id="Function_27d8104f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multi(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_force_multi$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the geometry as a MULTI* geometry. If the geometry is already a MULTI*, it is returned unchanged.]]></comment>
		</function>
		<function name="st_multilinefromwkb" id="Function_3ad140c2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multilinefromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTILINESTRING'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_multilinestringfromtext" id="Function_14794d3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multilinestringfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MLineFromText($1)$function$
CREATE OR REPLACE FUNCTION public.st_multilinestringfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MLineFromText($1, $2)$function$
]]></string>
		</function>
		<function name="st_multilinestringfromtext_001" id="Function_154ed8e8" isSystem="false" />
		<function name="st_multipointfromtext" id="Function_1943b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MPointFromText($1)$function$
]]></string>
		</function>
		<function name="st_multipointfromwkb" id="Function_b083f28" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_multipointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'MULTIPOINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_multipointfromwkb_001" id="Function_1d07ead" isSystem="false" />
		<function name="st_multipolyfromwkb" id="Function_377b884b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_multipolyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'MULTIPOLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_multipolyfromwkb_001" id="Function_282355ba" isSystem="false" />
		<function name="st_multipolygonfromtext" id="Function_32b4a294" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_multipolygonfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MPolyFromText($1)$function$
CREATE OR REPLACE FUNCTION public.st_multipolygonfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_MPolyFromText($1, $2)$function$
]]></string>
		</function>
		<function name="st_multipolygonfromtext_001" id="Function_b7cdcb1" isSystem="false" />
		<function name="st_ndims" id="Function_2e616ef0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ndims(geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_ndims$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns coordinate dimension of the geometry as a small int. Values are: 2,3 or 4.]]></comment>
		</function>
		<function name="st_nearestvalue" id="Function_7d915ab" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_nearestvalue($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, columnx integer, rowy integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_nearestvalue($1, 1, st_setsrid(st_makepoint(st_rastertoworldcoordx($1, $2, $3), st_rastertoworldcoordy($1, $2, $3)), st_srid($1)), $4) $function$
CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, band integer, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_nearestValue$function$
CREATE OR REPLACE FUNCTION public.st_nearestvalue(rast raster, band integer, columnx integer, rowy integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_nearestvalue($1, $2, st_setsrid(st_makepoint(st_rastertoworldcoordx($1, $3, $4), st_rastertoworldcoordy($1, $3, $4)), st_srid($1)), $5) $function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_nearestvalue_001" id="Function_16727358" isSystem="false" >
			<comment><![CDATA[args: rast, pt, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_nearestvalue_002" id="Function_afef70b" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_nearestvalue_003" id="Function_15977946" isSystem="false" >
			<comment><![CDATA[args: rast, columnx, rowy, exclude_nodata_value=true - Returns the nearest non-NODATA value of a given bands pixel specified by a columnx and rowy or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_neighborhood" id="Function_2250ad7f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_neighborhood($1, 1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_neighborhood($1, 1, $2, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, band integer, pt geometry, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		wx double precision;
		wy double precision;
		rtn double precision[][];
	BEGIN
		IF (st_geometrytype($3) != 'ST_Point') THEN
			RAISE EXCEPTION 'Attempting to get the neighbor of a pixel with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		wx := st_x($3);
		wy := st_y($3);
		SELECT _st_neighborhood(
			$1, $2,
			st_worldtorastercoordx(rast, wx, wy),
			st_worldtorastercoordy(rast, wx, wy),
			$4, $5,
			$6
		) INTO rtn;
		RETURN rtn;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_neighborhood(rast raster, band integer, columnx integer, rowy integer, distancex integer, distancey integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision[]
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_neighborhood($1, $2, $3, $4, $5, $6, $7) $function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_neighborhood_001" id="Function_ef7bdb6" isSystem="false" >
			<comment><![CDATA[args: rast, columnX, rowY, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_neighborhood_002" id="Function_171c0a4" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_neighborhood_003" id="Function_1f7aee2e" isSystem="false" >
			<comment><![CDATA[args: rast, pt, distanceX, distanceY, exclude_nodata_value=true - Returns a 2-D double precision array of the non-NODATA values around a given bands pixel specified by either a columnX and rowY or a geometric point expressed in the same spatial reference coordinate system as the raster.]]></comment>
		</function>
		<function name="st_node" id="Function_273d7613" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_node(g geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_Node$function$
]]></string>
			<comment><![CDATA[args: geom - Node a set of linestrings.]]></comment>
		</function>
		<function name="st_notsamealignmentreason" id="Function_2674ba21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_notsamealignmentreason(rast1 raster, rast2 raster)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_notSameAlignmentReason$function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Returns text stating if rasters are aligned and if not aligned, a reason why.]]></comment>
		</function>
		<function name="st_npoints" id="Function_7ed65e9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_npoints(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_npoints$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of points (vertexes) in a geometry.]]></comment>
		</function>
		<function name="st_nrings" id="Function_221983fe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_nrings(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_nrings$function$
]]></string>
			<comment><![CDATA[args: geomA - If the geometry is a polygon or multi-polygon returns the number of rings.]]></comment>
		</function>
		<function name="st_numbands" id="Function_20a5896b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numbands(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getNumBands$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the number of bands in the raster object.]]></comment>
		</function>
		<function name="st_numgeometries" id="Function_1849b69f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numgeometries(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_numgeometries_collection$function$
]]></string>
			<comment><![CDATA[args: geom - If geometry is a GEOMETRYCOLLECTION (or MULTI*) return the number of geometries, for single geometries will return 1, otherwise return NULL.]]></comment>
		</function>
		<function name="st_numinteriorring" id="Function_4e69643" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numinteriorring(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_numinteriorrings_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Return the number of interior rings of the first polygon in the geometry. Synonym to ST_NumInteriorRings.]]></comment>
		</function>
		<function name="st_numinteriorrings" id="Function_2b378315" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numinteriorrings(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_numinteriorrings_polygon$function$
]]></string>
			<comment><![CDATA[args: a_polygon - Return the number of interior rings of the a polygon in the geometry. This will work with POLYGON and return NULL for a MULTIPOLYGON type or any other type]]></comment>
		</function>
		<function name="st_numpatches" id="Function_39004853" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numpatches(geometry)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_NumGeometries($1)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of faces on a Polyhedral Surface. Will return null for non-polyhedral geometries.]]></comment>
		</function>
		<function name="st_numpoints" id="Function_138e8188" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_numpoints(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_numpoints_linestring$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the number of points in an ST_LineString or ST_CircularString value.]]></comment>
		</function>
		<function name="st_offsetcurve" id="Function_36ddcbf9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_offsetcurve(line geometry, distance double precision, params text DEFAULT ''::text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_OffsetCurve$function$
]]></string>
			<comment><![CDATA[args: line, signed_distance, style_parameters=' - Return an offset line at a given distance and side from an input line. Useful for computing parallel lines about a center line]]></comment>
		</function>
		<function name="st_orderingequals" id="Function_6997b03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_orderingequals(geometrya geometry, geometryb geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ 
	SELECT $1 ~= $2 AND _ST_OrderingEquals($1, $2)
	$function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the given geometries represent the same geometry and points are in the same directional order.]]></comment>
		</function>
		<function name="st_overlaps" id="Function_3722ad9d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_overlaps(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Overlaps($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_overlaps(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_overlaps($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_overlaps(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_overlaps(st_convexhull($1), st_convexhull($3)) ELSE _st_overlaps($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: A, B - Returns TRUE if the Geometries share space, are of the same dimension, but are not completely contained by each other.]]></comment>
		</function>
		<function name="st_overlaps_001" id="Function_1038f3" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB intersect but one does not completely contain the other.]]></comment>
		</function>
		<function name="st_overlaps_002" id="Function_1bf9612b" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB intersect but one does not completely contain the other.]]></comment>
		</function>
		<function name="st_patchn" id="Function_3a0a9b6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_patchn(geometry, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN ST_GeometryType($1) = 'ST_PolyhedralSurface'
	THEN ST_GeometryN($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: geomA, n - Return the 1-based Nth geometry (face) if the geometry is a POLYHEDRALSURFACE, POLYHEDRALSURFACEM. Otherwise, return NULL.]]></comment>
		</function>
		<function name="st_perimeter" id="Function_33680914" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_perimeter(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_perimeter2d_poly$function$
CREATE OR REPLACE FUNCTION public.st_perimeter(geog geography, use_spheroid boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_perimeter$function$
]]></string>
			<comment><![CDATA[args: g1 - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
		</function>
		<function name="st_perimeter2d" id="Function_317ed5ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_perimeter2d(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_perimeter2d_poly$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the 2-dimensional perimeter of the geometry, if it is a polygon or multi-polygon. This is currently an alias for ST_Perimeter.]]></comment>
		</function>
		<function name="st_perimeter_001" id="Function_33ad596c" isSystem="false" >
			<comment><![CDATA[args: geog, use_spheroid=true - Return the length measurement of the boundary of an ST_Surface or ST_MultiSurface geometry or geography. (Polygon, Multipolygon). geometry measurement is in units of spatial reference and geography is in meters.]]></comment>
		</function>
		<function name="st_pixelascentroid" id="Function_3b0d379d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelascentroid(rast raster, x integer, y integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Centroid(geom) FROM _st_pixelaspolygons($1, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy - Returns the centroid (point geometry) of the area represented by a pixel.]]></comment>
		</function>
		<function name="st_pixelascentroids" id="Function_22bcb278" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelascentroids(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_Centroid(geom), val, x, y FROM _st_pixelaspolygons($1, $2, NULL, NULL, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the centroid (point geometry) for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The point geometry is the centroid of the area represented by a pixel.]]></comment>
		</function>
		<function name="st_pixelaspoint" id="Function_2f58a27" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspoint(rast raster, x integer, y integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_PointN(ST_ExteriorRing(geom), 1) FROM _st_pixelaspolygons($1, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy - Returns a point geometry of the pixels upper-left corner.]]></comment>
		</function>
		<function name="st_pixelaspoints" id="Function_dc75957" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspoints(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT ST_PointN(ST_ExteriorRing(geom), 1), val, x, y FROM _st_pixelaspolygons($1, $2, NULL, NULL, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns a point geometry for each pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel. The coordinates of the point geometry are of the pixels upper-left corner.]]></comment>
		</function>
		<function name="st_pixelaspolygon" id="Function_2e19513e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspolygon(rast raster, x integer, y integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT geom FROM _st_pixelaspolygons($1, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, columnx, rowy - Returns the polygon geometry that bounds the pixel for a particular row and column.]]></comment>
		</function>
		<function name="st_pixelaspolygons" id="Function_333b1a01" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelaspolygons(rast raster, band integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT geom geometry, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT geom, val, x, y FROM _st_pixelaspolygons($1, $2, NULL, NULL, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, band=1, exclude_nodata_value=TRUE - Returns the polygon geometry that bounds every pixel of a raster band along with the value, the X and the Y raster coordinates of each pixel.]]></comment>
		</function>
		<function name="st_pixelheight" id="Function_189ee0a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelheight(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getPixelHeight$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the pixel height in geometric units of the spatial reference system.]]></comment>
		</function>
		<function name="st_pixelofvalue" id="Function_ee7d3cd" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, search double precision, exclude_nodata_value boolean DEFAULT true, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT x, y FROM st_pixelofvalue($1, 1, ARRAY[$2], $3) $function$
CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, search double precision[], exclude_nodata_value boolean DEFAULT true, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT val, x, y FROM st_pixelofvalue($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, nband integer, search double precision, exclude_nodata_value boolean DEFAULT true, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT x, y FROM st_pixelofvalue($1, $2, ARRAY[$3], $4) $function$
CREATE OR REPLACE FUNCTION public.st_pixelofvalue(rast raster, nband integer, search double precision[], exclude_nodata_value boolean DEFAULT true, OUT val double precision, OUT x integer, OUT y integer)
 RETURNS SETOF record
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_pixelOfValue$function$
]]></string>
			<comment><![CDATA[args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
		</function>
		<function name="st_pixelofvalue_001" id="Function_f2ad5c1" isSystem="false" >
			<comment><![CDATA[args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
		</function>
		<function name="st_pixelofvalue_002" id="Function_12fc41b2" isSystem="false" >
			<comment><![CDATA[args: rast, nband, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
		</function>
		<function name="st_pixelofvalue_003" id="Function_33583821" isSystem="false" >
			<comment><![CDATA[args: rast, search, exclude_nodata_value=true - Get the columnx, rowy coordinates of the pixel whose value equals the search value.]]></comment>
		</function>
		<function name="st_pixelwidth" id="Function_1864863b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pixelwidth(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getPixelWidth$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the pixel width in geometric units of the spatial reference system.]]></comment>
		</function>
		<function name="st_point" id="Function_1e0e4406" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_point(double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_makepoint$function$
]]></string>
			<comment><![CDATA[args: x_lon, y_lat - Returns an ST_Point with the given coordinate values. OGC alias for ST_MakePoint.]]></comment>
		</function>
		<function name="st_point_inside_circle" id="Function_13b6bd11" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_point_inside_circle(geometry, double precision, double precision, double precision)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_inside_circle_point$function$
]]></string>
			<comment><![CDATA[args: a_point, center_x, center_y, radius - Is the point geometry insert circle defined by center_x, center_y, radius]]></comment>
		</function>
		<function name="st_pointfromgeohash" id="Function_10a19cc8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromgeohash(text, integer DEFAULT NULL::integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE
AS '$libdir/postgis-2.1', $function$point_from_geohash$function$
]]></string>
			<comment><![CDATA[args: geohash, precision=full_precision_of_geohash - Return a point from a GeoHash string.]]></comment>
		</function>
		<function name="st_pointfromtext" id="Function_5f78774" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POINT'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_pointfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POINT'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
			<comment><![CDATA[args: WKT - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
		</function>
		<function name="st_pointfromtext_001" id="Function_27f7d054" isSystem="false" >
			<comment><![CDATA[args: WKT, srid - Makes a point Geometry from WKT with the given SRID. If SRID is not given, it defaults to unknown.]]></comment>
		</function>
		<function name="st_pointfromwkb" id="Function_379567a9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POINT'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_pointfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POINT'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_pointfromwkb_001" id="Function_27ad026f" isSystem="false" />
		<function name="st_pointn" id="Function_30a42ae3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointn(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_pointn_linestring$function$
]]></string>
			<comment><![CDATA[args: a_linestring, n - Return the Nth point in the first linestring or circular linestring in the geometry. Return NULL if there is no linestring in the geometry.]]></comment>
		</function>
		<function name="st_pointonsurface" id="Function_93d17d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_pointonsurface(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$pointonsurface$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns a POINT guaranteed to lie on the surface.]]></comment>
		</function>
		<function name="st_polyfromtext" id="Function_29d3db6d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1)) = 'POLYGON'
	THEN ST_GeomFromText($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_polyfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromText($1, $2)) = 'POLYGON'
	THEN ST_GeomFromText($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_polyfromtext_001" id="Function_393f7333" isSystem="false" />
		<function name="st_polyfromwkb" id="Function_2a198a5f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polyfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_polyfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1, $2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_polyfromwkb_001" id="Function_3254917c" isSystem="false" />
		<function name="st_polygon" id="Function_387dd81d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygon(geometry, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ 
	SELECT ST_SetSRID(ST_MakePolygon($1), $2)
	$function$
CREATE OR REPLACE FUNCTION public.st_polygon(rast raster, band integer DEFAULT 1)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getPolygon$function$
]]></string>
			<comment><![CDATA[args: aLineString, srid - Returns a polygon built from the specified linestring and SRID.]]></comment>
		</function>
		<function name="st_polygon_001" id="Function_2dc4595a" isSystem="false" />
		<function name="st_polygonfromtext" id="Function_1ff981d6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromtext(text)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_PolyFromText($1)$function$
CREATE OR REPLACE FUNCTION public.st_polygonfromtext(text, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_PolyFromText($1, $2)$function$
]]></string>
			<comment><![CDATA[args: WKT, srid - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_polygonfromtext_001" id="Function_bf33d16" isSystem="false" >
			<comment><![CDATA[args: WKT - Makes a Geometry from WKT with the given SRID. If SRID is not give, it defaults to 0.]]></comment>
		</function>
		<function name="st_polygonfromwkb" id="Function_1ff29c11" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonfromwkb(bytea)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1)) = 'POLYGON'
	THEN ST_GeomFromWKB($1)
	ELSE NULL END
	$function$
CREATE OR REPLACE FUNCTION public.st_polygonfromwkb(bytea, integer)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
	SELECT CASE WHEN geometrytype(ST_GeomFromWKB($1,$2)) = 'POLYGON'
	THEN ST_GeomFromWKB($1, $2)
	ELSE NULL END
	$function$
]]></string>
		</function>
		<function name="st_polygonfromwkb_001" id="Function_29acc8e8" isSystem="false" />
		<function name="st_polygonize" id="Function_e867c41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_polygonize(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$polygonize_garray$function$
]]></string>
			<comment><![CDATA[args: geom_array - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
		</function>
		<function name="st_polygonize_001" id="Function_1093eb4f" isSystem="false" >
			<comment><![CDATA[args: geomfield - Aggregate. Creates a GeometryCollection containing possible polygons formed from the constituent linework of a set of geometries.]]></comment>
		</function>
		<function name="st_project" id="Function_98b836b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_project(geog geography, distance double precision, azimuth double precision)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE COST 100
AS '$libdir/postgis-2.1', $function$geography_project$function$
]]></string>
			<comment><![CDATA[args: g1, distance, azimuth - Returns a POINT projected from a start point using a distance in meters and bearing (azimuth) in radians.]]></comment>
		</function>
		<function name="st_quantile" id="Function_137e2855" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_quantile($1, $2, $3, 1, $4) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, TRUE, 1, $3) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_quantile($1, 1, TRUE, 1, $2) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, exclude_nodata_value boolean, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, 1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, nband integer, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, TRUE, 1, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT (_st_quantile($1, 1, $2, 1, ARRAY[$3]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rast raster, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_quantile($1, 1, TRUE, 1, ARRAY[$2]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, quantiles double precision[] DEFAULT NULL::double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_quantile($1, $2, $3, $4, 1, $5) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, $3, TRUE, 1, $4) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, quantiles double precision[], OUT quantile double precision, OUT value double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_quantile($1, $2, 1, TRUE, 1, $3) $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, $4, 1, ARRAY[$5]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, nband integer, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, $3, TRUE, 1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, exclude_nodata_value boolean, quantile double precision DEFAULT NULL::double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE
AS $function$ SELECT (_st_quantile($1, $2, 1, $3, 1, ARRAY[$4]::double precision[])).value $function$
CREATE OR REPLACE FUNCTION public.st_quantile(rastertable text, rastercolumn text, quantile double precision)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_quantile($1, $2, 1, TRUE, 1, ARRAY[$3]::double precision[])).value $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_001" id="Function_185d8211" isSystem="false" >
			<comment><![CDATA[args: rast, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_002" id="Function_11494040" isSystem="false" >
			<comment><![CDATA[args: rast, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_003" id="Function_35aaf8b8" isSystem="false" >
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_004" id="Function_305ce988" isSystem="false" >
			<comment><![CDATA[args: rast, nband, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_005" id="Function_7d022f2" isSystem="false" >
			<comment><![CDATA[args: rast, exclude_nodata_value, quantile=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_006" id="Function_9d338ff" isSystem="false" >
			<comment><![CDATA[args: rast, quantile - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_007" id="Function_1b79b560" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, quantiles=NULL - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_008" id="Function_621b8f0" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, quantiles - Compute quantiles for a raster or raster table coverage in the context of the sample or population. Thus, a value could be examined to be at the rasters 25%, 50%, 75% percentile.]]></comment>
		</function>
		<function name="st_quantile_009" id="Function_3b072702" isSystem="false" />
		<function name="st_quantile_010" id="Function_271faa35" isSystem="false" />
		<function name="st_quantile_011" id="Function_21d26bc5" isSystem="false" />
		<function name="st_quantile_012" id="Function_f15a985" isSystem="false" />
		<function name="st_quantile_013" id="Function_53a165" isSystem="false" />
		<function name="st_range4ma" id="Function_38c66453" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_range4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        min float;
        max float;
    BEGIN
        _matrix := matrix;
        min := 'Infinity'::float;
        max := '-Infinity'::float;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF NOT nodatamode = 'ignore' THEN
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                IF min > _matrix[x][y] THEN
                    min = _matrix[x][y];
                END IF;
                IF max < _matrix[x][y] THEN
                    max = _matrix[x][y];
                END IF;
            END LOOP;
        END LOOP;
        IF max = '-Infinity'::float OR min = 'Infinity'::float THEN
            RETURN NULL;
        END IF;
        RETURN max - min;
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_range4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_value double precision[][][];
		min double precision;
		max double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		min := 'Infinity'::double precision;
		max := '-Infinity'::double precision;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					IF _value[z][y][x] < min THEN
						min := _value[z][y][x];
					END IF;
					IF _value[z][y][x] > max THEN
						max := _value[z][y][x];
					END IF;
				END LOOP;
			END LOOP;
		END LOOP;
		IF max = '-Infinity'::double precision OR min = 'Infinity'::double precision THEN
			RETURN NULL;
		END IF;
		RETURN max - min;
	END;
	$function$
]]></string>
		</function>
		<function name="st_range4ma_001" id="Function_251f9b8b" isSystem="false" />
		<function name="st_rastertoworldcoord" id="Function_2de75aeb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoord(rast raster, columnx integer, rowy integer, OUT longitude double precision, OUT latitude double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT longitude, latitude FROM _st_rastertoworldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the rasters upper left corner as geometric X and Y (longitude and latitude) given a column and row. Column and row starts at 1.]]></comment>
		</function>
		<function name="st_rastertoworldcoordx" id="Function_2d5115d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordx(rast raster, xr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT longitude FROM _st_rastertoworldcoord($1, $2, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordx(rast raster, xr integer, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT longitude FROM _st_rastertoworldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_rastertoworldcoordx_001" id="Function_18328032" isSystem="false" >
			<comment><![CDATA[args: rast, xcolumn - Returns the geometric X coordinate upper left of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_rastertoworldcoordy" id="Function_33dd131e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordy(rast raster, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT latitude FROM _st_rastertoworldcoord($1, NULL, $2) $function$
CREATE OR REPLACE FUNCTION public.st_rastertoworldcoordy(rast raster, xr integer, yr integer)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT latitude FROM _st_rastertoworldcoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xcolumn, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_rastertoworldcoordy_001" id="Function_8ace890" isSystem="false" >
			<comment><![CDATA[args: rast, yrow - Returns the geometric Y coordinate upper left corner of a raster, column and row. Numbering of columns and rows starts at 1.]]></comment>
		</function>
		<function name="st_reclass" id="Function_93c3b63" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, VARIADIC reclassargset reclassarg[])
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		i int;
		expr text;
	BEGIN
		-- for each reclassarg, validate elements as all except nodataval cannot be NULL
		FOR i IN SELECT * FROM generate_subscripts($2, 1) LOOP
			IF $2[i].nband IS NULL OR $2[i].reclassexpr IS NULL OR $2[i].pixeltype IS NULL THEN
				RAISE WARNING 'Values are required for the nband, reclassexpr and pixeltype attributes.';
				RETURN rast;
			END IF;
		END LOOP;
		RETURN _st_reclass($1, VARIADIC $2);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, reclassexpr text, pixeltype text)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_reclass($1, ROW(1, $2, $3, NULL)) $function$
CREATE OR REPLACE FUNCTION public.st_reclass(rast raster, nband integer, reclassexpr text, pixeltype text, nodataval double precision DEFAULT NULL::double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_reclass($1, ROW($2, $3, $4, $5)) $function$
]]></string>
		</function>
		<function name="st_reclass_001" id="Function_396219db" isSystem="false" />
		<function name="st_reclass_002" id="Function_3b06c082" isSystem="false" />
		<function name="st_relate" id="Function_26a52ffc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$relate_full$function$
CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry, integer)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$relate_full$function$
CREATE OR REPLACE FUNCTION public.st_relate(geom1 geometry, geom2 geometry, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$relate_pattern$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
		</function>
		<function name="st_relate_001" id="Function_21a8f62e" isSystem="false" >
			<comment><![CDATA[args: geomA, geomB, BoundaryNodeRule - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
		</function>
		<function name="st_relate_002" id="Function_5f16581" isSystem="false" >
			<comment><![CDATA[args: geomA, geomB, intersectionMatrixPattern - Returns true if this Geometry is spatially related to anotherGeometry, by testing for intersections between the Interior, Boundary and Exterior of the two geometries as specified by the values in the intersectionMatrixPattern. If no intersectionMatrixPattern is passed in, then returns the maximum intersectionMatrixPattern that relates the 2 geometries.]]></comment>
		</function>
		<function name="st_relatematch" id="Function_1077c8a4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_relatematch(text, text)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_RelateMatch$function$
]]></string>
			<comment><![CDATA[args: intersectionMatrix, intersectionMatrixPattern - Returns true if intersectionMattrixPattern1 implies intersectionMatrixPattern2]]></comment>
		</function>
		<function name="st_removepoint" id="Function_dec8417" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_removepoint(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_removepoint$function$
]]></string>
			<comment><![CDATA[args: linestring, offset - Removes point from a linestring. Offset is 0-based.]]></comment>
		</function>
		<function name="st_removerepeatedpoints" id="Function_201eecaf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_removerepeatedpoints(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_RemoveRepeatedPoints$function$
]]></string>
			<comment><![CDATA[args: geom - Returns a version of the given geometry with duplicated points removed.]]></comment>
		</function>
		<function name="st_resample" id="Function_23b52b65" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resample(rast raster, ref raster, usescale boolean, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT st_resample($1, $2, $4, $5, $3) $function$
CREATE OR REPLACE FUNCTION public.st_resample(rast raster, ref raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, usescale boolean DEFAULT true)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		rastsrid int;
		_srid int;
		_dimx int;
		_dimy int;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, width, height, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _dimx, _dimy, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);
		rastsrid := ST_SRID($1);
		-- both rasters must have the same SRID
		IF (rastsrid != _srid) THEN
			RAISE EXCEPTION 'The raster to be resampled has a different SRID from the reference raster';
			RETURN NULL;
		END IF;
		IF usescale IS TRUE THEN
			_dimx := NULL;
			_dimy := NULL;
		ELSE
			_scalex := NULL;
			_scaley := NULL;
		END IF;
		RETURN _st_gdalwarp($1, $3, $4, NULL, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, _dimx, _dimy);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_resample(rast raster, width integer, height integer, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_gdalwarp($1, $8,	$9, NULL, NULL, NULL, $4, $5, $6, $7, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_resample(rast raster, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0, gridx double precision DEFAULT NULL::double precision, gridy double precision DEFAULT NULL::double precision, skewx double precision DEFAULT 0, skewy double precision DEFAULT 0, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE
AS $function$ SELECT _st_gdalwarp($1, $8,	$9, NULL, $2, $3, $4, $5, $6, $7) $function$
]]></string>
			<comment><![CDATA[args: rast, scalex=0, scaley=0, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbor, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
		</function>
		<function name="st_resample_001" id="Function_fe7e9fe" isSystem="false" >
			<comment><![CDATA[args: rast, width, height, gridx=NULL, gridy=NULL, skewx=0, skewy=0, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
		</function>
		<function name="st_resample_002" id="Function_3847871d" isSystem="false" >
			<comment><![CDATA[args: rast, ref, algorithm=NearestNeighbour, maxerr=0.125, usescale=true - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
		</function>
		<function name="st_resample_003" id="Function_2133c12c" isSystem="false" >
			<comment><![CDATA[args: rast, ref, usescale, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster using a specified resampling algorithm, new dimensions, an arbitrary grid corner and a set of raster georeferencing attributes defined or borrowed from another raster.]]></comment>
		</function>
		<function name="st_rescale" id="Function_1104755d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rescale(rast raster, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $3, $4, NULL, $2, $2) $function$
CREATE OR REPLACE FUNCTION public.st_rescale(rast raster, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $4, $5, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_rescale_001" id="Function_3b8484c6" isSystem="false" >
			<comment><![CDATA[args: rast, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its scale (or pixel size). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_resize" id="Function_1dbe7353" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_resize(rast raster, width integer, height integer, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $4, $5, NULL, NULL, NULL, NULL, NULL, NULL, NULL, abs($2), abs($3)) $function$
CREATE OR REPLACE FUNCTION public.st_resize(rast raster, width text, height text, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		i integer;
		wh text[2];
		whi integer[2];
		whd double precision[2];
		_width integer;
		_height integer;
	BEGIN
		wh[1] := trim(both from $2);
		wh[2] := trim(both from $3);
		-- see if width and height are percentages
		FOR i IN 1..2 LOOP
			IF position('%' in wh[i]) > 0 THEN
				BEGIN
					wh[i] := (regexp_matches(wh[i], E'^(\\d*.?\\d*)%{1}$'))[1];
					IF length(wh[i]) < 1 THEN
						RAISE invalid_parameter_value;
					END IF;
					whd[i] := wh[i]::double precision * 0.01;
				EXCEPTION WHEN OTHERS THEN
					RAISE EXCEPTION 'Invalid percentage value provided for width/height';
					RETURN NULL;
				END;
			ELSE
				BEGIN
					whi[i] := abs(wh[i]::integer);
				EXCEPTION WHEN OTHERS THEN
					RAISE EXCEPTION 'Non-integer value provided for width/height';
					RETURN NULL;
				END;
			END IF;
		END LOOP;
		IF whd[1] IS NOT NULL OR whd[2] IS NOT NULL THEN
			SELECT foo.width, foo.height INTO _width, _height FROM ST_Metadata($1) AS foo;
			IF whd[1] IS NOT NULL THEN
				whi[1] := round(_width::double precision * whd[1])::integer;
			END IF;
			IF whd[2] IS NOT NULL THEN
				whi[2] := round(_height::double precision * whd[2])::integer;
			END IF;
		END IF;
		-- should NEVER be here
		IF whi[1] IS NULL OR whi[2] IS NULL THEN
			RAISE EXCEPTION 'Unable to determine appropriate width or height';
			RETURN NULL;
		END IF;
		FOR i IN 1..2 LOOP
			IF whi[i] < 1 THEN
				whi[i] = 1;
			END IF;
		END LOOP;
		RETURN _st_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			whi[1], whi[2]
		);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_resize(rast raster, percentwidth double precision, percentheight double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		_width integer;
		_height integer;
	BEGIN
		-- range check
		IF $2 <= 0. OR $2 > 1. OR $3 <= 0. OR $3 > 1. THEN
			RAISE EXCEPTION 'Percentages must be a value greater than zero and less than or equal to one, e.g. 0.5 for 50%%';
		END IF;
		SELECT width, height INTO _width, _height FROM ST_Metadata($1);
		_width := round(_width::double precision * $2)::integer;
		_height:= round(_height::double precision * $3)::integer;
		IF _width < 1 THEN
			_width := 1;
		END IF;
		IF _height < 1 THEN
			_height := 1;
		END IF;
		RETURN _st_gdalwarp(
			$1,
			$4, $5,
			NULL,
			NULL, NULL,
			NULL, NULL,
			NULL, NULL,
			_width, _height
		);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
		</function>
		<function name="st_resize_001" id="Function_2e2fa096" isSystem="false" >
			<comment><![CDATA[args: rast, width, height, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
		</function>
		<function name="st_resize_002" id="Function_377c307e" isSystem="false" >
			<comment><![CDATA[args: rast, percentwidth, percentheight, algorithm=NearestNeighbor, maxerr=0.125 - Resize a raster to a new width/height]]></comment>
		</function>
		<function name="st_reskew" id="Function_320a4b4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reskew(rast raster, skewxy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $3, $4, NULL, 0, 0, NULL, NULL, $2, $2) $function$
CREATE OR REPLACE FUNCTION public.st_reskew(rast raster, skewx double precision, skewy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $4, $5, NULL, 0, 0, NULL, NULL, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, skewx, skewy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_reskew_001" id="Function_32eb6531" isSystem="false" >
			<comment><![CDATA[args: rast, skewxy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by adjusting only its skew (or rotation parameters). New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_reverse" id="Function_83be881" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_reverse(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_reverse$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the geometry with vertex order reversed.]]></comment>
		</function>
		<function name="st_rotate" id="Function_3528ddc1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2), cos($2), 0,  0, 0, 1,  0, 0, 0)$function$
CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision, geometry)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1, ST_X($3) - cos($2) * ST_X($3) + sin($2) * ST_Y($3), ST_Y($3) - sin($2) * ST_X($3) - cos($2) * ST_Y($3), 0)$function$
CREATE OR REPLACE FUNCTION public.st_rotate(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), -sin($2), 0,  sin($2),  cos($2), 0, 0, 0, 1,	$3 - cos($2) * $3 + sin($2) * $4, $4 - sin($2) * $3 - cos($2) * $4, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
		</function>
		<function name="st_rotate_001" id="Function_c4da13e" isSystem="false" >
			<comment><![CDATA[args: geomA, rotRadians, x0, y0 - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
		</function>
		<function name="st_rotate_002" id="Function_17f6e581" isSystem="false" >
			<comment><![CDATA[args: geomA, rotRadians, pointOrigin - Rotate a geometry rotRadians counter-clockwise about an origin.]]></comment>
		</function>
		<function name="st_rotatex" id="Function_2af19ad9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatex(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1, 1, 0, 0, 0, cos($2), -sin($2), 0, sin($2), cos($2), 0, 0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the X axis.]]></comment>
		</function>
		<function name="st_rotatey" id="Function_28f2fdad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatey(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  cos($2), 0, sin($2),  0, 1, 0,  -sin($2), 0, cos($2), 0,  0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Y axis.]]></comment>
		</function>
		<function name="st_rotatez" id="Function_13d2ed82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotatez(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Rotate($1, $2)$function$
]]></string>
			<comment><![CDATA[args: geomA, rotRadians - Rotate a geometry rotRadians about the Z axis.]]></comment>
		</function>
		<function name="st_rotation" id="Function_78226ae" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_rotation(raster)
 RETURNS double precision
 LANGUAGE sql
AS $function$ SELECT (ST_Geotransform($1)).theta_i $function$
]]></string>
			<comment><![CDATA[args: rast - Returns the rotation of the raster in radian.]]></comment>
		</function>
		<function name="st_roughness" id="Function_26be3f3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_roughness(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_roughness4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$function$
]]></string>
		</function>
		<function name="st_samealignment" id="Function_26563c26" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_samealignment(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_sameAlignment$function$
CREATE OR REPLACE FUNCTION public.st_samealignment(ulx1 double precision, uly1 double precision, scalex1 double precision, scaley1 double precision, skewx1 double precision, skewy1 double precision, ulx2 double precision, uly2 double precision, scalex2 double precision, scaley2 double precision, skewx2 double precision, skewy2 double precision)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_samealignment(st_makeemptyraster(1, 1, $1, $2, $3, $4, $5, $6), st_makeemptyraster(1, 1, $7, $8, $9, $10, $11, $12)) $function$
]]></string>
			<comment><![CDATA[args: rastA, rastB - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
		</function>
		<function name="st_samealignment_001" id="Function_27282d4f" isSystem="false" >
			<comment><![CDATA[args: ulx1, uly1, scalex1, scaley1, skewx1, skewy1, ulx2, uly2, scalex2, scaley2, skewx2, skewy2 - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
		</function>
		<function name="st_samealignment_002" id="Function_1c3a67e3" isSystem="false" >
			<comment><![CDATA[args: rastfield - Returns true if rasters have same skew, scale, spatial ref, and offset (pixels can be put on same grid without cutting into pixels) and false if they dont with notice detailing issue.]]></comment>
		</function>
		<function name="st_scale" id="Function_1f9087ea" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scale(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Scale($1, $2, $3, 1)$function$
CREATE OR REPLACE FUNCTION public.st_scale(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  $2, 0, 0,  0, $3, 0,  0, 0, $4,  0, 0, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, XFactor, YFactor, ZFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).]]></comment>
		</function>
		<function name="st_scale_001" id="Function_3854317e" isSystem="false" >
			<comment><![CDATA[args: geomA, XFactor, YFactor - Scales the geometry to a new size by multiplying the ordinates with the parameters. Ie: ST_Scale(geom, Xfactor, Yfactor, Zfactor).]]></comment>
		</function>
		<function name="st_scalex" id="Function_13c4b06c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scalex(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getXScale$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the X component of the pixel width in units of coordinate reference system.]]></comment>
		</function>
		<function name="st_scaley" id="Function_3713562d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_scaley(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getYScale$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the Y component of the pixel height in units of coordinate reference system.]]></comment>
		</function>
		<function name="st_segmentize" id="Function_31455b31" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_segmentize(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_segmentize2d$function$
CREATE OR REPLACE FUNCTION public.st_segmentize(geog geography, max_segment_length double precision)
 RETURNS geography
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$geography_segmentize$function$
]]></string>
			<comment><![CDATA[args: geom, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance. Distance computation is performed in 2d only. For geometry, length units are in units of spatial reference. For geography, units are in meters.]]></comment>
		</function>
		<function name="st_segmentize_001" id="Function_360a60d5" isSystem="false" >
			<comment><![CDATA[args: geog, max_segment_length - Return a modified geometry/geography having no segment longer than the given distance. Distance computation is performed in 2d only. For geometry, length units are in units of spatial reference. For geography, units are in meters.]]></comment>
		</function>
		<function name="st_setbandisnodata" id="Function_304b0be4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setbandisnodata(rast raster, band integer DEFAULT 1)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setBandIsNoData$function$
]]></string>
			<comment><![CDATA[args: rast, band=1 - Sets the isnodata flag of the band to TRUE.]]></comment>
		</function>
		<function name="st_setbandnodatavalue" id="Function_dbe199b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setbandnodatavalue(rast raster, nodatavalue double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_setbandnodatavalue($1, 1, $2, FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_setbandnodatavalue(rast raster, band integer, nodatavalue double precision, forcechecking boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_setBandNoDataValue$function$
]]></string>
			<comment><![CDATA[args: rast, band, nodatavalue, forcechecking=false - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
		</function>
		<function name="st_setbandnodatavalue_001" id="Function_12912927" isSystem="false" >
			<comment><![CDATA[args: rast, nodatavalue - Sets the value for the given band that represents no data. Band 1 is assumed if no band is specified. To mark a band as having no nodata value, set the nodata value = NULL.]]></comment>
		</function>
		<function name="st_setgeoreference" id="Function_30a77a6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setgeoreference(rast raster, georef text, format text DEFAULT 'GDAL'::text)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
    DECLARE
        params text[];
        rastout raster;
    BEGIN
        IF rast IS NULL THEN
            RAISE WARNING 'Cannot set georeferencing on a null raster in st_setgeoreference.';
            RETURN rastout;
        END IF;
        SELECT regexp_matches(georef,
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s' ||
            E'(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)\\s(-?\\d+(?:\\.\\d+)?)') INTO params;
        IF NOT FOUND THEN
            RAISE EXCEPTION 'st_setgeoreference requires a string with 6 floating point values.';
        END IF;
        IF format = 'ESRI' THEN
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew(rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout,
                                   params[5]::float8 - (params[1]::float8 * 0.5),
                                   params[6]::float8 - (params[4]::float8 * 0.5));
        ELSE
            IF format != 'GDAL' THEN
                RAISE WARNING 'Format ''%'' is not recognized, defaulting to GDAL format.', format;
            END IF;
            -- params array is now:
            -- {scalex, skewy, skewx, scaley, upperleftx, upperlefty}
            rastout := st_setscale(rast, params[1]::float8, params[4]::float8);
            rastout := st_setskew( rastout, params[3]::float8, params[2]::float8);
            rastout := st_setupperleft(rastout, params[5]::float8, params[6]::float8);
        END IF;
        RETURN rastout;
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_setgeoreference(rast raster, upperleftx double precision, upperlefty double precision, scalex double precision, scaley double precision, skewx double precision, skewy double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_setgeoreference($1, array_to_string(ARRAY[$4, $7, $6, $5, $2, $3], ' ')) $function$
]]></string>
			<comment><![CDATA[args: rast, georefcoords, format=GDAL - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
		</function>
		<function name="st_setgeoreference_001" id="Function_1c00453b" isSystem="false" >
			<comment><![CDATA[args: rast, upperleftx, upperlefty, scalex, scaley, skewx, skewy - Set Georeference 6 georeference parameters in a single call. Numbers should be separated by white space. Accepts inputs in GDAL or ESRI format. Default is GDAL.]]></comment>
		</function>
		<function name="st_setgeotransform" id="Function_5fdbbaf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setgeotransform(rast raster, imag double precision, jmag double precision, theta_i double precision, theta_ij double precision, xoffset double precision, yoffset double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_setGeotransform$function$
]]></string>
		</function>
		<function name="st_setpoint" id="Function_f4790fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setpoint(geometry, integer, geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_setpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: linestring, zerobasedposition, point - Replace point N of linestring with given point. Index is 0-based.]]></comment>
		</function>
		<function name="st_setrotation" id="Function_259d9c66" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setrotation(rast raster, rotation double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setRotation$function$
]]></string>
			<comment><![CDATA[args: rast, rotation - Set the rotation of the raster in radian.]]></comment>
		</function>
		<function name="st_setscale" id="Function_2c7b3d41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setscale(rast raster, scale double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setScale$function$
CREATE OR REPLACE FUNCTION public.st_setscale(rast raster, scalex double precision, scaley double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setScaleXY$function$
]]></string>
			<comment><![CDATA[args: rast, xy - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
		</function>
		<function name="st_setscale_001" id="Function_25fdb719" isSystem="false" >
			<comment><![CDATA[args: rast, x, y - Sets the X and Y size of pixels in units of coordinate reference system. Number units/pixel width/height.]]></comment>
		</function>
		<function name="st_setskew" id="Function_2e0a0e43" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setskew(rast raster, skew double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setSkew$function$
CREATE OR REPLACE FUNCTION public.st_setskew(rast raster, skewx double precision, skewy double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setSkewXY$function$
]]></string>
			<comment><![CDATA[args: rast, skewxy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
		</function>
		<function name="st_setskew_001" id="Function_21129e11" isSystem="false" >
			<comment><![CDATA[args: rast, skewx, skewy - Sets the georeference X and Y skew (or rotation parameter). If only one is passed in, sets X and Y to the same value.]]></comment>
		</function>
		<function name="st_setsrid" id="Function_12e0d1d1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setsrid(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_set_srid$function$
CREATE OR REPLACE FUNCTION public.st_setsrid(rast raster, srid integer)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setSRID$function$
]]></string>
			<comment><![CDATA[args: geom, srid - Sets the SRID on a geometry to a particular integer value.]]></comment>
		</function>
		<function name="st_setsrid_001" id="Function_cde8b54" isSystem="false" >
			<comment><![CDATA[args: rast, srid - Sets the SRID of a raster to a particular integer srid defined in the spatial_ref_sys table.]]></comment>
		</function>
		<function name="st_setupperleft" id="Function_1569ddf2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setupperleft(rast raster, upperleftx double precision, upperlefty double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_setUpperLeftXY$function$
]]></string>
			<comment><![CDATA[args: rast, x, y - Sets the value of the upper left corner of the pixel to projected X and Y coordinates.]]></comment>
		</function>
		<function name="st_setvalue" id="Function_1126e25e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, geom geometry, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_setvalues($1, 1, ARRAY[ROW($2, $3)]::geomval[], FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, x integer, y integer, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
AS $function$ SELECT st_setvalue($1, 1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, nband integer, geom geometry, newvalue double precision)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_setvalues($1, $2, ARRAY[ROW($3, $4)]::geomval[], FALSE) $function$
CREATE OR REPLACE FUNCTION public.st_setvalue(rast raster, band integer, x integer, y integer, newvalue double precision)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_setPixelValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_setvalue_001" id="Function_1acd1078" isSystem="false" >
			<comment><![CDATA[args: rast, columnx, rowy, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_setvalue_002" id="Function_22ecf650" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_setvalue_003" id="Function_1bdac13a" isSystem="false" >
			<comment><![CDATA[args: rast, geom, newvalue - Returns modified raster resulting from setting the value of a given band in a given columnx, rowy pixel or the pixels that intersect a particular geometry. Band numbers start at 1 and assumed to be 1 if not specified.]]></comment>
		</function>
		<function name="st_setvalues" id="Function_bb8d4ca" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, geomvalset geomval[], keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE c
 IMMUTABLE
AS '$libdir/rtpostgis-2.1', $function$RASTER_setPixelValuesGeomval$function$
CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN _st_setvalues($1, 1, $2, $3, array_fill($6, ARRAY[$5, $4]::int[]), NULL, FALSE, NULL, $7);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], nosetvalue double precision, keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_setvalues($1, $2, $3, $4, $5, NULL, TRUE, $6, $7) $function$
CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, x integer, y integer, newvalueset double precision[], noset boolean[] DEFAULT NULL::boolean[], keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_setvalues($1, $2, $3, $4, $5, $6, FALSE, NULL, $7) $function$
CREATE OR REPLACE FUNCTION public.st_setvalues(rast raster, nband integer, x integer, y integer, width integer, height integer, newvalue double precision, keepnodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	BEGIN
		IF width <= 0 OR height <= 0 THEN
			RAISE EXCEPTION 'Values for width and height must be greater than zero';
			RETURN NULL;
		END IF;
		RETURN _st_setvalues($1, $2, $3, $4, array_fill($7, ARRAY[$6, $5]::int[]), NULL, FALSE, NULL, $8);
	END;
	$function$
]]></string>
			<comment><![CDATA[args: rast, nband, columnx, rowy, newvalueset, noset=NULL, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
		</function>
		<function name="st_setvalues_001" id="Function_2d7a29be" isSystem="false" >
			<comment><![CDATA[args: rast, nband, columnx, rowy, newvalueset, nosetvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
		</function>
		<function name="st_setvalues_002" id="Function_3629731e" isSystem="false" >
			<comment><![CDATA[args: rast, nband, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
		</function>
		<function name="st_setvalues_003" id="Function_25c71324" isSystem="false" >
			<comment><![CDATA[args: rast, columnx, rowy, width, height, newvalue, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
		</function>
		<function name="st_setvalues_004" id="Function_3a048118" isSystem="false" >
			<comment><![CDATA[args: rast, nband, geomvalset, keepnodata=FALSE - Returns modified raster resulting from setting the values of a given band.]]></comment>
		</function>
		<function name="st_sharedpaths" id="Function_1094b5e3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_sharedpaths(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_SharedPaths$function$
]]></string>
			<comment><![CDATA[args: lineal1, lineal2 - Returns a collection containing paths shared by the two input linestrings/multilinestrings.]]></comment>
		</function>
		<function name="st_shift_longitude" id="Function_6f88873" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_shift_longitude(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_longitude_shift$function$
]]></string>
			<comment><![CDATA[args: geomA - Reads every point/vertex in every component of every feature in a geometry, and if the longitude coordinate is <0, adds 360 to it. The result would be a 0-360 version of the data to be plotted in a 180 centric map]]></comment>
		</function>
		<function name="st_shortestline" id="Function_20505632" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_shortestline(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_shortestline2d$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns the 2-dimensional shortest line between two geometries]]></comment>
		</function>
		<function name="st_simplify" id="Function_da4460d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplify(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_simplify2d$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm.]]></comment>
		</function>
		<function name="st_simplifypreservetopology" id="Function_320f604a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_simplifypreservetopology(geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$topologypreservesimplify$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance - Returns a "simplified" version of the given geometry using the Douglas-Peucker algorithm. Will avoid creating derived geometries (polygons in particular) that are invalid.]]></comment>
		</function>
		<function name="st_skewx" id="Function_1b809bbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_skewx(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getXSkew$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the georeference X skew (or rotation parameter).]]></comment>
		</function>
		<function name="st_skewy" id="Function_a82c107" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_skewy(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getYSkew$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the georeference Y skew (or rotation parameter).]]></comment>
		</function>
		<function name="st_slope" id="Function_516b385" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_slope(rast raster, nband integer DEFAULT 1, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT st_slope($1, $2, NULL::raster, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_slope(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, units text DEFAULT 'DEGREES'::text, scale double precision DEFAULT 1.0, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);
		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_slope4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1,
			_pixwidth::text, _pixheight::text,
			_width::text, _height::text,
			units::text, scale::text
		);
	END;
	$function$
]]></string>
		</function>
		<function name="st_slope_001" id="Function_28ab1bd8" isSystem="false" />
		<function name="st_snap" id="Function_1529a2da" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snap(geom1 geometry, geom2 geometry, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_Snap$function$
]]></string>
			<comment><![CDATA[args: input, reference, tolerance - Snap segments and vertices of input geometry to vertices of a reference geometry.]]></comment>
		</function>
		<function name="st_snaptogrid" id="Function_59ee7ff" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_SnapToGrid($1, 0, 0, $2, $2)$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_SnapToGrid($1, 0, 0, $2, $3)$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_snaptogrid$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(geom1 geometry, geom2 geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_snaptogrid_pointoff$function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $5, $6, NULL, $4, $4, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $4, $5, NULL, $6, $7, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_snaptogrid(rast raster, gridx double precision, gridy double precision, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $6, $7, NULL, $4, $5, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: geomA, originX, originY, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_001" id="Function_2458665b" isSystem="false" >
			<comment><![CDATA[args: geomA, sizeX, sizeY - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_002" id="Function_9f63b97" isSystem="false" >
			<comment><![CDATA[args: geomA, size - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_003" id="Function_27633675" isSystem="false" >
			<comment><![CDATA[args: geomA, pointOrigin, sizeX, sizeY, sizeZ, sizeM - Snap all points of the input geometry to a regular grid.]]></comment>
		</function>
		<function name="st_snaptogrid_004" id="Function_2b5f0850" isSystem="false" >
			<comment><![CDATA[args: rast, gridx, gridy, algorithm=NearestNeighbour, maxerr=0.125, scalex=DEFAULT 0, scaley=DEFAULT 0 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_snaptogrid_005" id="Function_db1de2c" isSystem="false" >
			<comment><![CDATA[args: rast, gridx, gridy, scalex, scaley, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_snaptogrid_006" id="Function_1d484566" isSystem="false" >
			<comment><![CDATA[args: rast, gridx, gridy, scalexy, algorithm=NearestNeighbour, maxerr=0.125 - Resample a raster by snapping it to a grid. New pixel values are computed using the NearestNeighbor (english or american spelling), Bilinear, Cubic, CubicSpline or Lanczos resampling algorithm. Default is NearestNeighbor.]]></comment>
		</function>
		<function name="st_split" id="Function_16b18393" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_split(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT COST 100
AS '$libdir/postgis-2.1', $function$ST_Split$function$
]]></string>
			<comment><![CDATA[args: input, blade - Returns a collection of geometries resulting by splitting a geometry.]]></comment>
		</function>
		<function name="st_srid" id="Function_1fa7dccf" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_srid(geometry)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_get_srid$function$
CREATE OR REPLACE FUNCTION public.st_srid(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getSRID$function$
]]></string>
			<comment><![CDATA[args: g1 - Returns the spatial reference identifier for the ST_Geometry as defined in spatial_ref_sys table.]]></comment>
		</function>
		<function name="st_srid_001" id="Function_32daba38" isSystem="false" >
			<comment><![CDATA[args: rast - Returns the spatial reference identifier of the raster as defined in spatial_ref_sys table.]]></comment>
		</function>
		<function name="st_startpoint" id="Function_1bfb532c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_startpoint(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_startpoint_linestring$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns the first point of a LINESTRING geometry as a POINT.]]></comment>
		</function>
		<function name="st_stddev4ma" id="Function_11d99198" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_stddev4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT stddev(unnest) FROM unnest($1) $function$
CREATE OR REPLACE FUNCTION public.st_stddev4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT stddev(unnest) FROM unnest($1) $function$
]]></string>
		</function>
		<function name="st_stddev4ma_001" id="Function_2cb7a2c3" isSystem="false" />
		<function name="st_sum4ma" id="Function_102f17e1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_sum4ma(matrix double precision[], nodatamode text, VARIADIC args text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
    DECLARE
        _matrix float[][];
        sum float;
    BEGIN
        _matrix := matrix;
        sum := 0;
        FOR x in array_lower(matrix, 1)..array_upper(matrix, 1) LOOP
            FOR y in array_lower(matrix, 2)..array_upper(matrix, 2) LOOP
                IF _matrix[x][y] IS NULL THEN
                    IF nodatamode = 'ignore' THEN
                        _matrix[x][y] := 0;
                    ELSE
                        _matrix[x][y] := nodatamode::float;
                    END IF;
                END IF;
                sum := sum + _matrix[x][y];
            END LOOP;
        END LOOP;
        RETURN sum;
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_sum4ma(value double precision[], pos integer[], VARIADIC userargs text[] DEFAULT NULL::text[])
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_value double precision[][][];
		sum double precision;
		x int;
		y int;
		z int;
		ndims int;
	BEGIN
		sum := 0;
		ndims := array_ndims(value);
		-- add a third dimension if 2-dimension
		IF ndims = 2 THEN
			_value := _st_convertarray4ma(value);
		ELSEIF ndims != 3 THEN
			RAISE EXCEPTION 'First parameter of function must be a 3-dimension array';
		ELSE
			_value := value;
		END IF;
		-- raster
		FOR z IN array_lower(_value, 1)..array_upper(_value, 1) LOOP
			-- row
			FOR y IN array_lower(_value, 2)..array_upper(_value, 2) LOOP
				-- column
				FOR x IN array_lower(_value, 3)..array_upper(_value, 3) LOOP
					IF _value[z][y][x] IS NULL THEN
						IF array_length(userargs, 1) > 0 THEN
							_value[z][y][x] = userargs[array_lower(userargs, 1)]::double precision;
						ELSE
							CONTINUE;
						END IF;
					END IF;
					sum := sum + _value[z][y][x];
				END LOOP;
			END LOOP;
		END LOOP;
		RETURN sum;
	END;
	$function$
]]></string>
		</function>
		<function name="st_sum4ma_001" id="Function_13d683fb" isSystem="false" />
		<function name="st_summary" id="Function_1e7a37e0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summary(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_summary$function$
CREATE OR REPLACE FUNCTION public.st_summary(geography)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_summary$function$
CREATE OR REPLACE FUNCTION public.st_summary(rast raster)
 RETURNS text
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		extent box2d;
		metadata record;
		bandmetadata record;
		msg text;
		msgset text[];
	BEGIN
		extent := ST_Extent(rast::geometry);
		metadata := ST_Metadata(rast);
		msg := 'Raster of ' || metadata.width || 'x' || metadata.height || ' pixels has ' || metadata.numbands || ' ';
		IF metadata.numbands = 1 THEN
			msg := msg || 'band ';
		ELSE
			msg := msg || 'bands ';
		END IF;
		msg := msg || 'and extent of ' || extent;
		IF
			metadata.skewx::numeric(16, 10) <> 0::numeric(16, 10) OR 
			metadata.skewy::numeric(16, 10) <> 0::numeric(16, 10)
		THEN
			msg := 'Skewed ' || overlay(msg placing 'r' from 1 for 1);
		END IF;
		msgset := Array[]::text[] || msg;
		FOR bandmetadata IN SELECT * FROM ST_BandMetadata(rast, ARRAY[]::int[]) LOOP
			msg := 'band ' || bandmetadata.bandnum || ' of pixtype ' || bandmetadata.pixeltype || ' is ';
			IF bandmetadata.isoutdb IS FALSE THEN
				msg := msg || 'in-db ';
			ELSE
				msg := msg || 'out-db ';
			END IF;
			msg := msg || 'with ';
			IF bandmetadata.nodatavalue IS NOT NULL THEN
				msg := msg || 'NODATA value of ' || bandmetadata.nodatavalue;
			ELSE
				msg := msg || 'no NODATA value';
			END IF;
			msgset := msgset || ('    ' || msg);
		END LOOP;
		RETURN array_to_string(msgset, E'\n');
	END;
	$function$
]]></string>
			<comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
		</function>
		<function name="st_summary_001" id="Function_210c4d12" isSystem="false" >
			<comment><![CDATA[args: g - Returns a text summary of the contents of the geometry.]]></comment>
		</function>
		<function name="st_summary_002" id="Function_21f4c553" isSystem="false" >
			<comment><![CDATA[args: rast - Returns a text summary of the contents of the raster.]]></comment>
		</function>
		<function name="st_summarystats" id="Function_32dc2544" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_summarystats(rast raster, exclude_nodata_value boolean, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, 1, $2, 1) $function$
CREATE OR REPLACE FUNCTION public.st_summarystats(rastertable text, rastercolumn text, exclude_nodata_value boolean, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, 1, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_summarystats(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, 1) $function$
CREATE OR REPLACE FUNCTION public.st_summarystats(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, OUT count bigint, OUT sum double precision, OUT mean double precision, OUT stddev double precision, OUT min double precision, OUT max double precision)
 RETURNS record
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_summarystats($1, $2, $3, $4, 1) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, exclude_nodata_value - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_summarystats_001" id="Function_36a65ba4" isSystem="false" >
			<comment><![CDATA[args: rast, exclude_nodata_value - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_summarystats_002" id="Function_114ed2bb" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_summarystats_003" id="Function_29000972" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, exclude_nodata_value - Returns record consisting of count, sum, mean, stddev, min, max for a given raster band of a raster or raster coverage. Band 1 is assumed is no band is specified.]]></comment>
		</function>
		<function name="st_symdifference" id="Function_267a3b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_symdifference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$symdifference$function$
]]></string>
			<comment><![CDATA[args: geomA, geomB - Returns a geometry that represents the portions of A and B that do not intersect. It is called a symmetric difference because ST_SymDifference(A,B) = ST_SymDifference(B,A).]]></comment>
		</function>
		<function name="st_symmetricdifference" id="Function_2a8e0642" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_symmetricdifference(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$symdifference$function$
]]></string>
		</function>
		<function name="st_tile" id="Function_26d0ccd1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tile(rast raster, width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)
 RETURNS SETOF raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_tile($1, $2, $3, NULL::integer[], $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_tile(rast raster, nband integer, width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)
 RETURNS SETOF raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_tile($1, $3, $4, ARRAY[$2]::integer[], $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_tile(rast raster, nband integer[], width integer, height integer, padwithnodata boolean DEFAULT false, nodataval double precision DEFAULT NULL::double precision)
 RETURNS SETOF raster
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT _st_tile($1, $3, $4, $2, $5, $6) $function$
]]></string>
			<comment><![CDATA[args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
		</function>
		<function name="st_tile_001" id="Function_3aac121b" isSystem="false" >
			<comment><![CDATA[args: rast, nband, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
		</function>
		<function name="st_tile_002" id="Function_2ed01c56" isSystem="false" >
			<comment><![CDATA[args: rast, width, height, padwithnodata=FALSE, nodataval=NULL - Returns a set of rasters resulting from the split of the input raster based upon the desired dimensions of the output rasters.]]></comment>
		</function>
		<function name="st_touches" id="Function_256591a1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_touches(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Touches($1,$2)$function$
CREATE OR REPLACE FUNCTION public.st_touches(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_touches($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_touches(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_touches(st_convexhull($1), st_convexhull($3)) ELSE _st_touches($1, $2, $3, $4) END $function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns TRUE if the geometries have at least one point in common, but their interiors do not intersect.]]></comment>
		</function>
		<function name="st_touches_001" id="Function_257b368f" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.]]></comment>
		</function>
		<function name="st_touches_002" id="Function_25d07a17" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if raster rastA and rastB have at least one point in common but their interiors do not intersect.]]></comment>
		</function>
		<function name="st_tpi" id="Function_329fddf3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tpi(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);
		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_tpi4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$function$
]]></string>
		</function>
		<function name="st_transform" id="Function_754fe13" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transform(geometry, integer)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$transform$function$
CREATE OR REPLACE FUNCTION public.st_transform(rast raster, alignto raster, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
	DECLARE
		_srid integer;
		_scalex double precision;
		_scaley double precision;
		_gridx double precision;
		_gridy double precision;
		_skewx double precision;
		_skewy double precision;
	BEGIN
		SELECT srid, scalex, scaley, upperleftx, upperlefty, skewx, skewy INTO _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy FROM st_metadata($2);
		RETURN _st_gdalwarp($1, $3, $4, _srid, _scalex, _scaley, _gridx, _gridy, _skewx, _skewy, NULL, NULL);
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, scalexy double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $4, $5, $2, $3, $3) $function$
CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125, scalex double precision DEFAULT 0, scaley double precision DEFAULT 0)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $3, $4, $2, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_transform(rast raster, srid integer, scalex double precision, scaley double precision, algorithm text DEFAULT 'NearestNeighbour'::text, maxerr double precision DEFAULT 0.125)
 RETURNS raster
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT _st_gdalwarp($1, $5, $6, $2, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: g1, srid - Returns a new geometry with its coordinates transformed to the SRID referenced by the integer parameter.]]></comment>
		</function>
		<function name="st_transform_001" id="Function_cfa214c" isSystem="false" >
			<comment><![CDATA[args: rast, srid, algorithm=NearestNeighbor, maxerr=0.125, scalex, scaley - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
		</function>
		<function name="st_transform_002" id="Function_399aa005" isSystem="false" >
			<comment><![CDATA[args: rast, srid, scalex, scaley, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
		</function>
		<function name="st_transform_003" id="Function_397d41cd" isSystem="false" />
		<function name="st_transform_004" id="Function_7ee24f0" isSystem="false" >
			<comment><![CDATA[args: rast, alignto, algorithm=NearestNeighbor, maxerr=0.125 - Reprojects a raster in a known spatial reference system to another known spatial reference system using specified resampling algorithm. Options are NearestNeighbor, Bilinear, Cubic, CubicSpline, Lanczos defaulting to NearestNeighbor.]]></comment>
		</function>
		<function name="st_translate" id="Function_3a0e5e12" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_translate(geometry, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Translate($1, $2, $3, 0)$function$
CREATE OR REPLACE FUNCTION public.st_translate(geometry, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1, 1, 0, 0, 0, 1, 0, 0, 0, 1, $2, $3, $4)$function$
]]></string>
			<comment><![CDATA[args: g1, deltax, deltay, deltaz - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).]]></comment>
		</function>
		<function name="st_translate_001" id="Function_16eafb5f" isSystem="false" >
			<comment><![CDATA[args: g1, deltax, deltay - Translates the geometry to a new location using the numeric parameters as offsets. Ie: ST_Translate(geom, X, Y) or ST_Translate(geom, X, Y,Z).]]></comment>
		</function>
		<function name="st_transscale" id="Function_1d6eb087" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_transscale(geometry, double precision, double precision, double precision, double precision)
 RETURNS geometry
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$SELECT ST_Affine($1,  $4, 0, 0,  0, $5, 0,
		0, 0, 1,  $2 * $4, $3 * $5, 0)$function$
]]></string>
			<comment><![CDATA[args: geomA, deltaX, deltaY, XFactor, YFactor - Translates the geometry using the deltaX and deltaY args, then scales it using the XFactor, YFactor args, working in 2D only.]]></comment>
		</function>
		<function name="st_tri" id="Function_34be80f4" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_tri(rast raster, nband integer, customextent raster, pixeltype text DEFAULT '32BF'::text, interpolate_nodata boolean DEFAULT false)
 RETURNS raster
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
	DECLARE
		_rast raster;
		_nband integer;
		_pixtype text;
		_pixwidth double precision;
		_pixheight double precision;
		_width integer;
		_height integer;
		_customextent raster;
		_extenttype text;
	BEGIN
		_customextent := customextent;
		IF _customextent IS NULL THEN
			_extenttype := 'FIRST';
		ELSE
			_extenttype := 'CUSTOM';
		END IF;
		IF interpolate_nodata IS TRUE THEN
			_rast := ST_MapAlgebra(
				ARRAY[ROW(rast, nband)]::rastbandarg[],
				'st_invdistweight4ma(double precision[][][], integer[][], text[])'::regprocedure,
				pixeltype,
				'FIRST', NULL,
				1, 1
			);
			_nband := 1;
			_pixtype := NULL;
		ELSE
			_rast := rast;
			_nband := nband;
			_pixtype := pixeltype;
		END IF;
		-- get properties
		_pixwidth := ST_PixelWidth(_rast);
		_pixheight := ST_PixelHeight(_rast);
		SELECT width, height INTO _width, _height FROM ST_Metadata(_rast);
		RETURN ST_MapAlgebra(
			ARRAY[ROW(_rast, _nband)]::rastbandarg[],
			'_st_tri4ma(double precision[][][], integer[][], text[])'::regprocedure,
			_pixtype,
			_extenttype, _customextent,
			1, 1);
	END;
	$function$
]]></string>
		</function>
		<function name="st_unaryunion" id="Function_2994cbc2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_unaryunion(geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$ST_UnaryUnion$function$
]]></string>
			<comment><![CDATA[args: geom - Like ST_Union, but working at the geometry component level.]]></comment>
		</function>
		<function name="st_union" id="Function_1535bba5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_union(geom1 geometry, geom2 geometry)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$geomunion$function$
CREATE OR REPLACE FUNCTION public.st_union(geometry[])
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$pgis_union_geometry_array$function$
]]></string>
			<comment><![CDATA[args: g1, g2 - Returns a geometry that represents the point set union of the Geometries.]]></comment>
		</function>
		<function name="st_union_001" id="Function_1f725d26" isSystem="false" >
			<comment><![CDATA[args: g1_array - Returns a geometry that represents the point set union of the Geometries.]]></comment>
		</function>
		<function name="st_union_002" id="Function_ffc9823" isSystem="false" >
			<comment><![CDATA[args: g1field - Returns a geometry that represents the point set union of the Geometries.]]></comment>
		</function>
		<function name="st_union_003" id="Function_29d37531" isSystem="false" />
		<function name="st_union_004" id="Function_314b1b1" isSystem="false" />
		<function name="st_union_005" id="Function_1a8763a9" isSystem="false" />
		<function name="st_union_006" id="Function_2fd64fba" isSystem="false" />
		<function name="st_union_007" id="Function_1591eb7a" isSystem="false" />
		<function name="st_upperleftx" id="Function_250fcace" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_upperleftx(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getXUpperLeft$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the upper left X coordinate of raster in projected spatial ref.]]></comment>
		</function>
		<function name="st_upperlefty" id="Function_10cd9e07" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_upperlefty(raster)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getYUpperLeft$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the upper left Y coordinate of raster in projected spatial ref.]]></comment>
		</function>
		<function name="st_value" id="Function_28372e9a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_value(rast raster, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_value($1, 1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_value(rast raster, x integer, y integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT st_value($1, 1, $2, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_value(rast raster, band integer, pt geometry, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
    DECLARE
        x float8;
        y float8;
        gtype text;
    BEGIN
        gtype := st_geometrytype(pt);
        IF ( gtype != 'ST_Point' ) THEN
            RAISE EXCEPTION 'Attempting to get the value of a pixel with a non-point geometry';
        END IF;
				IF ST_SRID(pt) != ST_SRID(rast) THEN
            RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
				END IF;
        x := st_x(pt);
        y := st_y(pt);
        RETURN st_value(rast,
                        band,
                        st_worldtorastercoordx(rast, x, y),
                        st_worldtorastercoordy(rast, x, y),
                        exclude_nodata_value);
    END;
    $function$
CREATE OR REPLACE FUNCTION public.st_value(rast raster, band integer, x integer, y integer, exclude_nodata_value boolean DEFAULT true)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getPixelValue$function$
]]></string>
			<comment><![CDATA[args: rast, bandnum, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_value_001" id="Function_355a2d40" isSystem="false" >
			<comment><![CDATA[args: rast, columnx, rowy, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_value_002" id="Function_2d0cbf0f" isSystem="false" >
			<comment><![CDATA[args: rast, bandnum, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_value_003" id="Function_19d7f8a3" isSystem="false" >
			<comment><![CDATA[args: rast, pt, exclude_nodata_value=true - Returns the value of a given band in a given columnx, rowy pixel or at a particular geometric point. Band numbers start at 1 and assumed to be 1 if not specified. If exclude_nodata_value is set to false, then all pixels include nodata pixels are considered to intersect and return value. If exclude_nodata_value is not passed in then reads it from metadata of raster.]]></comment>
		</function>
		<function name="st_valuecount" id="Function_1df5b0d0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, 1, TRUE, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT count integer)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, count FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).count $function$
CREATE OR REPLACE FUNCTION public.st_valuecount(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).count $function$
]]></string>
			<comment><![CDATA[args: rast, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_001" id="Function_24598180" isSystem="false" >
			<comment><![CDATA[args: rast, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_002" id="Function_843d4c9" isSystem="false" >
			<comment><![CDATA[args: rast, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_003" id="Function_35eb1401" isSystem="false" >
			<comment><![CDATA[args: rast, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_004" id="Function_1b11e4c3" isSystem="false" >
			<comment><![CDATA[args: rast, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_005" id="Function_b438f37" isSystem="false" >
			<comment><![CDATA[args: rast, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_006" id="Function_264b7e6a" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband=1, exclude_nodata_value=true, searchvalues=NULL, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_007" id="Function_1f4df67d" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_008" id="Function_5d1ba92" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, searchvalues, roundto=0, OUT value, OUT count - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_009" id="Function_36d8e432" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, exclude_nodata_value, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_010" id="Function_249d3b9b" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, nband, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuecount_011" id="Function_11eeb97c" isSystem="false" >
			<comment><![CDATA[args: rastertable, rastercolumn, searchvalue, roundto=0 - Returns a set of records containing a pixel band value and count of the number of pixels in a given band of a raster (or a raster coverage) that have a given set of values. If no band is specified defaults to band 1. By default nodata value pixels are not counted. and all other values in the pixel are output and pixel band values are rounded to the nearest integer.]]></comment>
		</function>
		<function name="st_valuepercent" id="Function_35644e41" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, 1, TRUE, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, ARRAY[$4]::double precision[], $5)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, TRUE, ARRAY[$3]::double precision[], $4)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rast raster, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT (_st_valuecount($1, 1, TRUE, ARRAY[$2]::double precision[], $3)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer DEFAULT 1, exclude_nodata_value boolean DEFAULT true, searchvalues double precision[] DEFAULT NULL::double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, $3, $4, $5, $6) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, $3, TRUE, $4, $5) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, searchvalues double precision[], roundto double precision DEFAULT 0, OUT value double precision, OUT percent double precision)
 RETURNS SETOF record
 LANGUAGE sql
 STABLE
AS $function$ SELECT value, percent FROM _st_valuecount($1, $2, 1, TRUE, $3, $4) $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, exclude_nodata_value boolean, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, $4, ARRAY[$5]::double precision[], $6)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, nband integer, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, $3, TRUE, ARRAY[$4]::double precision[], $5)).percent $function$
CREATE OR REPLACE FUNCTION public.st_valuepercent(rastertable text, rastercolumn text, searchvalue double precision, roundto double precision DEFAULT 0)
 RETURNS double precision
 LANGUAGE sql
 STABLE STRICT
AS $function$ SELECT (_st_valuecount($1, $2, 1, TRUE, ARRAY[$3]::double precision[], $4)).percent $function$
]]></string>
		</function>
		<function name="st_valuepercent_001" id="Function_a44da45" isSystem="false" />
		<function name="st_valuepercent_002" id="Function_18d1c9f0" isSystem="false" />
		<function name="st_valuepercent_003" id="Function_13e68158" isSystem="false" />
		<function name="st_valuepercent_004" id="Function_21be0e53" isSystem="false" />
		<function name="st_valuepercent_005" id="Function_31853c22" isSystem="false" />
		<function name="st_valuepercent_006" id="Function_1b2a7489" isSystem="false" />
		<function name="st_valuepercent_007" id="Function_21854b90" isSystem="false" />
		<function name="st_valuepercent_008" id="Function_255e46ab" isSystem="false" />
		<function name="st_valuepercent_009" id="Function_32d1a59a" isSystem="false" />
		<function name="st_valuepercent_010" id="Function_11cb305e" isSystem="false" />
		<function name="st_valuepercent_011" id="Function_35913135" isSystem="false" />
		<function name="st_width" id="Function_13444a68" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_width(raster)
 RETURNS integer
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/rtpostgis-2.1', $function$RASTER_getWidth$function$
]]></string>
			<comment><![CDATA[args: rast - Returns the width of the raster in pixels.]]></comment>
		</function>
		<function name="st_within" id="Function_225d4a5d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_within(geom1 geometry, geom2 geometry)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE
AS $function$SELECT $1 && $2 AND _ST_Contains($2,$1)$function$
CREATE OR REPLACE FUNCTION public.st_within(rast1 raster, rast2 raster)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT st_within($1, NULL::integer, $2, NULL::integer) $function$
CREATE OR REPLACE FUNCTION public.st_within(rast1 raster, nband1 integer, rast2 raster, nband2 integer)
 RETURNS boolean
 LANGUAGE sql
 IMMUTABLE COST 1000
AS $function$ SELECT $1 && $3 AND CASE WHEN $2 IS NULL OR $4 IS NULL THEN _st_within(st_convexhull($1), st_convexhull($3)) ELSE _st_contains($3, $4, $1, $2) END $function$
]]></string>
			<comment><![CDATA[args: A, B - Returns true if the geometry A is completely inside geometry B]]></comment>
		</function>
		<function name="st_within_001" id="Function_670ec01" isSystem="false" >
			<comment><![CDATA[args: rastA, nbandA, rastB, nbandB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.]]></comment>
		</function>
		<function name="st_within_002" id="Function_cf438b9" isSystem="false" >
			<comment><![CDATA[args: rastA, rastB - Return true if no points of raster rastA lie in the exterior of raster rastB and at least one point of the interior of rastA lies in the interior of rastB.]]></comment>
		</function>
		<function name="st_wkbtosql" id="Function_2ec260f7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_wkbtosql(wkb bytea)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_WKB$function$
]]></string>
			<comment><![CDATA[args: WKB - Return a specified ST_Geometry value from Well-Known Binary representation (WKB). This is an alias name for ST_GeomFromWKB that takes no srid]]></comment>
		</function>
		<function name="st_wkttosql" id="Function_37d40437" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_wkttosql(text)
 RETURNS geometry
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_from_text$function$
]]></string>
			<comment><![CDATA[args: WKT - Return a specified ST_Geometry value from Well-Known Text representation (WKT). This is an alias name for ST_GeomFromText]]></comment>
		</function>
		<function name="st_worldtorastercoord" id="Function_21d05b58" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoord(rast raster, pt geometry, OUT columnx integer, OUT rowy integer)
 RETURNS record
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		rx integer;
		ry integer;
	BEGIN
		IF st_geometrytype(pt) != 'ST_Point' THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rc.columnx AS x, rc.rowy AS y INTO columnx, rowy FROM _st_worldtorastercoord($1, st_x(pt), st_y(pt)) AS rc;
		RETURN;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_worldtorastercoord(rast raster, longitude double precision, latitude double precision, OUT columnx integer, OUT rowy integer)
 RETURNS record
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT columnx, rowy FROM _st_worldtorastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, longitude, latitude - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.]]></comment>
		</function>
		<function name="st_worldtorastercoord_001" id="Function_283241b" isSystem="false" >
			<comment><![CDATA[args: rast, pt - Returns the upper left corner as column and row given geometric X and Y (longitude and latitude) or a point geometry expressed in the spatial reference coordinate system of the raster.]]></comment>
		</function>
		<function name="st_worldtorastercoordx" id="Function_29ff4fbe" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordx(rast raster, xw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT columnx FROM _st_worldtorastercoord($1, $2, NULL) $function$
CREATE OR REPLACE FUNCTION public.st_worldtorastercoordx(rast raster, pt geometry)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		xr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT columnx INTO xr FROM _st_worldtorastercoord($1, st_x(pt), st_y(pt));
		RETURN xr;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_worldtorastercoordx(rast raster, xw double precision, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT columnx FROM _st_worldtorastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xw, yw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_worldtorastercoordx_001" id="Function_fb2b93d" isSystem="false" >
			<comment><![CDATA[args: rast, xw - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_worldtorastercoordx_002" id="Function_26c439fb" isSystem="false" >
			<comment><![CDATA[args: rast, pt - Returns the column in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_worldtorastercoordy" id="Function_2a83779d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_worldtorastercoordy(rast raster, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT rowy FROM _st_worldtorastercoord($1, NULL, $2) $function$
CREATE OR REPLACE FUNCTION public.st_worldtorastercoordy(rast raster, pt geometry)
 RETURNS integer
 LANGUAGE plpgsql
 IMMUTABLE STRICT
AS $function$
	DECLARE
		yr integer;
	BEGIN
		IF ( st_geometrytype(pt) != 'ST_Point' ) THEN
			RAISE EXCEPTION 'Attempting to compute raster coordinate with a non-point geometry';
		END IF;
		IF ST_SRID(rast) != ST_SRID(pt) THEN
			RAISE EXCEPTION 'Raster and geometry do not have the same SRID';
		END IF;
		SELECT rowy INTO yr FROM _st_worldtorastercoord($1, st_x(pt), st_y(pt));
		RETURN yr;
	END;
	$function$
CREATE OR REPLACE FUNCTION public.st_worldtorastercoordy(rast raster, xw double precision, yw double precision)
 RETURNS integer
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$ SELECT rowy FROM _st_worldtorastercoord($1, $2, $3) $function$
]]></string>
			<comment><![CDATA[args: rast, xw, yw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_worldtorastercoordy_001" id="Function_339b963" isSystem="false" >
			<comment><![CDATA[args: rast, xw - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_worldtorastercoordy_002" id="Function_3778b197" isSystem="false" >
			<comment><![CDATA[args: rast, pt - Returns the row in the raster of the point geometry (pt) or a X and Y world coordinate (xw, yw) represented in world spatial reference system of raster.]]></comment>
		</function>
		<function name="st_x" id="Function_59b68b3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_x(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_x_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the X coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_xmax" id="Function_106c905a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_xmax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_xmax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X maxima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_xmin" id="Function_140158d3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_xmin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_xmin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns X minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_y" id="Function_2a3a4a19" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_y(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_y_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the Y coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_ymax" id="Function_b11a4d8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ymax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_ymax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y maxima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_ymin" id="Function_135698a2" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_ymin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_ymin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Y minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_z" id="Function_2845d9db" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_z(geometry)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_z_point$function$
]]></string>
			<comment><![CDATA[args: a_point - Return the Z coordinate of the point, or NULL if not available. Input must be a point.]]></comment>
		</function>
		<function name="st_zmax" id="Function_12c07a92" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmax(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_zmax$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="st_zmflag" id="Function_1fc2ead3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmflag(geometry)
 RETURNS smallint
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_zmflag$function$
]]></string>
			<comment><![CDATA[args: geomA - Returns ZM (dimension semantic) flag of the geometries as a small int. Values are: 0=2d, 1=3dm, 2=3dz, 3=4d.]]></comment>
		</function>
		<function name="st_zmin" id="Function_21e3ee87" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.st_zmin(box3d)
 RETURNS double precision
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$BOX3D_zmin$function$
]]></string>
			<comment><![CDATA[args: aGeomorBox2DorBox3D - Returns Z minima of a bounding box 2d or 3d or a geometry.]]></comment>
		</function>
		<function name="text" id="Function_2457b45a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.text(geometry)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/postgis-2.1', $function$LWGEOM_to_text$function$
]]></string>
		</function>
		<function name="text_soundex" id="Function_1357c91a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.text_soundex(text)
 RETURNS text
 LANGUAGE c
 IMMUTABLE STRICT
AS '$libdir/fuzzystrmatch', $function$soundex$function$
]]></string>
		</function>
		<function name="unlockrows" id="Function_302df33f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.unlockrows(text)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$ 
DECLARE
	ret int;
BEGIN
	IF NOT LongTransactionsEnabled() THEN
		RAISE EXCEPTION 'Long transaction support disabled, use EnableLongTransaction() to enable.';
	END IF;
	EXECUTE 'DELETE FROM authorization_table where authid = ' ||
		quote_literal($1);
	GET DIAGNOSTICS ret = ROW_COUNT;
	RETURN ret;
END;
$function$
]]></string>
			<comment><![CDATA[args: auth_token - Remove all locks held by specified authorization id. Returns the number of locks released.]]></comment>
		</function>
		<function name="updategeometrysrid" id="Function_37221dec" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updategeometrysrid(character varying, character varying, integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('','',$1,$2,$3) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.updategeometrysrid(character varying, character varying, character varying, integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	ret  text;
BEGIN
	SELECT UpdateGeometrySRID('',$1,$2,$3,$4) into ret;
	RETURN ret;
END;
$function$
CREATE OR REPLACE FUNCTION public.updategeometrysrid(catalogn_name character varying, schema_name character varying, table_name character varying, column_name character varying, new_srid_in integer)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	myrec RECORD;
	okay boolean;
	cname varchar;
	real_schema name;
	unknown_srid integer;
	new_srid integer := new_srid_in;
BEGIN

	-- Find, check or fix schema_name
	IF ( schema_name != '' ) THEN
		okay = false;
		FOR myrec IN SELECT nspname FROM pg_namespace WHERE text(nspname) = schema_name LOOP
			okay := true;
		END LOOP;
		IF ( okay <> true ) THEN
			RAISE EXCEPTION 'Invalid schema name';
		ELSE
			real_schema = schema_name;
		END IF;
	ELSE
		SELECT INTO real_schema current_schema()::text;
	END IF;
	-- Ensure that column_name is in geometry_columns
	okay = false;
	FOR myrec IN SELECT type, coord_dimension FROM geometry_columns WHERE f_table_schema = text(real_schema) and f_table_name = table_name and f_geometry_column = column_name LOOP
		okay := true;
	END LOOP;
	IF (NOT okay) THEN
		RAISE EXCEPTION 'column not found in geometry_columns table';
		RETURN false;
	END IF;
	-- Ensure that new_srid is valid
	IF ( new_srid > 0 ) THEN
		IF ( SELECT count(*) = 0 from spatial_ref_sys where srid = new_srid ) THEN
			RAISE EXCEPTION 'invalid SRID: % not found in spatial_ref_sys', new_srid;
			RETURN false;
		END IF;
	ELSE
		unknown_srid := ST_SRID('POINT EMPTY'::geometry);
		IF ( new_srid != unknown_srid ) THEN
			new_srid := unknown_srid;
			RAISE NOTICE 'SRID value % converted to the officially unknown SRID value %', new_srid_in, new_srid;
		END IF;
	END IF;
	IF postgis_constraint_srid(real_schema, table_name, column_name) IS NOT NULL THEN 
	-- srid was enforced with constraints before, keep it that way.
        -- Make up constraint name
        cname = 'enforce_srid_'  || column_name;
    
        -- Drop enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' DROP constraint ' || quote_ident(cname);
    
        -- Update geometries SRID
        EXECUTE 'UPDATE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' SET ' || quote_ident(column_name) ||
            ' = ST_SetSRID(' || quote_ident(column_name) ||
            ', ' || new_srid::text || ')';
            
        -- Reset enforce_srid constraint
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) ||
            '.' || quote_ident(table_name) ||
            ' ADD constraint ' || quote_ident(cname) ||
            ' CHECK (st_srid(' || quote_ident(column_name) ||
            ') = ' || new_srid::text || ')';
    ELSE 
        -- We will use typmod to enforce if no srid constraints
        -- We are using postgis_type_name to lookup the new name 
        -- (in case Paul changes his mind and flips geometry_columns to return old upper case name) 
        EXECUTE 'ALTER TABLE ' || quote_ident(real_schema) || '.' || quote_ident(table_name) || 
        ' ALTER COLUMN ' || quote_ident(column_name) || ' TYPE  geometry(' || postgis_type_name(myrec.type, myrec.coord_dimension, true) || ', ' || new_srid::text || ') USING ST_SetSRID(' || quote_ident(column_name) || ',' || new_srid::text || ');' ;
    END IF;
	RETURN real_schema || '.' || table_name || '.' || column_name ||' SRID changed to ' || new_srid::text;
END;
$function$
]]></string>
			<comment><![CDATA[args: catalog_name, schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
		</function>
		<function name="updategeometrysrid_001" id="Function_2d6bc59b" isSystem="false" >
			<comment><![CDATA[args: schema_name, table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
		</function>
		<function name="updategeometrysrid_002" id="Function_11869021" isSystem="false" >
			<comment><![CDATA[args: table_name, column_name, srid - Updates the SRID of all features in a geometry column, geometry_columns metadata and srid. If it was enforced with constraints, the constraints will be updated with new srid constraint. If the old was enforced by type definition, the type definition will be changed.]]></comment>
		</function>
		<function name="updaterastersrid" id="Function_474088f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION public.updaterastersrid(table_name name, column_name name, new_srid integer)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _UpdateRasterSRID('', $1, $2, $3) $function$
CREATE OR REPLACE FUNCTION public.updaterastersrid(schema_name name, table_name name, column_name name, new_srid integer)
 RETURNS boolean
 LANGUAGE sql
 STRICT
AS $function$ SELECT _UpdateRasterSRID($1, $2, $3, $4) $function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.]]></comment>
		</function>
		<function name="updaterastersrid_001" id="Function_20b780e1" isSystem="false" >
			<comment><![CDATA[args: table_name, column_name, new_srid - Change the SRID of all rasters in the user-specified column and table.]]></comment>
		</function>
	</schema>
	<schema name="tiger" catalogname="census" schemaname="tiger" >
		<table name="addr" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="tlid" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="fromhn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="tohn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="side" type="varchar" length="1" decimal="0" jt="12" />
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" />
			<column name="plus4" type="varchar" length="4" decimal="0" jt="12" />
			<column name="fromtyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="totyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="fromarmid" type="integer" length="10" decimal="0" jt="4" />
			<column name="toarmid" type="integer" length="10" decimal="0" jt="4" />
			<column name="arid" type="varchar" length="22" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<index name="addr_pkey" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_addr_tlid_statefp" unique="NORMAL" >
				<column name="tlid" />
				<column name="statefp" />
			</index>
			<index name="idx_tiger_addr_zip" unique="NORMAL" >
				<column name="zip" />
			</index>
		</table>
		<table name="addrfeat" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="tlid" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="aridl" type="varchar" length="22" decimal="0" jt="12" />
			<column name="aridr" type="varchar" length="22" decimal="0" jt="12" />
			<column name="linearid" type="varchar" length="22" decimal="0" jt="12" />
			<column name="fullname" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lfromhn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="ltohn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="rfromhn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="rtohn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="zipl" type="varchar" length="5" decimal="0" jt="12" />
			<column name="zipr" type="varchar" length="5" decimal="0" jt="12" />
			<column name="edge_mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="parityl" type="varchar" length="1" decimal="0" jt="12" />
			<column name="parityr" type="varchar" length="1" decimal="0" jt="12" />
			<column name="plus4l" type="varchar" length="4" decimal="0" jt="12" />
			<column name="plus4r" type="varchar" length="4" decimal="0" jt="12" />
			<column name="lfromtyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="ltotyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="rfromtyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="rtotyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offsetl" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offsetr" type="varchar" length="1" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="addrfeat_pkey" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_addrfeat_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<index name="idx_addrfeat_tlid" unique="NORMAL" >
				<column name="tlid" />
			</index>
			<index name="idx_addrfeat_zipl" unique="NORMAL" >
				<column name="zipl" />
			</index>
			<index name="idx_addrfeat_zipr" unique="NORMAL" >
				<column name="zipr" />
			</index>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;LINESTRING&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="bg" >
			<comment><![CDATA[block groups]]></comment>
			<column name="bg_id" type="varchar" length="12" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blkgrpce" type="varchar" length="1" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="13" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="bg_pkey" unique="PRIMARY_KEY" >
				<column name="bg_id" />
			</index>
			<constraint name="enforce_dims_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="county" >
			<column name="cntyidfp" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="countyns" type="varchar" length="8" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="csafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="cbsafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="metdivfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_tiger_county" unique="PRIMARY_KEY" >
				<column name="cntyidfp" />
			</index>
			<index name="uidx_county_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_county" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<constraint name="enforce_dims_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="county_lookup" >
			<column name="st_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="co_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="state" type="varchar" length="2" decimal="0" jt="12" />
			<column name="name" type="varchar" length="90" decimal="0" jt="12" />
			<index name="county_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="st_code" />
				<column name="co_code" />
			</index>
			<index name="county_lookup_state_idx" unique="NORMAL" >
				<column name="state" />
			</index>
		</table>
		<table name="countysub_lookup" >
			<column name="st_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="co_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="cs_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="state" type="varchar" length="2" decimal="0" jt="12" />
			<column name="county" type="varchar" length="90" decimal="0" jt="12" />
			<column name="name" type="varchar" length="90" decimal="0" jt="12" />
			<index name="countysub_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="st_code" />
				<column name="co_code" />
				<column name="cs_code" />
			</index>
			<index name="countysub_lookup_state_idx" unique="NORMAL" >
				<column name="state" />
			</index>
		</table>
		<table name="cousub" >
			<column name="cosbidfp" type="varchar" length="10" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="cousubfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cousubns" type="varchar" length="8" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cnectafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="nectafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="nctadvfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="numeric" length="14" decimal="0" jt="2" />
			<column name="awater" type="numeric" length="14" decimal="0" jt="2" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="cousub_pkey" unique="PRIMARY_KEY" >
				<column name="cosbidfp" />
			</index>
			<index name="uidx_cousub_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="tige_cousub_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="direction_lookup" >
			<column name="name" type="varchar" length="20" decimal="0" jt="12" mandatory="y" />
			<column name="abbrev" type="varchar" length="3" decimal="0" jt="12" />
			<index name="direction_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="name" />
			</index>
			<index name="direction_lookup_abbrev_idx" unique="NORMAL" >
				<column name="abbrev" />
			</index>
		</table>
		<table name="edges" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tlid" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="tfidl" type="numeric" length="10" decimal="0" jt="2" />
			<column name="tfidr" type="numeric" length="10" decimal="0" jt="2" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="fullname" type="varchar" length="100" decimal="0" jt="12" />
			<column name="smid" type="varchar" length="22" decimal="0" jt="12" />
			<column name="lfromadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="ltoadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="rfromadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="rtoadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="zipl" type="varchar" length="5" decimal="0" jt="12" />
			<column name="zipr" type="varchar" length="5" decimal="0" jt="12" />
			<column name="featcat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="hydroflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="railflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="roadflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="olfflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="passflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="divroad" type="varchar" length="1" decimal="0" jt="12" />
			<column name="exttyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="ttyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="deckedroad" type="varchar" length="1" decimal="0" jt="12" />
			<column name="artpath" type="varchar" length="1" decimal="0" jt="12" />
			<column name="persist" type="varchar" length="1" decimal="0" jt="12" />
			<column name="gcseflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offsetl" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offsetr" type="varchar" length="1" decimal="0" jt="12" />
			<column name="tnidf" type="numeric" length="10" decimal="0" jt="2" />
			<column name="tnidt" type="numeric" length="10" decimal="0" jt="2" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="edges_pkey" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_edges_tlid" unique="NORMAL" >
				<column name="tlid" />
			</index>
			<index name="idx_tiger_edges_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="idx_tiger_edges_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTILINESTRING&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="faces" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="tfid" type="numeric" length="10" decimal="0" jt="2" />
			<column name="statefp00" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce00" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blkgrpce00" type="varchar" length="1" decimal="0" jt="12" />
			<column name="blockce00" type="varchar" length="4" decimal="0" jt="12" />
			<column name="cousubfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="submcdfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="conctyfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="placefp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhce00" type="varchar" length="4" decimal="0" jt="12" />
			<column name="comptyp00" type="varchar" length="1" decimal="0" jt="12" />
			<column name="trsubfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="trsubce00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="anrcfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="elsdlea00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="scsdlea00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="unsdlea00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="uace00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cd108fp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="sldust00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="sldlst00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="vtdst00" type="varchar" length="6" decimal="0" jt="12" />
			<column name="zcta5ce00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="tazce00" type="varchar" length="6" decimal="0" jt="12" />
			<column name="ugace00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="puma5ce00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blkgrpce" type="varchar" length="1" decimal="0" jt="12" />
			<column name="blockce" type="varchar" length="4" decimal="0" jt="12" />
			<column name="cousubfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="submcdfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="conctyfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="placefp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhce" type="varchar" length="4" decimal="0" jt="12" />
			<column name="comptyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="trsubfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="trsubce" type="varchar" length="3" decimal="0" jt="12" />
			<column name="anrcfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="ttractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="tblkgpce" type="varchar" length="1" decimal="0" jt="12" />
			<column name="elsdlea" type="varchar" length="5" decimal="0" jt="12" />
			<column name="scsdlea" type="varchar" length="5" decimal="0" jt="12" />
			<column name="unsdlea" type="varchar" length="5" decimal="0" jt="12" />
			<column name="uace" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cd111fp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="sldust" type="varchar" length="3" decimal="0" jt="12" />
			<column name="sldlst" type="varchar" length="3" decimal="0" jt="12" />
			<column name="vtdst" type="varchar" length="6" decimal="0" jt="12" />
			<column name="zcta5ce" type="varchar" length="5" decimal="0" jt="12" />
			<column name="tazce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="ugace" type="varchar" length="5" decimal="0" jt="12" />
			<column name="puma5ce" type="varchar" length="5" decimal="0" jt="12" />
			<column name="csafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="cbsafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="metdivfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cnectafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="nectafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="nctadvfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="lwflag" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offset" type="varchar" length="1" decimal="0" jt="12" />
			<column name="atotal" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="faces_pkey" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_faces_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="idx_tiger_faces_tfid" unique="NORMAL" >
				<column name="tfid" />
			</index>
			<index name="tiger_faces_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="featnames" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="tlid" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="fullname" type="varchar" length="100" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="predirabrv" type="varchar" length="15" decimal="0" jt="12" />
			<column name="pretypabrv" type="varchar" length="50" decimal="0" jt="12" />
			<column name="prequalabr" type="varchar" length="15" decimal="0" jt="12" />
			<column name="sufdirabrv" type="varchar" length="15" decimal="0" jt="12" />
			<column name="suftypabrv" type="varchar" length="50" decimal="0" jt="12" />
			<column name="sufqualabr" type="varchar" length="15" decimal="0" jt="12" />
			<column name="predir" type="varchar" length="2" decimal="0" jt="12" />
			<column name="pretyp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="prequal" type="varchar" length="2" decimal="0" jt="12" />
			<column name="sufdir" type="varchar" length="2" decimal="0" jt="12" />
			<column name="suftyp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="sufqual" type="varchar" length="2" decimal="0" jt="12" />
			<column name="linearid" type="varchar" length="22" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="paflag" type="varchar" length="1" decimal="0" jt="12" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<index name="featnames_pkey" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_featnames_tlid_statefp" unique="NORMAL" >
				<column name="tlid" />
				<column name="statefp" />
			</index>
		</table>
		<table name="geocode_settings" >
			<column name="name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="setting" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="unit" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="category" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="short_desc" type="text" length="2147483647" decimal="0" jt="12" />
			<index name="geocode_settings_pkey" unique="PRIMARY_KEY" >
				<column name="name" />
			</index>
		</table>
		<table name="loader_lookuptables" >
			<column name="lookup_name" type="text" length="2147483647" decimal="0" jt="12" mandatory="y" >
				<comment><![CDATA[This is the table name to inherit from and suffix of resulting output table -- how the table will be named --  edges here would mean -- ma_edges , pa_edges etc. except in the case of national tables. national level tables have no prefix]]></comment>
			</column>
			<column name="process_order" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo>1000</defo>
			</column>
			<column name="table_name" type="text" length="2147483647" decimal="0" jt="12" >
				<comment><![CDATA[suffix of the tables to load e.g.  edges would load all tables like *edges.dbf(shp)  -- so tl_2010_42129_edges.dbf .  ]]></comment>
			</column>
			<column name="single_mode" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>true</defo>
			</column>
			<column name="load" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>true</defo>
				<comment><![CDATA[Whether or not to load the table.  For states and zcta5 (you may just want to download states10, zcta510 nationwide file manually) load your own into a single table that inherits from tiger.states, tiger.zcta5.  You'll get improved performance for some geocoding cases.]]></comment>
			</column>
			<column name="level_county" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<column name="level_state" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<column name="level_nation" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
				<comment><![CDATA[These are tables that contain all data for the whole US so there is just a single file]]></comment>
			</column>
			<column name="post_load_process" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="single_geom_mode" type="bool" length="1" decimal="0" jt="-7" >
				<defo>false</defo>
			</column>
			<column name="insert_mode" type="char" length="1" decimal="0" jt="1" mandatory="y" >
				<defo>&#039;c&#039;::bpchar</defo>
			</column>
			<column name="pre_load_process" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="columns_exclude" type="_text" length="2147483647" decimal="0" jt="2003" >
				<comment><![CDATA[List of columns to exclude as an array. This is excluded from both input table and output table and rest of columns remaining are assumed to be in same order in both tables. gid, geoid,cpi,suffix1ce are excluded if no columns are specified.]]></comment>
			</column>
			<column name="website_root_override" type="text" length="2147483647" decimal="0" jt="12" >
				<comment><![CDATA[Path to use for wget instead of that specified in year table.  Needed currently for zcta where they release that only for 2000 and 2010]]></comment>
			</column>
			<index name="loader_lookuptables_pkey" unique="PRIMARY_KEY" >
				<column name="lookup_name" />
			</index>
		</table>
		<table name="loader_platform" >
			<column name="os" type="varchar" length="50" decimal="0" jt="12" mandatory="y" />
			<column name="declare_sect" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="pgbin" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="wget" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="unzip_command" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="psql" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="path_sep" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="loader" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="environ_set_command" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="county_process_command" type="text" length="2147483647" decimal="0" jt="12" />
			<index name="loader_platform_pkey" unique="PRIMARY_KEY" >
				<column name="os" />
			</index>
		</table>
		<table name="loader_variables" >
			<column name="tiger_year" type="varchar" length="4" decimal="0" jt="12" mandatory="y" />
			<column name="website_root" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="staging_fold" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="data_schema" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="staging_schema" type="text" length="2147483647" decimal="0" jt="12" />
			<index name="loader_variables_pkey" unique="PRIMARY_KEY" >
				<column name="tiger_year" />
			</index>
		</table>
		<table name="pagc_gaz" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="seq" type="integer" length="10" decimal="0" jt="4" />
			<column name="word" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="stdword" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="token" type="integer" length="10" decimal="0" jt="4" />
			<column name="is_custom" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>true</defo>
			</column>
			<index name="pagc_gaz_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="pagc_lex" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="seq" type="integer" length="10" decimal="0" jt="4" />
			<column name="word" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="stdword" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="token" type="integer" length="10" decimal="0" jt="4" />
			<column name="is_custom" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>true</defo>
			</column>
			<index name="pagc_lex_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="pagc_rules" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="rule" type="text" length="2147483647" decimal="0" jt="12" />
			<column name="is_custom" type="bool" length="1" decimal="0" jt="-7" >
				<defo>true</defo>
			</column>
			<index name="pagc_rules_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
		</table>
		<table name="place" >
			<column name="plcidfp" type="varchar" length="7" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="placefp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="placens" type="varchar" length="8" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="cpi" type="varchar" length="1" decimal="0" jt="12" />
			<column name="pcicbsa" type="varchar" length="1" decimal="0" jt="12" />
			<column name="pcinecta" type="varchar" length="1" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="awater" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="place_pkey" unique="PRIMARY_KEY" >
				<column name="plcidfp" />
			</index>
			<index name="uidx_tiger_place_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="tiger_place_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="place_lookup" >
			<column name="st_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="pl_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="state" type="varchar" length="2" decimal="0" jt="12" />
			<column name="name" type="varchar" length="90" decimal="0" jt="12" />
			<index name="place_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="st_code" />
				<column name="pl_code" />
			</index>
			<index name="place_lookup_state_idx" unique="NORMAL" >
				<column name="state" />
			</index>
		</table>
		<table name="secondary_unit_lookup" >
			<column name="name" type="varchar" length="20" decimal="0" jt="12" mandatory="y" />
			<column name="abbrev" type="varchar" length="5" decimal="0" jt="12" />
			<index name="secondary_unit_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="name" />
			</index>
			<index name="secondary_unit_lookup_abbrev_idx" unique="NORMAL" >
				<column name="abbrev" />
			</index>
		</table>
		<table name="state" >
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="region" type="varchar" length="2" decimal="0" jt="12" />
			<column name="division" type="varchar" length="2" decimal="0" jt="12" />
			<column name="statens" type="varchar" length="8" decimal="0" jt="12" />
			<column name="stusps" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="awater" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_tiger_state" unique="PRIMARY_KEY" >
				<column name="statefp" />
			</index>
			<index name="uidx_tiger_state_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="uidx_tiger_state_stusps" unique="UNIQUE" >
				<column name="stusps" />
			</index>
			<index name="idx_tiger_state_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="state_lookup" >
			<column name="st_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="40" decimal="0" jt="12" />
			<column name="abbrev" type="varchar" length="3" decimal="0" jt="12" />
			<column name="statefp" type="char" length="2" decimal="0" jt="1" />
			<index name="state_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="st_code" />
			</index>
			<index name="state_lookup_abbrev_key" unique="UNIQUE" >
				<column name="abbrev" />
			</index>
			<index name="state_lookup_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
			<index name="state_lookup_statefp_key" unique="UNIQUE" >
				<column name="statefp" />
			</index>
		</table>
		<table name="street_type_lookup" >
			<column name="name" type="varchar" length="50" decimal="0" jt="12" mandatory="y" />
			<column name="abbrev" type="varchar" length="50" decimal="0" jt="12" />
			<column name="is_hw" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<index name="street_type_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="name" />
			</index>
			<index name="street_type_lookup_abbrev_idx" unique="NORMAL" >
				<column name="abbrev" />
			</index>
		</table>
		<table name="tabblock" >
			<comment><![CDATA[census blocks - $Id: census_loader.sql 11760 2013-08-10 06:25:55Z robe $]]></comment>
			<column name="tabblock_id" type="varchar" length="16" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blockce" type="varchar" length="4" decimal="0" jt="12" />
			<column name="name" type="varchar" length="20" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="ur" type="varchar" length="1" decimal="0" jt="12" />
			<column name="uace" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="tabblock_pkey" unique="PRIMARY_KEY" >
				<column name="tabblock_id" />
			</index>
			<constraint name="enforce_dims_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="tract" >
			<comment><![CDATA[census tracts - $Id: census_loader.sql 11760 2013-08-10 06:25:55Z robe $]]></comment>
			<column name="tract_id" type="varchar" length="11" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="name" type="varchar" length="7" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="20" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="tract_pkey" unique="PRIMARY_KEY" >
				<column name="tract_id" />
			</index>
			<constraint name="enforce_dims_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="zcta5" >
			<column name="zcta5ce" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="partflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_tiger_zcta5_zcta5ce" unique="PRIMARY_KEY" >
				<column name="zcta5ce" />
				<column name="statefp" />
			</index>
			<index name="uidx_tiger_zcta5_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<constraint name="enforce_dims_the_geom" >
				<string>st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_srid_the_geom" >
				<string>st_srid(the_geom) = 4269</string>
			</constraint>
		</table>
		<table name="zip_lookup" >
			<column name="zip" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="st_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="state" type="varchar" length="2" decimal="0" jt="12" />
			<column name="co_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="county" type="varchar" length="90" decimal="0" jt="12" />
			<column name="cs_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="cousub" type="varchar" length="90" decimal="0" jt="12" />
			<column name="pl_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="place" type="varchar" length="90" decimal="0" jt="12" />
			<column name="cnt" type="integer" length="10" decimal="0" jt="4" />
			<index name="zip_lookup_pkey" unique="PRIMARY_KEY" >
				<column name="zip" />
			</index>
		</table>
		<table name="zip_lookup_all" >
			<column name="zip" type="integer" length="10" decimal="0" jt="4" />
			<column name="st_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="state" type="varchar" length="2" decimal="0" jt="12" />
			<column name="co_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="county" type="varchar" length="90" decimal="0" jt="12" />
			<column name="cs_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="cousub" type="varchar" length="90" decimal="0" jt="12" />
			<column name="pl_code" type="integer" length="10" decimal="0" jt="4" />
			<column name="place" type="varchar" length="90" decimal="0" jt="12" />
			<column name="cnt" type="integer" length="10" decimal="0" jt="4" />
		</table>
		<table name="zip_lookup_base" >
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="state" type="varchar" length="40" decimal="0" jt="12" />
			<column name="county" type="varchar" length="90" decimal="0" jt="12" />
			<column name="city" type="varchar" length="90" decimal="0" jt="12" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<index name="zip_lookup_base_pkey" unique="PRIMARY_KEY" >
				<column name="zip" />
			</index>
		</table>
		<table name="zip_state" >
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="stusps" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<index name="zip_state_pkey" unique="PRIMARY_KEY" >
				<column name="zip" />
				<column name="stusps" />
			</index>
		</table>
		<table name="zip_state_loc" >
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="stusps" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="place" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<index name="zip_state_loc_pkey" unique="PRIMARY_KEY" >
				<column name="zip" />
				<column name="stusps" />
				<column name="place" />
			</index>
		</table>
		<sequence name="addr_gid_seq" start="1" />
		<sequence name="addrfeat_gid_seq" start="1" />
		<sequence name="bg_gid_seq" start="1" />
		<sequence name="county_gid_seq" start="1" />
		<sequence name="cousub_gid_seq" start="1" />
		<sequence name="edges_gid_seq" start="1" />
		<sequence name="faces_gid_seq" start="1" />
		<sequence name="featnames_gid_seq" start="1" />
		<sequence name="pagc_gaz_id_seq" start="1" />
		<sequence name="pagc_lex_id_seq" start="1" />
		<sequence name="pagc_rules_id_seq" start="1" />
		<sequence name="place_gid_seq" start="1" />
		<sequence name="state_gid_seq" start="1" />
		<sequence name="tabblock_gid_seq" start="1" />
		<sequence name="tract_gid_seq" start="1" />
		<sequence name="zcta5_gid_seq" start="1" />
		<function name="count_words" id="Function_2c8af104" isSystem="false" />
		<function name="create_census_base_tables" id="Function_28639ae2" isSystem="false" />
		<function name="cull_null" id="Function_b057acd" isSystem="false" />
		<function name="diff_zip" id="Function_13050987" isSystem="false" />
		<function name="drop_dupe_featnames_generate_script" id="Function_1f8afe7c" isSystem="false" />
		<function name="drop_indexes_generate_script" id="Function_34a9fd78" isSystem="false" >
			<comment><![CDATA[args: param_schema=tiger_data - Generates a script that drops all non-primary key and non-unique indexes on tiger schema and user specified schema. Defaults schema to tiger_data if no schema is specified.]]></comment>
		</function>
		<function name="drop_nation_tables_generate_script" id="Function_373a76da" isSystem="false" >
			<comment><![CDATA[args: param_schema=tiger_data - Generates a script that drops all tables in the specified schema that start with county_all, state_all or stae code followed by county or state.]]></comment>
		</function>
		<function name="drop_state_tables_generate_script" id="Function_38872b36" isSystem="false" >
			<comment><![CDATA[args: param_state, param_schema=tiger_data - Generates a script that drops all tables in the specified schema that are prefixed with the state abbreviation. Defaults schema to tiger_data if no schema is specified.]]></comment>
		</function>
		<function name="end_soundex" id="Function_975c102" isSystem="false" />
		<function name="geocode" id="Function_239a59fe" isSystem="false" >
			<comment><![CDATA[args: address, max_results=10, restrict_region=NULL, OUT addy, OUT geomout, OUT rating - Takes in an address as a string (or other normalized address) and outputs a set of possible locations which include a point geometry in NAD 83 long lat, a normalized address for each, and the rating. The lower the rating the more likely the match. Results are sorted by lowest rating first. Can optionally pass in maximum results, defaults to 10, and restrict_region (defaults to NULL)]]></comment>
		</function>
		<function name="geocode_001" id="Function_206ce0e" isSystem="false" >
			<comment><![CDATA[args: in_addy, max_results=10, restrict_region=NULL, OUT addy, OUT geomout, OUT rating - Takes in an address as a string (or other normalized address) and outputs a set of possible locations which include a point geometry in NAD 83 long lat, a normalized address for each, and the rating. The lower the rating the more likely the match. Results are sorted by lowest rating first. Can optionally pass in maximum results, defaults to 10, and restrict_region (defaults to NULL)]]></comment>
		</function>
		<function name="geocode_address" id="Function_42c3ae5" isSystem="false" />
		<function name="geocode_intersection" id="Function_10fe929a" isSystem="false" >
			<comment><![CDATA[args:  roadway1,  roadway2,  in_state,  in_city,  in_zip, max_results=10, OUT addy, OUT geomout, OUT rating - Takes in 2 streets that intersect and a state, city, zip, and outputs a set of possible locations on the first cross street that is at the intersection, also includes a point geometry in NAD 83 long lat, a normalized address for each location, and the rating. The lower the rating the more likely the match. Results are sorted by lowest rating first. Can optionally pass in maximum results, defaults to 10]]></comment>
		</function>
		<function name="geocode_location" id="Function_136c2e53" isSystem="false" />
		<function name="get_geocode_setting" id="Function_37251d64" isSystem="false" >
			<comment><![CDATA[args:  setting_name - Returns value of specific setting stored in tiger.geocode_settings table.]]></comment>
		</function>
		<function name="get_last_words" id="Function_159be49f" isSystem="false" />
		<function name="get_tract" id="Function_4fb0871" isSystem="false" >
			<comment><![CDATA[args:  loc_geom,  output_field=name - Returns census tract or field from tract table of where the geometry is located. Default to returning short name of tract.]]></comment>
		</function>
		<function name="greatest_hn" id="Function_39b2d82b" isSystem="false" />
		<function name="includes_address" id="Function_254a130" isSystem="false" />
		<function name="install_geocode_settings" id="Function_11f5993" isSystem="false" />
		<function name="install_missing_indexes" id="Function_1066331a" isSystem="false" >
			<comment><![CDATA[Finds all tables with key columns used in geocoder joins and filter conditions that are missing used indexes on those columns and will add them.]]></comment>
		</function>
		<function name="install_pagc_tables" id="Function_5f72ebe" isSystem="false" />
		<function name="interpolate_from_address" id="Function_385f0a83" isSystem="false" />
		<function name="is_pretype" id="Function_261a32f7" isSystem="false" />
		<function name="least_hn" id="Function_2b756783" isSystem="false" />
		<function name="levenshtein_ignore_case" id="Function_22985db9" isSystem="false" />
		<function name="loader_generate_census_script" id="Function_3a73922a" isSystem="false" >
			<comment><![CDATA[args: param_states, os - Generates a shell script for the specified platform for the specified states that will download Tiger census state tract, bg, and tabblocks data tables, stage and load into tiger_data schema. Each state script is returned as a separate record.]]></comment>
		</function>
		<function name="loader_generate_nation_script" id="Function_37b93449" isSystem="false" >
			<comment><![CDATA[args: os - Generates a shell script for the specified platform that loads in the county and state lookup tables.]]></comment>
		</function>
		<function name="loader_generate_script" id="Function_2b9a9225" isSystem="false" >
			<comment><![CDATA[args: param_states, os - Generates a shell script for the specified platform for the specified states that will download Tiger data, stage and load into tiger_data schema. Each state script is returned as a separate record. Latest version supports Tiger 2010 structural changes and also loads census tract, block groups, and blocks tables.]]></comment>
		</function>
		<function name="loader_load_staged_data" id="Function_16804b4" isSystem="false" />
		<function name="loader_load_staged_data_001" id="Function_f3b7ee" isSystem="false" />
		<function name="loader_macro_replace" id="Function_1b9fcce6" isSystem="false" />
		<function name="location_extract" id="Function_16ad2421" isSystem="false" />
		<function name="location_extract_countysub_exact" id="Function_280cee7e" isSystem="false" />
		<function name="location_extract_countysub_fuzzy" id="Function_744de55" isSystem="false" />
		<function name="location_extract_place_exact" id="Function_3aefc1b0" isSystem="false" />
		<function name="location_extract_place_fuzzy" id="Function_2b36f4b1" isSystem="false" />
		<function name="missing_indexes_generate_script" id="Function_bf97665" isSystem="false" >
			<comment><![CDATA[Finds all tables with key columns used in geocoder joins that are missing indexes on those columns and will output the SQL DDL to define the index for those tables.]]></comment>
		</function>
		<function name="normalize_address" id="Function_1197c4c6" isSystem="false" >
			<comment><![CDATA[args: in_address - Given a textual street address, returns a composite norm_addy type that has road suffix, prefix and type standardized, street, streetname etc. broken into separate fields. This function will work with just the lookup data packaged with the tiger_geocoder (no need for tiger census data).]]></comment>
		</function>
		<function name="nullable_levenshtein" id="Function_38dde4bd" isSystem="false" />
		<function name="numeric_streets_equal" id="Function_c37adea" isSystem="false" />
		<function name="pagc_normalize_address" id="Function_2199da9" isSystem="false" >
			<comment><![CDATA[args: in_address - Given a textual street address, returns a composite norm_addy type that has road suffix, prefix and type standardized, street, streetname etc. broken into separate fields. This function will work with just the lookup data packaged with the tiger_geocoder (no need for tiger census data). Requires address_standardizer extension.]]></comment>
		</function>
		<function name="pprint_addy" id="Function_7ffb786" isSystem="false" >
			<comment><![CDATA[args: in_addy - Given a norm_addy composite type object, returns a pretty print representation of it. Usually used in conjunction with normalize_address.]]></comment>
		</function>
		<function name="rate_attributes" id="Function_3aff8967" isSystem="false" />
		<function name="rate_attributes_001" id="Function_27a9571d" isSystem="false" />
		<function name="reverse_geocode" id="Function_3119bdbc" isSystem="false" >
			<comment><![CDATA[args: pt, include_strnum_range=false, OUT intpt, OUT addy, OUT street - Takes a geometry point in a known spatial ref sys and returns a record containing an array of theoretically possible addresses and an array of cross streets. If include_strnum_range = true, includes the street range in the cross streets.]]></comment>
		</function>
		<function name="set_geocode_setting" id="Function_139b4712" isSystem="false" >
			<comment><![CDATA[args:  setting_name,  setting_value - Sets a setting that affects behavior of geocoder functions.]]></comment>
		</function>
		<function name="setsearchpathforinstall" id="Function_143d3f9d" isSystem="false" />
		<function name="state_extract" id="Function_2b2874e4" isSystem="false" />
		<function name="topology_load_tiger" id="Function_3113aff1" isSystem="false" >
			<comment><![CDATA[args: topo_name, region_type, region_id - Loads a defined region of tiger data into a PostGIS Topology and transforming the tiger data to spatial reference of the topology and snapping to the precision tolerance of the topology.]]></comment>
		</function>
		<function name="utmzone" id="Function_5b5d1b4" isSystem="false" />
		<function name="zip_range" id="Function_2280df83" isSystem="false" />
	</schema>
	<schema name="tiger_data" catalogname="census" schemaname="tiger_data" >
		<table name="county_all" >
			<column name="cntyidfp" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="countyns" type="varchar" length="8" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="csafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="cbsafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="metdivfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_tiger_data_county_all" unique="PRIMARY_KEY" >
				<column name="cntyidfp" />
			</index>
			<index name="uidx_tiger_data_county_all_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="uidx_tiger_data_county_all_statefp_countyfp" unique="UNIQUE" >
				<column name="statefp" />
				<column name="countyfp" />
			</index>
			<index name="tiger_data_county_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
		</table>
		<table name="county_all_lookup" >
			<column name="st_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="co_code" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="state" type="varchar" length="2" decimal="0" jt="12" />
			<column name="name" type="varchar" length="90" decimal="0" jt="12" />
			<index name="pk_county_all_lookup" unique="PRIMARY_KEY" >
				<column name="st_code" />
				<column name="co_code" />
			</index>
		</table>
		<table name="mo_addr" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="tlid" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="fromhn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="tohn" type="varchar" length="12" decimal="0" jt="12" />
			<column name="side" type="varchar" length="1" decimal="0" jt="12" />
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" />
			<column name="plus4" type="varchar" length="4" decimal="0" jt="12" />
			<column name="fromtyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="totyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="fromarmid" type="integer" length="10" decimal="0" jt="4" />
			<column name="toarmid" type="integer" length="10" decimal="0" jt="4" />
			<column name="arid" type="varchar" length="22" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" >
				<defo>&#039;29&#039;::character varying</defo>
			</column>
			<index name="pk_mo_addr" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_data_mo_addr_tlid_statefp" unique="NORMAL" >
				<column name="tlid" />
				<column name="statefp" />
			</index>
			<index name="idx_tiger_data_mo_addr_zip" unique="NORMAL" >
				<column name="zip" />
			</index>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_bg" >
			<column name="bg_id" type="varchar" length="12" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blkgrpce" type="varchar" length="1" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="13" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_bg" unique="PRIMARY_KEY" >
				<column name="bg_id" />
			</index>
			<index name="idx_tiger_data_mo_bg_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="tiger_data_mo_bg_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_cousub" >
			<column name="cosbidfp" type="varchar" length="10" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="cousubfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cousubns" type="varchar" length="8" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cnectafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="nectafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="nctadvfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="numeric" length="14" decimal="0" jt="2" />
			<column name="awater" type="numeric" length="14" decimal="0" jt="2" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_cousub" unique="PRIMARY_KEY" >
				<column name="cosbidfp" />
			</index>
			<index name="uidx_mo_cousub_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_data_mo_cousub_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="idx_tiger_data_mo_cousub_cousubfp" unique="NORMAL" >
				<column name="cousubfp" />
			</index>
			<index name="tiger_data_mo_cousub_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_the_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_the_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_edges" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tlid" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="tfidl" type="numeric" length="10" decimal="0" jt="2" />
			<column name="tfidr" type="numeric" length="10" decimal="0" jt="2" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="fullname" type="varchar" length="100" decimal="0" jt="12" />
			<column name="smid" type="varchar" length="22" decimal="0" jt="12" />
			<column name="lfromadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="ltoadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="rfromadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="rtoadd" type="varchar" length="12" decimal="0" jt="12" />
			<column name="zipl" type="varchar" length="5" decimal="0" jt="12" />
			<column name="zipr" type="varchar" length="5" decimal="0" jt="12" />
			<column name="featcat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="hydroflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="railflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="roadflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="olfflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="passflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="divroad" type="varchar" length="1" decimal="0" jt="12" />
			<column name="exttyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="ttyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="deckedroad" type="varchar" length="1" decimal="0" jt="12" />
			<column name="artpath" type="varchar" length="1" decimal="0" jt="12" />
			<column name="persist" type="varchar" length="1" decimal="0" jt="12" />
			<column name="gcseflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offsetl" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offsetr" type="varchar" length="1" decimal="0" jt="12" />
			<column name="tnidf" type="numeric" length="10" decimal="0" jt="2" />
			<column name="tnidt" type="numeric" length="10" decimal="0" jt="2" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_edges" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_data_mo_edges_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="idx_tiger_data_mo_edges_tfidl" unique="NORMAL" >
				<column name="tfidl" />
			</index>
			<index name="idx_tiger_data_mo_edges_tlid" unique="NORMAL" >
				<column name="tlid" />
			</index>
			<index name="idx_tiger_data_mo_edges_zipl" unique="NORMAL" >
				<column name="zipl" />
			</index>
			<index name="idx_tiger_data_mo_edges_zipr" unique="NORMAL" >
				<column name="zipr" />
			</index>
			<index name="idx_tiger_data_mo_edgestfidr" unique="NORMAL" >
				<column name="tfidr" />
			</index>
			<index name="tiger_data_mo_edges_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_the_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTILINESTRING&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_the_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_faces" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="tfid" type="numeric" length="10" decimal="0" jt="2" />
			<column name="statefp00" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce00" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blkgrpce00" type="varchar" length="1" decimal="0" jt="12" />
			<column name="blockce00" type="varchar" length="4" decimal="0" jt="12" />
			<column name="cousubfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="submcdfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="conctyfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="placefp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhce00" type="varchar" length="4" decimal="0" jt="12" />
			<column name="comptyp00" type="varchar" length="1" decimal="0" jt="12" />
			<column name="trsubfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="trsubce00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="anrcfp00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="elsdlea00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="scsdlea00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="unsdlea00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="uace00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cd108fp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="sldust00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="sldlst00" type="varchar" length="3" decimal="0" jt="12" />
			<column name="vtdst00" type="varchar" length="6" decimal="0" jt="12" />
			<column name="zcta5ce00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="tazce00" type="varchar" length="6" decimal="0" jt="12" />
			<column name="ugace00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="puma5ce00" type="varchar" length="5" decimal="0" jt="12" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blkgrpce" type="varchar" length="1" decimal="0" jt="12" />
			<column name="blockce" type="varchar" length="4" decimal="0" jt="12" />
			<column name="cousubfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="submcdfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="conctyfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="placefp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="aiannhce" type="varchar" length="4" decimal="0" jt="12" />
			<column name="comptyp" type="varchar" length="1" decimal="0" jt="12" />
			<column name="trsubfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="trsubce" type="varchar" length="3" decimal="0" jt="12" />
			<column name="anrcfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="ttractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="tblkgpce" type="varchar" length="1" decimal="0" jt="12" />
			<column name="elsdlea" type="varchar" length="5" decimal="0" jt="12" />
			<column name="scsdlea" type="varchar" length="5" decimal="0" jt="12" />
			<column name="unsdlea" type="varchar" length="5" decimal="0" jt="12" />
			<column name="uace" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cd111fp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="sldust" type="varchar" length="3" decimal="0" jt="12" />
			<column name="sldlst" type="varchar" length="3" decimal="0" jt="12" />
			<column name="vtdst" type="varchar" length="6" decimal="0" jt="12" />
			<column name="zcta5ce" type="varchar" length="5" decimal="0" jt="12" />
			<column name="tazce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="ugace" type="varchar" length="5" decimal="0" jt="12" />
			<column name="puma5ce" type="varchar" length="5" decimal="0" jt="12" />
			<column name="csafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="cbsafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="metdivfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="cnectafp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="nectafp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="nctadvfp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="lwflag" type="varchar" length="1" decimal="0" jt="12" />
			<column name="offset" type="varchar" length="1" decimal="0" jt="12" />
			<column name="atotal" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_faces" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_data_mo_faces_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="idx_tiger_data_mo_faces_tfid" unique="NORMAL" >
				<column name="tfid" />
			</index>
			<index name="tiger_data_mo_faces_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_the_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_the_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_featnames" >
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="tlid" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="fullname" type="varchar" length="100" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="predirabrv" type="varchar" length="15" decimal="0" jt="12" />
			<column name="pretypabrv" type="varchar" length="50" decimal="0" jt="12" />
			<column name="prequalabr" type="varchar" length="15" decimal="0" jt="12" />
			<column name="sufdirabrv" type="varchar" length="15" decimal="0" jt="12" />
			<column name="suftypabrv" type="varchar" length="50" decimal="0" jt="12" />
			<column name="sufqualabr" type="varchar" length="15" decimal="0" jt="12" />
			<column name="predir" type="varchar" length="2" decimal="0" jt="12" />
			<column name="pretyp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="prequal" type="varchar" length="2" decimal="0" jt="12" />
			<column name="sufdir" type="varchar" length="2" decimal="0" jt="12" />
			<column name="suftyp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="sufqual" type="varchar" length="2" decimal="0" jt="12" />
			<column name="linearid" type="varchar" length="22" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="paflag" type="varchar" length="1" decimal="0" jt="12" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" >
				<defo>&#039;29&#039;::character varying</defo>
			</column>
			<index name="pk_mo_featnames" unique="PRIMARY_KEY" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_data_mo_featnames_tlid_statefp" unique="NORMAL" >
				<column name="tlid" />
				<column name="statefp" />
			</index>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_place" >
			<column name="plcidfp" type="varchar" length="7" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="placefp" type="varchar" length="5" decimal="0" jt="12" />
			<column name="placens" type="varchar" length="8" decimal="0" jt="12" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="cpi" type="varchar" length="1" decimal="0" jt="12" />
			<column name="pcicbsa" type="varchar" length="1" decimal="0" jt="12" />
			<column name="pcinecta" type="varchar" length="1" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="awater" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_place" unique="PRIMARY_KEY" >
				<column name="plcidfp" />
			</index>
			<index name="uidx_mo_place_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="idx_tiger_data_mo_place_placefp" unique="NORMAL" >
				<column name="placefp" />
			</index>
			<index name="tiger_data_mo_place_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_the_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_the_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_tabblock" >
			<column name="tabblock_id" type="varchar" length="16" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="blockce" type="varchar" length="4" decimal="0" jt="12" />
			<column name="name" type="varchar" length="20" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="ur" type="varchar" length="1" decimal="0" jt="12" />
			<column name="uace" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_tabblock" unique="PRIMARY_KEY" >
				<column name="tabblock_id" />
			</index>
			<index name="idx_tiger_data_mo_tabblock_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="tiger_data_mo_tabblock_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_tract" >
			<column name="tract_id" type="varchar" length="11" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="countyfp" type="varchar" length="3" decimal="0" jt="12" />
			<column name="tractce" type="varchar" length="6" decimal="0" jt="12" />
			<column name="name" type="varchar" length="7" decimal="0" jt="12" />
			<column name="namelsad" type="varchar" length="20" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_tract" unique="PRIMARY_KEY" >
				<column name="tract_id" />
			</index>
			<index name="idx_tiger_data_mo_tract_countyfp" unique="NORMAL" >
				<column name="countyfp" />
			</index>
			<index name="tiger_data_mo_tract_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_zcta5" >
			<column name="zcta5ce" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="classfp" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="float8" length="17" decimal="17" jt="6" />
			<column name="awater" type="float8" length="17" decimal="17" jt="6" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="partflg" type="varchar" length="1" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_mo_zcta5" unique="PRIMARY_KEY" >
				<column name="zcta5ce" />
				<column name="statefp" />
			</index>
			<index name="uidx_mo_zcta5_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="tiger_data_mo_zcta5_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_the_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_the_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_zip_lookup_base" >
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="state" type="varchar" length="40" decimal="0" jt="12" mandatory="y" />
			<column name="county" type="varchar" length="90" decimal="0" jt="12" mandatory="y" />
			<column name="city" type="varchar" length="90" decimal="0" jt="12" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<index name="pk_mo_zip_state_loc_city" unique="PRIMARY_KEY" >
				<column name="zip" />
				<column name="state" />
				<column name="county" />
				<column name="city" />
				<column name="statefp" />
			</index>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_zip_state" >
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="stusps" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<index name="pk_mo_zip_state" unique="PRIMARY_KEY" >
				<column name="zip" />
				<column name="stusps" />
			</index>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="mo_zip_state_loc" >
			<column name="zip" type="varchar" length="5" decimal="0" jt="12" mandatory="y" />
			<column name="stusps" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="place" type="varchar" length="100" decimal="0" jt="12" mandatory="y" />
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" />
			<index name="pk_mo_zip_state_loc" unique="PRIMARY_KEY" >
				<column name="zip" />
				<column name="stusps" />
				<column name="place" />
			</index>
			<constraint name="chk_statefp" >
				<string>(statefp)::text = &#039;29&#039;::text</string>
			</constraint>
		</table>
		<table name="state_all" >
			<column name="statefp" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="gid" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="region" type="varchar" length="2" decimal="0" jt="12" />
			<column name="division" type="varchar" length="2" decimal="0" jt="12" />
			<column name="statens" type="varchar" length="8" decimal="0" jt="12" />
			<column name="stusps" type="varchar" length="2" decimal="0" jt="12" mandatory="y" />
			<column name="name" type="varchar" length="100" decimal="0" jt="12" />
			<column name="lsad" type="varchar" length="2" decimal="0" jt="12" />
			<column name="mtfcc" type="varchar" length="5" decimal="0" jt="12" />
			<column name="funcstat" type="varchar" length="1" decimal="0" jt="12" />
			<column name="aland" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="awater" type="bigint" length="19" decimal="0" jt="-5" />
			<column name="intptlat" type="varchar" length="11" decimal="0" jt="12" />
			<column name="intptlon" type="varchar" length="12" decimal="0" jt="12" />
			<column name="the_geom" type="geometry" length="2147483647" decimal="0" jt="1111" />
			<index name="pk_state_all" unique="PRIMARY_KEY" >
				<column name="statefp" />
			</index>
			<index name="uidx_state_all_gid" unique="UNIQUE" >
				<column name="gid" />
			</index>
			<index name="uidx_state_all_stusps" unique="UNIQUE" >
				<column name="stusps" />
			</index>
			<index name="tiger_data_state_all_the_geom_gist" unique="NORMAL" >
				<column name="the_geom" />
			</index>
			<constraint name="enforce_srid_the_geom" >
				<string>public.st_srid(the_geom) = 4269</string>
			</constraint>
			<constraint name="enforce_geotype_the_geom" >
				<string>(public.geometrytype(the_geom) = &#039;MULTIPOLYGON&#039;::text) OR (the_geom IS NULL)</string>
			</constraint>
			<constraint name="enforce_dims_the_geom" >
				<string>public.st_ndims(the_geom) = 2</string>
			</constraint>
		</table>
	</schema>
	<schema name="tiger_staging" catalogname="census" schemaname="tiger_staging" />
	<schema name="topology" catalogname="census" schemaname="topology" >
		<table name="layer" >
			<column name="topology_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="layer_id" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="schema_name" type="varchar" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="table_name" type="varchar" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="feature_column" type="varchar" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="feature_type" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="level" type="integer" length="10" decimal="0" jt="4" mandatory="y" >
				<defo>0</defo>
			</column>
			<column name="child_id" type="integer" length="10" decimal="0" jt="4" />
			<index name="layer_pkey" unique="PRIMARY_KEY" >
				<column name="topology_id" />
				<column name="layer_id" />
			</index>
			<index name="layer_schema_name_table_name_feature_column_key" unique="UNIQUE" >
				<column name="schema_name" />
				<column name="table_name" />
				<column name="feature_column" />
			</index>
			<fk name="layer_topology_id_fkey" to_schema="topology" to_table="topology" >
				<fk_column name="topology_id" pk="id" />
			</fk>
		</table>
		<table name="topology" >
			<column name="id" type="serial" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="name" type="varchar" length="2147483647" decimal="0" jt="12" mandatory="y" />
			<column name="srid" type="integer" length="10" decimal="0" jt="4" mandatory="y" />
			<column name="precision" type="float8" length="17" decimal="17" jt="6" mandatory="y" />
			<column name="hasz" type="bool" length="1" decimal="0" jt="-7" mandatory="y" >
				<defo>false</defo>
			</column>
			<index name="topology_pkey" unique="PRIMARY_KEY" >
				<column name="id" />
			</index>
			<index name="topology_name_key" unique="UNIQUE" >
				<column name="name" />
			</index>
		</table>
		<sequence name="topology_id_seq" start="1" />
		<trigger name="layer_integrity_checks" table="layer" id="Trigger_1febbac" isSystem="false" >
			<string><![CDATA[CREATE TRIGGER layer_integrity_checks BEFORE DELETE OR UPDATE ON layer FOR EACH ROW EXECUTE PROCEDURE layertrigger()]]></string>
		</trigger>
		<trigger name="layer_integrity_checks_001" table="layer" id="Trigger_17bbf141" isSystem="false" />
		<function name="_asgmledge" id="Function_20c4f15a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology._asgmledge(edge_id integer, start_node integer, end_node integer, line geometry, visitedtable regclass, nsprefix_in text, prec integer, options integer, idprefix text, gmlver integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  visited bool;
  nsprefix text;
  gml text;
BEGIN
  nsprefix := 'gml:';
  IF nsprefix_in IS NOT NULL THEN
    IF nsprefix_in = '' THEN
      nsprefix = nsprefix_in;
    ELSE
      nsprefix = nsprefix_in || ':';
    END IF;
  END IF;
  gml := '<' || nsprefix || 'Edge ' || nsprefix
    || 'id="' || idprefix || 'E' || edge_id || '">';
  -- Start node
  gml = gml || '<' || nsprefix || 'directedNode orientation="-"';
  -- Do visited bookkeeping if visitedTable was given
  visited = NULL;
  IF visitedTable IS NOT NULL THEN
    EXECUTE 'SELECT true FROM '
            || visitedTable::text
            || ' WHERE element_type = 1 AND element_id = '
            || start_node LIMIT 1 INTO visited;
    IF visited IS NOT NULL THEN
      gml = gml || ' xlink:href="#' || idprefix || 'N' || start_node || '" />';
    ELSE
      -- Mark as visited 
      EXECUTE 'INSERT INTO ' || visitedTable::text
        || '(element_type, element_id) VALUES (1, '
        || start_node || ')';
    END IF;
  END IF;
  IF visited IS NULL THEN
    gml = gml || '>';
    gml = gml || topology._AsGMLNode(start_node, NULL, nsprefix_in,
                                     prec, options, idprefix, gmlver);
    gml = gml || '</' || nsprefix || 'directedNode>';
  END IF;
  -- End node
  gml = gml || '<' || nsprefix || 'directedNode';
  -- Do visited bookkeeping if visitedTable was given
  visited = NULL;
  IF visitedTable IS NOT NULL THEN
    EXECUTE 'SELECT true FROM '
            || visitedTable::text
            || ' WHERE element_type = 1 AND element_id = '
            || end_node LIMIT 1 INTO visited;
    IF visited IS NOT NULL THEN
      gml = gml || ' xlink:href="#' || idprefix || 'N' || end_node || '" />';
    ELSE
      -- Mark as visited 
      EXECUTE 'INSERT INTO ' || visitedTable::text
        || '(element_type, element_id) VALUES (1, '
        || end_node || ')';
    END IF;
  END IF;
  IF visited IS NULL THEN
    gml = gml || '>';
    gml = gml || topology._AsGMLNode(end_node, NULL, nsprefix_in,
                                     prec, options, idprefix, gmlver);
    gml = gml || '</' || nsprefix || 'directedNode>';
  END IF;
  IF line IS NOT NULL THEN
    gml = gml || '<' || nsprefix || 'curveProperty>'
              || ST_AsGML(gmlver, line, prec, options, nsprefix_in)
              || '</' || nsprefix || 'curveProperty>';
  END IF;
  gml = gml || '</' || nsprefix || 'Edge>';
  RETURN gml;
END
$function$
]]></string>
		</function>
		<function name="_asgmlface" id="Function_48d75ad" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology._asgmlface(toponame text, face_id integer, visitedtable regclass, nsprefix_in text, prec integer, options integer, idprefix text, gmlver integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  visited bool;
  nsprefix text;
  gml text;
  rec RECORD;
  rec2 RECORD;
  bounds geometry;
BEGIN
  nsprefix := 'gml:';
  IF nsprefix_in IS NOT NULL THEN
    IF nsprefix_in = '' THEN
      nsprefix = nsprefix_in;
    ELSE
      nsprefix = nsprefix_in || ':';
    END IF;
  END IF;
  gml := '<' || nsprefix || 'Face ' || nsprefix
    || 'id="' || idprefix || 'F' || face_id || '">';
  -- Construct the face geometry, then for each polygon:
  FOR rec IN SELECT (ST_DumpRings((ST_Dump(ST_ForceRHR(
    topology.ST_GetFaceGeometry(toponame, face_id)))).geom)).geom
  LOOP
      -- Contents of a directed face are the list of edges
      -- that cover the specific ring
      bounds = ST_Boundary(rec.geom);
      FOR rec2 IN EXECUTE
        'SELECT e.*, ST_LineLocatePoint('
        || quote_literal(bounds::text)
        || ', ST_LineInterpolatePoint(e.geom, 0.2)) as pos'
        || ', ST_LineLocatePoint('
        || quote_literal(bounds::text)
        || ', ST_LineInterpolatePoint(e.geom, 0.8)) as pos2 FROM '
        || quote_ident(toponame)
        || '.edge e WHERE ( e.left_face = ' || face_id
        || ' OR e.right_face = ' || face_id
        || ') AND ST_Covers('
        || quote_literal(bounds::text)
        || ', e.geom) ORDER BY pos'
      LOOP
        gml = gml || '<' || nsprefix || 'directedEdge';
        -- if this edge goes in same direction to the
        --       ring bounds, make it with negative orientation
        IF rec2.pos2 > rec2.pos THEN -- edge goes in same direction
          gml = gml || ' orientation="-"';
        END IF;
        -- Do visited bookkeeping if visitedTable was given
        IF visitedTable IS NOT NULL THEN
          EXECUTE 'SELECT true FROM '
            || visitedTable::text
            || ' WHERE element_type = 2 AND element_id = '
            || rec2.edge_id LIMIT 1 INTO visited;
          IF visited THEN
            -- Use xlink:href if visited
            gml = gml || ' xlink:href="#' || idprefix || 'E'
                      || rec2.edge_id || '" />';
            CONTINUE;
          ELSE
            -- Mark as visited otherwise
            EXECUTE 'INSERT INTO ' || visitedTable::text
              || '(element_type, element_id) VALUES (2, '
              || rec2.edge_id || ')';
          END IF;
        END IF;
        gml = gml || '>';
        gml = gml || topology._AsGMLEdge(rec2.edge_id, rec2.start_node,
                                        rec2.end_node, rec2.geom,
                                        visitedTable, nsprefix_in,
                                        prec, options, idprefix, gmlver);
        gml = gml || '</' || nsprefix || 'directedEdge>';
      END LOOP;
    END LOOP;
  gml = gml || '</' || nsprefix || 'Face>';
  RETURN gml;
END
$function$
]]></string>
		</function>
		<function name="_asgmlnode" id="Function_e4709ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology._asgmlnode(id integer, point geometry, nsprefix_in text, prec integer, options integer, idprefix text, gmlver integer)
 RETURNS text
 LANGUAGE plpgsql
 IMMUTABLE
AS $function$
DECLARE
  nsprefix text;
  gml text;
BEGIN
  nsprefix := 'gml:';
  IF NOT nsprefix_in IS NULL THEN
    IF nsprefix_in = '' THEN
      nsprefix = nsprefix_in;
    ELSE
      nsprefix = nsprefix_in || ':';
    END IF;
  END IF;
  gml := '<' || nsprefix || 'Node ' || nsprefix
    || 'id="' || idprefix || 'N' || id || '"';
  IF point IS NOT NULL THEN
    gml = gml || '>'
              || '<' || nsprefix || 'pointProperty>'
              || ST_AsGML(gmlver, point, prec, options, nsprefix_in)
              || '</' || nsprefix || 'pointProperty>'
              || '</' || nsprefix || 'Node>';
  ELSE
    gml = gml || '/>';
  END IF;
  RETURN gml;
END
$function$
]]></string>
		</function>
		<function name="_st_addfacesplit" id="Function_1b56de5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology._st_addfacesplit(atopology character varying, anedge integer, oface integer, mbr_only boolean)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  fan RECORD;
  newface INTEGER;
  sql TEXT;
  isccw BOOLEAN;
  ishole BOOLEAN;
BEGIN
  IF oface = 0 AND mbr_only THEN

    RETURN NULL;
  END IF;
  SELECT null::int[] as newring_edges,
         null::geometry as shell
  INTO fan;
  SELECT array_agg(edge)
  FROM topology.getringedges(atopology, anedge)
  INTO STRICT fan.newring_edges;


  -- You can't get to the other side of an edge forming a ring 
  IF fan.newring_edges @> ARRAY[-anedge] THEN

    RETURN 0;
  END IF;


  sql := 'WITH ids as ( select row_number() over () as seq, edge from unnest('
    || quote_literal(fan.newring_edges::text)
    || '::int[] ) u(edge) ), edges AS ( select CASE WHEN i.edge < 0 THEN ST_Reverse(e.geom) ELSE e.geom END as g FROM ids i left join '
    || quote_ident(atopology) || '.edge_data e ON(e.edge_id = abs(i.edge)) ORDER BY seq) SELECT ST_MakePolygon(ST_MakeLine(g.g)) FROM edges g;';

  EXECUTE sql INTO fan.shell;


  isccw := NOT ST_OrderingEquals(fan.shell, ST_ForceRHR(fan.shell));


  IF oface = 0 THEN
    IF NOT isccw THEN

      RETURN NULL;
    END IF;
  END IF;
  IF mbr_only AND oface != 0 THEN
    -- Update old face mbr (nothing to do if we're opening an hole)
    IF isccw THEN -- {
      sql := 'UPDATE '
        || quote_ident(atopology) || '.face SET mbr = '
        || quote_literal(ST_Envelope(fan.shell)::text)
        || '::geometry WHERE face_id = ' || oface;

    	EXECUTE sql;
    END IF; -- }
    RETURN NULL;
  END IF;
  IF oface != 0 AND NOT isccw THEN -- {
    -- Face created an hole in an outer face
    sql := 'INSERT INTO '
      || quote_ident(atopology) || '.face(mbr) SELECT mbr FROM '
      || quote_ident(atopology)
      || '.face WHERE face_id = ' || oface
      || ' RETURNING face_id';
  ELSE
    sql := 'INSERT INTO '
      || quote_ident(atopology) || '.face(mbr) VALUES ('
      || quote_literal(ST_Envelope(fan.shell)::text)
      || '::geometry) RETURNING face_id';
  END IF; -- }
  -- Insert new face

  EXECUTE sql INTO STRICT newface;
  -- Update forward edges
  sql := 'UPDATE '
    || quote_ident(atopology) || '.edge_data SET left_face = ' || newface
    || ' WHERE left_face = ' || oface || ' AND edge_id = ANY ('
    || quote_literal(array( select +(x) from unnest(fan.newring_edges) u(x) )::text)
    || ')';

  EXECUTE sql;
  -- Update backward edges
  sql := 'UPDATE '
    || quote_ident(atopology) || '.edge_data SET right_face = ' || newface
    || ' WHERE right_face = ' || oface || ' AND edge_id = ANY ('
    || quote_literal(array( select -(x) from unnest(fan.newring_edges) u(x) )::text)
    || ')';

  EXECUTE sql;
  IF oface != 0 AND NOT isccw THEN -- {
    -- face shrinked, must update all non-contained edges and nodes

    ishole := true;
  ELSE

    ishole := false;
  END IF; -- }
  -- Update edges bounding the old face
  sql := 'UPDATE '
    || quote_ident(atopology)
    || '.edge_data SET left_face = CASE WHEN left_face = '
    || oface || ' THEN ' || newface
    || ' ELSE left_face END, right_face = CASE WHEN right_face = '
    || oface || ' THEN ' || newface
    || ' ELSE right_face END WHERE ( left_face = ' || oface
    || ' OR right_face = ' || oface
    || ') AND NOT edge_id = ANY ('
    || quote_literal( array(
        select abs(x) from unnest(fan.newring_edges) u(x)
       )::text )
    || ') AND ';
  IF ishole THEN sql := sql || 'NOT '; END IF;
  sql := sql || '( ' || quote_literal(fan.shell::text)
    || ' && geom AND _ST_Contains(' || quote_literal(fan.shell::text)
    -- We only need to check a single point, but must not be an endpoint
    || '::geometry, ST_LineInterpolatePoint(geom, 0.2)) )';

  EXECUTE sql;
  -- Update isolated nodes in new new face 
  sql := 'UPDATE '
    || quote_ident(atopology) || '.node SET containing_face = ' || newface
    || ' WHERE containing_face = ' || oface 
    || ' AND ';
  IF ishole THEN sql := sql || 'NOT '; END IF;
  sql := sql || 'ST_Contains(' || quote_literal(fan.shell::text) || '::geometry, geom)';

  EXECUTE sql;
  RETURN newface;
END
$function$
]]></string>
		</function>
		<function name="_st_adjacentedges" id="Function_a646e05" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology._st_adjacentedges(atopology character varying, anode integer, anedge integer)
 RETURNS integer[]
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  ret integer[];
BEGIN
  WITH edgestar AS (
    SELECT *, count(*) over () AS cnt
    FROM topology.GetNodeEdges(atopology, anode)
  )
  SELECT ARRAY[ (
      SELECT p.edge AS prev FROM edgestar p
      WHERE p.sequence = CASE WHEN m.sequence-1 < 1 THEN cnt
                         ELSE m.sequence-1 END
    ), (
      SELECT p.edge AS prev FROM edgestar p WHERE p.sequence = ((m.sequence)%cnt)+1
    ) ]
  FROM edgestar m
  WHERE edge = anedge
  INTO ret;
  RETURN ret;
END
$function$
]]></string>
		</function>
		<function name="_st_mintolerance" id="Function_19ae7679" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology._st_mintolerance(ageom geometry)
 RETURNS double precision
 LANGUAGE sql
 IMMUTABLE STRICT
AS $function$
    SELECT 3.6 * power(10,  - ( 15 - log(coalesce(
      nullif(
        greatest(abs(ST_xmin($1)), abs(ST_ymin($1)),
                 abs(ST_xmax($1)), abs(ST_ymax($1))),
        0),
      1)) ));
$function$
CREATE OR REPLACE FUNCTION topology._st_mintolerance(atopology character varying, ageom geometry)
 RETURNS double precision
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  ret FLOAT8;
BEGIN
  SELECT COALESCE(
    NULLIF(precision, 0),
    topology._st_mintolerance($2))
  FROM topology.topology
  WHERE name = $1 INTO ret;
  IF NOT FOUND THEN
    RAISE EXCEPTION
      'No topology with name "%" in topology.topology', atopology;
  END IF;
  return ret;
END;
$function$
]]></string>
		</function>
		<function name="_st_mintolerance_001" id="Function_14ee262a" isSystem="false" />
		<function name="_st_remedgecheck" id="Function_30c81da7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology._st_remedgecheck(tname character varying, tid integer, eid integer, lf integer, rf integer)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
  sql text;
  fidary int[];
  rec RECORD;
BEGIN
  -- Check that no TopoGeometry references the edge being removed
  sql := 'SELECT r.topogeo_id, r.layer_id'
      || ', l.schema_name, l.table_name, l.feature_column '
      || 'FROM topology.layer l INNER JOIN '
      || quote_ident(tname)
      || '.relation r ON (l.layer_id = r.layer_id) '
      || 'WHERE l.level = 0 AND l.feature_type = 2 '
      || ' AND l.topology_id = ' || tid
      || ' AND abs(r.element_id) = ' || eid ;

  FOR rec IN EXECUTE sql LOOP
    RAISE EXCEPTION 'TopoGeom % in layer % (%.%.%) cannot be represented dropping edge %',
            rec.topogeo_id, rec.layer_id,
            rec.schema_name, rec.table_name, rec.feature_column,
            eid;
  END LOOP;
  IF lf != rf THEN -- {
    RAISE NOTICE 'Deletion of edge % joins faces % and %',
                    eid, lf, rf;
    -- check if any topo_geom is defined only by one of the
    -- joined faces. In such case there would be no way to adapt
    -- the definition in case of healing, so we'd have to bail out
    -- 
    fidary = ARRAY[lf, rf];
    sql := 'SELECT t.* from ('
      || 'SELECT r.topogeo_id, r.layer_id'
      || ', l.schema_name, l.table_name, l.feature_column'
      || ', array_agg(r.element_id) as elems '
      || 'FROM topology.layer l INNER JOIN '
      || quote_ident(tname)
      || '.relation r ON (l.layer_id = r.layer_id) '
      || 'WHERE l.level = 0 AND l.feature_type = 3 '
      || ' AND l.topology_id = ' || tid
      || ' AND r.element_id = ANY (' || quote_literal(fidary)
      || ') group by r.topogeo_id, r.layer_id, l.schema_name, l.table_name, '
      || ' l.feature_column ) t';
    -- No surface can be defined by universal face 
    IF lf != 0 AND rf != 0 THEN -- {
      sql := sql || ' WHERE NOT t.elems @> ' || quote_literal(fidary);
    END IF; -- }


    FOR rec IN EXECUTE sql LOOP
      RAISE EXCEPTION 'TopoGeom % in layer % (%.%.%) cannot be represented healing faces % and %',
            rec.topogeo_id, rec.layer_id,
            rec.schema_name, rec.table_name, rec.feature_column,
            rf, lf;
    END LOOP;
  END IF; -- } two faces healed...
END
$function$
]]></string>
		</function>
		<function name="addedge" id="Function_1230a76b" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.addedge(atopology character varying, aline geometry)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	edgeid int;
	rec RECORD;
  ix geometry; 
BEGIN
	--
	-- Atopology and apoint are required
	-- 
	IF atopology IS NULL OR aline IS NULL THEN
		RAISE EXCEPTION 'Invalid null argument';
	END IF;
	--
	-- Aline must be a linestring
	--
	IF substring(geometrytype(aline), 1, 4) != 'LINE'
	THEN
		RAISE EXCEPTION 'Edge geometry must be a linestring';
	END IF;
	--
	-- Check there's no face registered in the topology
	--
	FOR rec IN EXECUTE 'SELECT count(face_id) FROM '
		|| quote_ident(atopology) || '.face '
		|| ' WHERE face_id != 0 LIMIT 1'
	LOOP
		IF rec.count > 0 THEN
			RAISE EXCEPTION 'AddEdge can only be used against topologies with no faces defined';
		END IF;
	END LOOP;
	--
	-- Check if the edge crosses an existing node
	--
	FOR rec IN EXECUTE 'SELECT node_id FROM '
		|| quote_ident(atopology) || '.node '
		|| 'WHERE ST_Crosses('
		|| quote_literal(aline::text) || '::geometry, geom'
		|| ')'
	LOOP
		RAISE EXCEPTION 'Edge crosses node %', rec.node_id;
	END LOOP;
	--
	-- Check if the edge intersects an existing edge
	-- on anything but endpoints
	--
	-- Following DE-9 Intersection Matrix represent
	-- the only relation we accept. 
	--
	--    F F 1
	--    F * *
	--    1 * 2
	--
	-- Example1: linestrings touching at one endpoint
	--    FF1 F00 102
	--    FF1 F** 1*2 <-- our match
	--
	-- Example2: linestrings touching at both endpoints
	--    FF1 F0F 1F2
	--    FF1 F** 1*2 <-- our match
	--
	FOR rec IN EXECUTE 'SELECT edge_id, geom, ST_Relate('
		|| quote_literal(aline::text)
		|| '::geometry, geom, 2) as im'
		|| ' FROM '
		|| quote_ident(atopology) || '.edge '
		|| 'WHERE '
		|| quote_literal(aline::text) || '::geometry && geom'
	LOOP
	  IF ST_RelateMatch(rec.im, 'FF1F**1*2') THEN
	    CONTINUE; -- no interior intersection
	  END IF;
	  -- Reuse an EQUAL edge (be it closed or not)
	  IF ST_RelateMatch(rec.im, '1FFF*FFF2') THEN

	      RETURN rec.edge_id;
	  END IF;
	  -- WARNING: the constructive operation might throw an exception
	  BEGIN
	    ix = ST_Intersection(rec.geom, aline);
	  EXCEPTION
	  WHEN OTHERS THEN
	    RAISE NOTICE 'Could not compute intersection between input edge (%) and edge % (%)', aline::text, rec.edge_id, rec.geom::text;
	  END;
	  RAISE EXCEPTION 'Edge intersects (not on endpoints) with existing edge % at or near point %', rec.edge_id, ST_AsText(ST_PointOnSurface(ix));
	END LOOP;
	--
	-- Get new edge id from sequence
	--
	FOR rec IN EXECUTE 'SELECT nextval(' ||
		quote_literal(
			quote_ident(atopology) || '.edge_data_edge_id_seq'
		) || ')'
	LOOP
		edgeid = rec.nextval;
	END LOOP;
	--
	-- Insert the new row
	--
	EXECUTE 'INSERT INTO '
		|| quote_ident(atopology)
		|| '.edge(edge_id, start_node, end_node, '
		|| 'next_left_edge, next_right_edge, '
		|| 'left_face, right_face, '
		|| 'geom) '
		|| ' VALUES('
		-- edge_id
		|| edgeid ||','
		-- start_node
		|| 'topology.addNode('
		|| quote_literal(atopology)
		|| ', ST_StartPoint('
		|| quote_literal(aline::text)
		|| ')) ,'
		-- end_node
		|| 'topology.addNode('
		|| quote_literal(atopology)
		|| ', ST_EndPoint('
		|| quote_literal(aline::text)
		|| ')) ,'
		-- next_left_edge
		|| -edgeid ||','
		-- next_right_edge
		|| edgeid ||','
		-- left_face
		|| '0,'
		-- right_face
		|| '0,'
		-- geom
		||quote_literal(aline::text)
		|| ')';
	RETURN edgeid;
	
END
$function$
]]></string>
			<comment><![CDATA[args: toponame, aline - Adds a linestring edge to the edge table and associated start and end points to the point nodes table of the specified topology schema using the specified linestring geometry and returns the edgeid of the new (or existing) edge.]]></comment>
		</function>
		<function name="addface" id="Function_26b4a649" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.addface(atopology character varying, apoly geometry, force_new boolean DEFAULT false)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  bounds geometry;
  symdif geometry;
  faceid int;
  rec RECORD;
  rrec RECORD;
  relate text;
  right_edges int[];
  left_edges int[];
  all_edges geometry;
  old_faceid int;
  old_edgeid int;
  sql text;
  right_side bool;
  edgeseg geometry;
  p1 geometry;
  p2 geometry;
  p3 geometry;
  loc float8;
  segnum int;
  numsegs int;
BEGIN
  --
  -- Atopology and apoly are required
  -- 
  IF atopology IS NULL OR apoly IS NULL THEN
    RAISE EXCEPTION 'Invalid null argument';
  END IF;
  --
  -- Aline must be a polygon
  --
  IF substring(geometrytype(apoly), 1, 4) != 'POLY'
  THEN
    RAISE EXCEPTION 'Face geometry must be a polygon';
  END IF;
  for rrec IN SELECT (ST_DumpRings(ST_ForceRHR(apoly))).geom
  LOOP -- {
    --
    -- Find all bounds edges, forcing right-hand-rule
    -- to know what's left and what's right...
    --
    bounds = ST_Boundary(rrec.geom);
    sql := 'SELECT e.geom, e.edge_id, '
      || 'e.left_face, e.right_face FROM '
      || quote_ident(atopology) || '.edge e, (SELECT '
      || quote_literal(bounds::text)
      || '::geometry as geom) r WHERE '
      || 'r.geom && e.geom'
    ;
    -- RAISE DEBUG 'SQL: %', sql;
    FOR rec IN EXECUTE sql
    LOOP -- {
      --RAISE DEBUG 'Edge % has bounding box intersection', rec.edge_id;
      -- Find first non-empty segment of the edge
      numsegs = ST_NumPoints(rec.geom);
      segnum = 1;
      WHILE segnum < numsegs LOOP
        p1 = ST_PointN(rec.geom, segnum);
        p2 = ST_PointN(rec.geom, segnum+1);
        IF ST_Distance(p1, p2) > 0 THEN
          EXIT;
        END IF;
        segnum = segnum + 1;
      END LOOP;
      IF segnum = numsegs THEN
        RAISE WARNING 'Edge % is collapsed', rec.edge_id;
        CONTINUE; -- we don't want to spend time on it
      END IF;
      edgeseg = ST_MakeLine(p1, p2);
      -- Skip non-covered edges
      IF NOT ST_Equals(p2, ST_EndPoint(rec.geom)) THEN
        IF NOT ( _ST_Intersects(bounds, p1) AND _ST_Intersects(bounds, p2) )
        THEN
          --RAISE DEBUG 'Edge % has points % and % not intersecting with ring bounds', rec.edge_id, st_astext(p1), st_astext(p2);
          CONTINUE;
        END IF;
      ELSE
        -- must be a 2-points only edge, let's use Covers (more expensive)
        IF NOT _ST_Covers(bounds, edgeseg) THEN
          --RAISE DEBUG 'Edge % is not covered by ring', rec.edge_id;
          CONTINUE;
        END IF;
      END IF;
      p3 = ST_StartPoint(bounds);
      IF ST_DWithin(edgeseg, p3, 0) THEN
        -- Edge segment covers ring endpoint, See bug #874
        loc = ST_LineLocatePoint(edgeseg, p3);
        -- WARNING: this is as robust as length of edgeseg allows...
        IF loc > 0.9 THEN
          -- shift last point down 
          p2 = ST_LineInterpolatePoint(edgeseg, loc - 0.1);
        ELSIF loc < 0.1 THEN
          -- shift first point up
          p1 = ST_LineInterpolatePoint(edgeseg, loc + 0.1); 
        ELSE
          -- when ring start point is in between, we swap the points
          p3 = p1; p1 = p2; p2 = p3;
        END IF;
      END IF;
      right_side = ST_LineLocatePoint(bounds, p1) < 
                   ST_LineLocatePoint(bounds, p2);
  


      IF right_side THEN
        right_edges := array_append(right_edges, rec.edge_id);
        old_faceid = rec.right_face;
      ELSE
        left_edges := array_append(left_edges, rec.edge_id);
        old_faceid = rec.left_face;
      END IF;
      IF faceid IS NULL OR faceid = 0 THEN
        faceid = old_faceid;
        old_edgeid = rec.edge_id;
      ELSIF faceid != old_faceid THEN
        RAISE EXCEPTION 'Edge % has face % registered on the side of this face, while edge % has face % on the same side', rec.edge_id, old_faceid, old_edgeid, faceid;
      END IF;
      -- Collect all edges for final full coverage check
      all_edges = ST_Collect(all_edges, rec.geom);
    END LOOP; -- }
  END LOOP; -- }
  IF all_edges IS NULL THEN
    RAISE EXCEPTION 'Found no edges on the polygon boundary';
  END IF;




  --
  -- Check that all edges found, taken togheter,
  -- fully match the ring boundary and nothing more
  --
  -- If the test fail either we need to add more edges
  -- from the polygon ring or we need to split
  -- some of the existing ones.
  -- 
  bounds = ST_Boundary(apoly);
  IF NOT ST_isEmpty(ST_SymDifference(bounds, all_edges)) THEN
    IF NOT ST_isEmpty(ST_Difference(bounds, all_edges)) THEN
      RAISE EXCEPTION 'Polygon boundary is not fully defined by existing edges at or near point %', ST_AsText(ST_PointOnSurface(ST_Difference(bounds, all_edges)));
    ELSE
      RAISE EXCEPTION 'Existing edges cover polygon boundary and more at or near point % (invalid topology?)', ST_AsText(ST_PointOnSurface(ST_Difference(all_edges, bounds)));
    END IF;
  END IF;
  IF faceid IS NOT NULL AND faceid != 0 THEN
    IF NOT force_new THEN

      RETURN faceid;
    ELSE

    END IF;
  END IF;
  --
  -- Get new face id from sequence
  --
  FOR rec IN EXECUTE 'SELECT nextval(' ||
    quote_literal(
      quote_ident(atopology) || '.face_face_id_seq'
    ) || ')'
  LOOP
    faceid = rec.nextval;
  END LOOP;
  --
  -- Insert new face 
  --
  EXECUTE 'INSERT INTO '
    || quote_ident(atopology)
    || '.face(face_id, mbr) VALUES('
    -- face_id
    || faceid || ','
    -- minimum bounding rectangle
    || quote_literal(ST_Envelope(apoly)::text)
    || ')';
  --
  -- Update all edges having this face on the left
  --
  IF left_edges IS NOT NULL THEN
    EXECUTE 'UPDATE '
    || quote_ident(atopology)
    || '.edge_data SET left_face = '
    || quote_literal(faceid)
    || ' WHERE edge_id = ANY('
    || quote_literal(left_edges)
    || ') ';
  END IF;
  --
  -- Update all edges having this face on the right
  --
  IF right_edges IS NOT NULL THEN
    EXECUTE 'UPDATE '
    || quote_ident(atopology)
    || '.edge_data SET right_face = '
    || quote_literal(faceid)
    || ' WHERE edge_id = ANY('
    || quote_literal(right_edges)
    || ') ';
  END IF;

  --
  -- Set left_face/right_face of any contained edge 
  --
  EXECUTE 'UPDATE '
    || quote_ident(atopology)
    || '.edge_data SET right_face = '
    || quote_literal(faceid)
    || ', left_face = '
    || quote_literal(faceid)
    || ' WHERE ST_Contains('
    || quote_literal(apoly::text)
    || ', geom)';
  -- 
  -- Set containing_face of any contained node 
  -- 
  EXECUTE 'UPDATE '
    || quote_ident(atopology)
    || '.node SET containing_face = '
    || quote_literal(faceid)
    || ' WHERE containing_face IS NOT NULL AND ST_Contains('
    || quote_literal(apoly::text)
    || ', geom)';
  RETURN faceid;
	
END
$function$
]]></string>
			<comment><![CDATA[args: toponame, apolygon, force_new=false - Registers a face primitive to a topology and gets its identifier.]]></comment>
		</function>
		<function name="addnode" id="Function_2d679a82" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.addnode(atopology character varying, apoint geometry)
 RETURNS integer
 LANGUAGE sql
AS $function$
  SELECT topology.AddNode($1, $2, false, false);
$function$
CREATE OR REPLACE FUNCTION topology.addnode(atopology character varying, apoint geometry, allowedgesplitting boolean, setcontainingface boolean DEFAULT false)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
	nodeid int;
	rec RECORD;
  containing_face int;
BEGIN
	--
	-- Atopology and apoint are required
	-- 
	IF atopology IS NULL OR apoint IS NULL THEN
		RAISE EXCEPTION 'Invalid null argument';
	END IF;
	--
	-- Apoint must be a point
	--
	IF substring(geometrytype(apoint), 1, 5) != 'POINT'
	THEN
		RAISE EXCEPTION 'Node geometry must be a point';
	END IF;
	--
	-- Check if a coincident node already exists
	-- 
	-- We use index AND x/y equality
	--
	FOR rec IN EXECUTE 'SELECT node_id FROM '
		|| quote_ident(atopology) || '.node ' ||
		'WHERE geom && ' || quote_literal(apoint::text) || '::geometry'
		||' AND ST_X(geom) = ST_X('||quote_literal(apoint::text)||'::geometry)'
		||' AND ST_Y(geom) = ST_Y('||quote_literal(apoint::text)||'::geometry)'
	LOOP
		RETURN  rec.node_id;
	END LOOP;
	--
	-- Check if any edge crosses this node
	-- (endpoints are fine)
	--
	FOR rec IN EXECUTE 'SELECT edge_id FROM '
		|| quote_ident(atopology) || '.edge ' 
		|| 'WHERE ST_DWithin('
		|| quote_literal(apoint::text) 
		|| ', geom, 0) AND NOT ST_Equals('
		|| quote_literal(apoint::text)
		|| ', ST_StartPoint(geom)) AND NOT ST_Equals('
		|| quote_literal(apoint::text)
		|| ', ST_EndPoint(geom))'
	LOOP
    IF allowEdgeSplitting THEN
      RETURN topology.ST_ModEdgeSplit(atopology, rec.edge_id, apoint);
    ELSE
		  RAISE EXCEPTION 'An edge crosses the given node.';
    END IF;
	END LOOP;
  IF setContainingFace THEN
    containing_face := topology.GetFaceByPoint(atopology, apoint, 0);

  ELSE
    containing_face := NULL;
  END IF;
	--
	-- Get new node id from sequence
	--
	FOR rec IN EXECUTE 'SELECT nextval(' ||
		quote_literal(
			quote_ident(atopology) || '.node_node_id_seq'
		) || ')'
	LOOP
		nodeid = rec.nextval;
	END LOOP;
	--
	-- Insert the new row
	--
	EXECUTE 'INSERT INTO ' || quote_ident(atopology)
		|| '.node(node_id, containing_face, geom) 
		VALUES(' || nodeid || ',' || coalesce(containing_face::text, 'NULL') || ','
    || quote_literal(apoint::text) || ')';
	RETURN nodeid;
	
END
$function$
]]></string>
			<comment><![CDATA[args: toponame, apoint, allowEdgeSplitting=false, computeContainingFace=false - Adds a point node to the node table in the specified topology schema and returns the nodeid of new node. If point already exists as node, the existing nodeid is returned.]]></comment>
		</function>
		<function name="addnode_001" id="Function_264c7596" isSystem="false" />
		<function name="addtopogeometrycolumn" id="Function_dca6024" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.addtopogeometrycolumn(character varying, character varying, character varying, character varying, character varying)
 RETURNS integer
 LANGUAGE sql
AS $function$
  SELECT topology.AddTopoGeometryColumn($1, $2, $3, $4, $5, NULL);
$function$
CREATE OR REPLACE FUNCTION topology.addtopogeometrycolumn(toponame character varying, schema character varying, tbl character varying, col character varying, ltype character varying, child integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  intltype integer;
  newlevel integer;
  topoid integer;
  rec RECORD;
  newlayer_id integer;
  query text;
BEGIN
        -- Get topology id
        SELECT id FROM topology.topology into topoid
                WHERE name = toponame;
  IF topoid IS NULL THEN
    RAISE EXCEPTION 'Topology % does not exist', toponame;
  END IF;
  IF ltype ILIKE '%POINT%' OR ltype ILIKE 'PUNTAL' THEN
    intltype = 1;
  ELSIF ltype ILIKE '%LINE%' OR ltype ILIKE 'LINEAL' THEN
    intltype = 2;
  ELSIF ltype ILIKE '%POLYGON%' OR ltype ILIKE 'AREAL' THEN
    intltype = 3;
  ELSIF ltype ILIKE '%COLLECTION%' OR ltype ILIKE 'GEOMETRY' THEN
    intltype = 4;
  ELSE
    RAISE EXCEPTION 'Layer type must be one of POINT,LINE,POLYGON,COLLECTION';
  END IF;
  --
  -- Add new TopoGeometry column in schema.table
  --
  EXECUTE 'ALTER TABLE ' || quote_ident(schema)
    || '.' || quote_ident(tbl) 
    || ' ADD COLUMN ' || quote_ident(col)
    || ' topology.TopoGeometry;';

  --
  -- See if child id exists and extract its level
  --
  IF child IS NOT NULL THEN
    SELECT level + 1 FROM topology.layer
      WHERE layer_id = child
      INTO newlevel;
    IF newlevel IS NULL THEN
      RAISE EXCEPTION 'Child layer % does not exist in topology "%"', child, toponame;
    END IF;
  END IF;
  --
  -- Get new layer id from sequence
  --
  EXECUTE 'SELECT nextval(' ||
    quote_literal(
      quote_ident(toponame) || '.layer_id_seq'
    ) || ')' INTO STRICT newlayer_id;
  EXECUTE 'INSERT INTO ' 
    || 'topology.layer(topology_id, '
    || 'layer_id, level, child_id, schema_name, '
    || 'table_name, feature_column, feature_type) '
    || 'VALUES ('
    || topoid || ','
    || newlayer_id || ',' || COALESCE(newlevel, 0) || ','
    || COALESCE(child::text, 'NULL') || ','
    || quote_literal(schema) || ','
    || quote_literal(tbl) || ','
    || quote_literal(col) || ','
    || intltype || ');';

  --
  -- Create a sequence for TopoGeometries in this new layer
  --
  EXECUTE 'CREATE SEQUENCE ' || quote_ident(toponame)
    || '.topogeo_s_' || newlayer_id;
  --
  -- Add constraints on TopoGeom column
  --
  EXECUTE 'ALTER TABLE ' || quote_ident(schema)
    || '.' || quote_ident(tbl) 
    || ' ADD CONSTRAINT "check_topogeom_' || col || '" CHECK ('
    || 'topology_id(' || quote_ident(col) || ') = ' || topoid
    || ' AND '
    || 'layer_id(' || quote_ident(col) || ') = ' || newlayer_id
    || ' AND '
    || 'type(' || quote_ident(col) || ') = ' || intltype
    || ');';
  --
  -- Add dependency of the feature column on the topology schema
  --
  query = 'INSERT INTO pg_catalog.pg_depend SELECT '
    || 'fcat.oid, fobj.oid, fsub.attnum, tcat.oid, '
    || 'tobj.oid, 0, ''n'' '
    || 'FROM pg_class fcat, pg_namespace fnsp, '
    || ' pg_class fobj, pg_attribute fsub, '
    || ' pg_class tcat, pg_namespace tobj '
    || ' WHERE fcat.relname = ''pg_class'' '
    || ' AND fnsp.nspname = ' || quote_literal(schema)
    || ' AND fobj.relnamespace = fnsp.oid '
    || ' AND fobj.relname = ' || quote_literal(tbl)
    || ' AND fsub.attrelid = fobj.oid '
    || ' AND fsub.attname = ' || quote_literal(col)
    || ' AND tcat.relname = ''pg_namespace'' '
    || ' AND tobj.nspname = ' || quote_literal(toponame);
--
-- The only reason to add this dependency is to avoid
-- simple drop of a feature column. Still, drop cascade
-- will remove both the feature column and the sequence
-- corrupting the topology anyway ...
--

  RETURN newlayer_id;
END;
$function$
]]></string>
			<comment><![CDATA[args: topology_name, schema_name, table_name, column_name, feature_type, child_layer - Adds a topogeometry column to an existing table, registers this new column as a layer in topology.layer and returns the new layer_id.]]></comment>
		</function>
		<function name="addtopogeometrycolumn_001" id="Function_4b9e88a" isSystem="false" >
			<comment><![CDATA[args: topology_name, schema_name, table_name, column_name, feature_type - Adds a topogeometry column to an existing table, registers this new column as a layer in topology.layer and returns the new layer_id.]]></comment>
		</function>
		<function name="addtosearchpath" id="Function_fbbcc33" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.addtosearchpath(a_schema_name character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
	var_result text;
	var_cur_search_path text;
BEGIN
	SELECT reset_val INTO var_cur_search_path FROM pg_settings WHERE name = 'search_path';
	IF var_cur_search_path LIKE '%' || quote_ident(a_schema_name) || '%' THEN
		var_result := a_schema_name || ' already in database search_path';
	ELSE
		EXECUTE 'ALTER DATABASE ' || quote_ident(current_database()) || ' SET search_path = ' || var_cur_search_path || ', ' || quote_ident(a_schema_name); 
		var_result := a_schema_name || ' has been added to end of database search_path ';
	END IF;
  
  RETURN var_result;
END
$function$
]]></string>
		</function>
		<function name="asgml" id="Function_33ea9ca9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry, nsprefix_in text, precision_in integer, options_in integer, visitedtable regclass, idprefix text, gmlver integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  nsprefix text;
  precision int;
  options int;
  visited bool;
  toponame text;
  gml text;
  sql text;
  rec RECORD;
  rec2 RECORD;
BEGIN
  nsprefix := 'gml:';
  IF nsprefix_in IS NOT NULL THEN
    IF nsprefix_in = '' THEN
      nsprefix = nsprefix_in;
    ELSE
      nsprefix = nsprefix_in || ':';
    END IF;
  END IF;
  precision := 15;
  IF precision_in IS NOT NULL THEN
    precision = precision_in;
  END IF;
  options := 1;
  IF options_in IS NOT NULL THEN
    options = options_in;
  END IF;
  -- Get topology name (for subsequent queries)
  SELECT name FROM topology.topology into toponame
              WHERE id = tg.topology_id;
  -- Puntual TopoGeometry
  IF tg.type = 1 THEN
    gml = '<' || nsprefix || 'TopoPoint>';
    -- For each defining node, print a directedNode
    FOR rec IN  EXECUTE 'SELECT r.element_id, n.geom from '
      || quote_ident(toponame) || '.relation r LEFT JOIN '
      || quote_ident(toponame) || '.node n ON (r.element_id = n.node_id)'
      || ' WHERE r.layer_id = ' || tg.layer_id
      || ' AND r.topogeo_id = ' || tg.id
    LOOP
      gml = gml || '<' || nsprefix || 'directedNode';
      -- Do visited bookkeeping if visitedTable was given
      IF visitedTable IS NOT NULL THEN
        EXECUTE 'SELECT true FROM '
                || visitedTable::text
                || ' WHERE element_type = 1 AND element_id = '
                || rec.element_id LIMIT 1 INTO visited;
        IF visited IS NOT NULL THEN
          gml = gml || ' xlink:href="#' || idprefix || 'N' || rec.element_id || '" />';
          CONTINUE;
        ELSE
          -- Mark as visited 
          EXECUTE 'INSERT INTO ' || visitedTable::text
            || '(element_type, element_id) VALUES (1, '
            || rec.element_id || ')';
        END IF;
      END IF;
      gml = gml || '>';
      gml = gml || topology._AsGMLNode(rec.element_id, rec.geom, nsprefix_in, precision, options, idprefix, gmlver);
      gml = gml || '</' || nsprefix || 'directedNode>';
    END LOOP;
    gml = gml || '</' || nsprefix || 'TopoPoint>';
    RETURN gml;
  ELSIF tg.type = 2 THEN -- lineal
    gml = '<' || nsprefix || 'TopoCurve>';
    FOR rec IN SELECT (ST_Dump(topology.Geometry(tg))).geom
    LOOP
      FOR rec2 IN EXECUTE
        'SELECT e.*, ST_LineLocatePoint('
        || quote_literal(rec.geom::text)
        || ', ST_LineInterpolatePoint(e.geom, 0.2)) as pos'
        || ', ST_LineLocatePoint('
        || quote_literal(rec.geom::text)
        || ', ST_LineInterpolatePoint(e.geom, 0.8)) as pos2 FROM '
        || quote_ident(toponame)
        || '.edge e WHERE ST_Covers('
        || quote_literal(rec.geom::text)
        || ', e.geom) ORDER BY pos'
        -- TODO: add relation to the conditional, to reduce load ?
      LOOP
        gml = gml || '<' || nsprefix || 'directedEdge';
        -- if this edge goes in opposite direction to the
        --       line, make it with negative orientation
        IF rec2.pos2 < rec2.pos THEN -- edge goes in opposite direction
          gml = gml || ' orientation="-"';
        END IF;
        -- Do visited bookkeeping if visitedTable was given
        IF visitedTable IS NOT NULL THEN
          EXECUTE 'SELECT true FROM '
            || visitedTable::text
            || ' WHERE element_type = 2 AND element_id = '
            || rec2.edge_id LIMIT 1 INTO visited;
          IF visited THEN
            -- Use xlink:href if visited
            gml = gml || ' xlink:href="#' || idprefix || 'E' || rec2.edge_id || '" />';
            CONTINUE;
          ELSE
            -- Mark as visited otherwise
            EXECUTE 'INSERT INTO ' || visitedTable::text
              || '(element_type, element_id) VALUES (2, '
              || rec2.edge_id || ')';
          END IF;
        END IF;

        gml = gml || '>';
        gml = gml || topology._AsGMLEdge(rec2.edge_id,
                                        rec2.start_node,
                                        rec2.end_node, rec2.geom,
                                        visitedTable,
                                        nsprefix_in, precision,
                                        options, idprefix, gmlver);

        gml = gml || '</' || nsprefix || 'directedEdge>';
      END LOOP;
    END LOOP;
    gml = gml || '</' || nsprefix || 'TopoCurve>';
    return gml;
  ELSIF tg.type = 3 THEN -- areal
    gml = '<' || nsprefix || 'TopoSurface>';
    -- For each defining face, print a directedFace
    FOR rec IN  EXECUTE 'SELECT f.face_id from '
      || quote_ident(toponame) || '.relation r LEFT JOIN '
      || quote_ident(toponame) || '.face f ON (r.element_id = f.face_id)'
      || ' WHERE r.layer_id = ' || tg.layer_id
      || ' AND r.topogeo_id = ' || tg.id
    LOOP
      gml = gml || '<' || nsprefix || 'directedFace';
      -- Do visited bookkeeping if visitedTable was given
      IF visitedTable IS NOT NULL THEN
        EXECUTE 'SELECT true FROM '
                || visitedTable::text
                || ' WHERE element_type = 3 AND element_id = '
                || rec.face_id LIMIT 1 INTO visited;
        IF visited IS NOT NULL THEN
          gml = gml || ' xlink:href="#' || idprefix || 'F' || rec.face_id || '" />';
          CONTINUE;
        ELSE
          -- Mark as visited 
          EXECUTE 'INSERT INTO ' || visitedTable::text
            || '(element_type, element_id) VALUES (3, '
            || rec.face_id || ')';
        END IF;
      END IF;
      gml = gml || '>';
      gml = gml || topology._AsGMLFace(toponame, rec.face_id, visitedTable,
                                       nsprefix_in, precision,
                                       options, idprefix, gmlver);
      gml = gml || '</' || nsprefix || 'directedFace>';
    END LOOP;
    gml = gml || '</' || nsprefix || 'TopoSurface>';
    RETURN gml;
  ELSIF tg.type = 4 THEN -- collection
    RAISE EXCEPTION 'Collection TopoGeometries are not supported by AsGML';
  END IF;
	
  RETURN gml;
	
END
$function$
CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry, nsprefix text, prec integer, options integer, visitedtable regclass, idprefix text)
 RETURNS text
 LANGUAGE sql
AS $function$
 SELECT topology.AsGML($1, $2, $3, $4, $5, $6, 3);
$function$
CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry, nsprefix text, prec integer, options integer, vis regclass)
 RETURNS text
 LANGUAGE sql
AS $function$
 SELECT topology.AsGML($1, $2, $3, $4, $5, '');
$function$
CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry, nsprefix text, prec integer, opts integer)
 RETURNS text
 LANGUAGE sql
 STABLE
AS $function$
 SELECT topology.AsGML($1, $2, $3, $4, NULL);
$function$
CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry, nsprefix text)
 RETURNS text
 LANGUAGE sql
 STABLE
AS $function$
 SELECT topology.AsGML($1, $2, 15, 1, NULL);
$function$
CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry, visitedtable regclass)
 RETURNS text
 LANGUAGE sql
AS $function$
 SELECT topology.AsGML($1, 'gml', 15, 1, $2);
$function$
CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry, visitedtable regclass, nsprefix text)
 RETURNS text
 LANGUAGE sql
AS $function$
 SELECT topology.AsGML($1, $3, 15, 1, $2);
$function$
CREATE OR REPLACE FUNCTION topology.asgml(tg topogeometry)
 RETURNS text
 LANGUAGE sql
 STABLE
AS $function$
 SELECT topology.AsGML($1, 'gml');
$function$
]]></string>
			<comment><![CDATA[args: tg, nsprefix_in, precision, options, visitedTable, idprefix, gmlversion - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="asgml_001" id="Function_311b53e7" isSystem="false" >
			<comment><![CDATA[args: tg, nsprefix_in, precision, options, visitedTable, idprefix - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="asgml_002" id="Function_24c3e6da" isSystem="false" >
			<comment><![CDATA[args: tg, nsprefix_in, precision, options, visitedTable - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="asgml_003" id="Function_10fd1ad1" isSystem="false" >
			<comment><![CDATA[args: tg, nsprefix_in, precision, options - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="asgml_004" id="Function_3129c576" isSystem="false" >
			<comment><![CDATA[args: tg, nsprefix_in - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="asgml_005" id="Function_30c5d8d4" isSystem="false" >
			<comment><![CDATA[args: tg, visitedTable - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="asgml_006" id="Function_3acd5afd" isSystem="false" >
			<comment><![CDATA[args: tg, visitedTable, nsprefix - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="asgml_007" id="Function_8f6b804" isSystem="false" >
			<comment><![CDATA[args: tg - Returns the GML representation of a topogeometry.]]></comment>
		</function>
		<function name="astopojson" id="Function_2a2bd46e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.astopojson(tg topogeometry, edgemaptable regclass)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  toponame text;
  json text;
  sql text;
  bounds GEOMETRY;
  rec RECORD;
  rec2 RECORD;
  side int;
  arcid int;
  arcs int[];
  ringtxt TEXT[];
  comptxt TEXT[];
  edges_found BOOLEAN;
  old_search_path TEXT;
  all_faces int[];
  faces int[];
  visited_face int;
  shell_faces int[];
  visited_edges int[];
  looking_for_holes BOOLEAN;
BEGIN
  IF tg IS NULL THEN
    RETURN NULL;
  END IF;
  -- Get topology name (for subsequent queries)
  SELECT name FROM topology.topology into toponame
              WHERE id = tg.topology_id;
  -- Puntual TopoGeometry
  IF tg.type = 1 THEN
    -- TODO: implement scale ?
    --json := ST_AsGeoJSON(topology.Geometry(tg));
    --return json;
    RAISE EXCEPTION 'TopoJSON export does not support puntual objects';
  ELSIF tg.type = 2 THEN -- lineal
    FOR rec IN SELECT (ST_Dump(topology.Geometry(tg))).geom
    LOOP -- {
      sql := 'SELECT e.*, ST_LineLocatePoint('
            || quote_literal(rec.geom::text)
            || ', ST_LineInterpolatePoint(e.geom, 0.2)) as pos'
            || ', ST_LineLocatePoint('
            || quote_literal(rec.geom::text)
            || ', ST_LineInterpolatePoint(e.geom, 0.8)) as pos2 FROM '
            || quote_ident(toponame)
            || '.edge e WHERE ST_Covers('
            || quote_literal(rec.geom::text)
            || ', e.geom) ORDER BY pos';
            -- TODO: add relation to the conditional, to reduce load ?
      FOR rec2 IN EXECUTE sql
      LOOP -- {
        IF edgeMapTable IS NOT NULL THEN
          sql := 'SELECT arc_id-1 FROM ' || edgeMapTable::text || ' WHERE edge_id = ' || rec2.edge_id;
          EXECUTE sql INTO arcid;
          IF arcid IS NULL THEN
            EXECUTE 'INSERT INTO ' || edgeMapTable::text
              || '(edge_id) VALUES (' || rec2.edge_id || ') RETURNING arc_id-1'
            INTO arcid;
          END IF;
        ELSE
          arcid := rec2.edge_id;
        END IF;
        -- edge goes in opposite direction
        IF rec2.pos2 < rec2.pos THEN
          arcid := -(arcid+1);
        END IF;
        arcs := arcs || arcid;
      END LOOP; -- }
      comptxt := comptxt || ( '[' || array_to_string(arcs, ',') || ']' );
      arcs := NULL;
    END LOOP; -- }
    json := '{ "type": "MultiLineString", "arcs": [' || array_to_string(comptxt,',') || ']}';
    return json;
  ELSIF tg.type = 3 THEN -- areal
    json := '{ "type": "MultiPolygon", "arcs": [';
    EXECUTE 'SHOW search_path' INTO old_search_path;
    EXECUTE 'SET search_path TO ' || quote_ident(toponame) || ',' || old_search_path;
    SELECT array_agg(id) as f
    FROM ( SELECT (topology.GetTopoGeomElements(tg))[1] as id ) as f
    INTO all_faces;


    visited_edges := ARRAY[]::int[];
    faces := all_faces;
    looking_for_holes := false;
    shell_faces := ARRAY[]::int[];
    LOOP -- {
      arcs := NULL;
      edges_found := false;



      FOR rec in -- {
WITH RECURSIVE
_edges AS (
  SELECT e.*, 
         e.left_face = ANY ( faces ) as lf,
         e.right_face = ANY ( faces ) as rf
  FROM edge e
  WHERE ( e.left_face = ANY ( faces ) OR
          e.right_face = ANY ( faces ) )
),
_leftmost_non_dangling_edge AS (
  SELECT * FROM _edges e
    WHERE ( e.lf or e.rf ) AND ( e.lf != e.rf )
          AND NOT e.edge_id = ANY ( visited_edges )
      -- TODO: and not in visited ?
  ORDER BY geom LIMIT 1
),
_edgepath AS (
  SELECT
    CASE
      WHEN e.lf THEN lme.edge_id
      ELSE -lme.edge_id
    END as signed_edge_id,
    false as back,
    e.lf = e.rf as dangling,
    e.left_face, e.right_face,
    e.lf, e.rf,
    e.next_right_edge, e.next_left_edge
  FROM _edges e, _leftmost_non_dangling_edge lme
  WHERE e.edge_id = abs(lme.edge_id)
    UNION
  SELECT
    CASE
      WHEN p.dangling AND NOT p.back THEN -p.signed_edge_id
      WHEN p.signed_edge_id < 0 THEN p.next_right_edge
      ELSE p.next_left_edge
    END, -- signed_edge_id
    CASE
      WHEN p.dangling AND NOT p.back THEN true
      ELSE false
    END, -- back
    e.lf = e.rf, -- dangling
    e.left_face, e.right_face,
    e.lf, e.rf,
    e.next_right_edge, e.next_left_edge
  FROM _edges e, _edgepath p
  WHERE
    e.edge_id = CASE
      WHEN p.dangling AND NOT p.back THEN abs(p.signed_edge_id)
      WHEN p.signed_edge_id < 0 THEN abs(p.next_right_edge)
      ELSE abs(p.next_left_edge)
    END
)
SELECT abs(signed_edge_id) as edge_id, signed_edge_id, dangling,
        lf, rf, left_face, right_face
FROM _edgepath
      LOOP  -- }{



        IF rec.left_face = ANY (all_faces) AND NOT rec.left_face = ANY (shell_faces) THEN
          shell_faces := shell_faces || rec.left_face;
        END IF;
        IF rec.right_face = ANY (all_faces) AND NOT rec.right_face = ANY (shell_faces) THEN
          shell_faces := shell_faces || rec.right_face;
        END IF;
        visited_edges := visited_edges || rec.edge_id;
        edges_found := true;
        -- TODO: drop ?
        IF rec.dangling THEN
          CONTINUE;
        END IF;
        IF rec.left_face = ANY (all_faces) AND rec.right_face = ANY (all_faces) THEN
          CONTINUE;
        END IF;
        IF edgeMapTable IS NOT NULL THEN
          sql := 'SELECT arc_id-1 FROM ' || edgeMapTable::text || ' WHERE edge_id = ' || rec.edge_id;
          EXECUTE sql INTO arcid;
          IF arcid IS NULL THEN
            EXECUTE 'INSERT INTO ' || edgeMapTable::text
              || '(edge_id) VALUES (' || rec.edge_id || ') RETURNING arc_id-1'
            INTO arcid;
          END IF;
        ELSE
          arcid := rec.edge_id-1;
        END IF;
        -- Swap sign, use two's complement for negative edges
        IF rec.signed_edge_id >= 0 THEN
          arcid := - ( arcid + 1 );
        END IF;


        arcs := arcid || arcs;
      END LOOP; -- }


      IF NOT edges_found THEN
        IF looking_for_holes THEN
          looking_for_holes := false;

          comptxt := comptxt || ( '[' || array_to_string(ringtxt, ',') || ']' );
          ringtxt := NULL;
          faces := all_faces;
          shell_faces := ARRAY[]::int[];
        ELSE
          EXIT; -- end of loop
        END IF;
      ELSE
        faces := shell_faces;
        IF arcs IS NOT NULL THEN

          ringtxt := ringtxt || ( '[' || array_to_string(arcs,',') || ']' );
        END IF;
        looking_for_holes := true;
      END IF;
    END LOOP; -- }
    json := json || array_to_string(comptxt, ',') || ']}';
    EXECUTE 'SET search_path TO ' || old_search_path;

  ELSIF tg.type = 4 THEN -- collection
    RAISE EXCEPTION 'Collection TopoGeometries are not supported by AsTopoJSON';
  END IF;
	
  RETURN json;
	
END
$function$
]]></string>
			<comment><![CDATA[args: tg, edgeMapTable - Returns the TopoJSON representation of a topogeometry.]]></comment>
		</function>
		<function name="cleartopogeom" id="Function_201b67c1" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.cleartopogeom(tg topogeometry)
 RETURNS topogeometry
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  topology_info RECORD;
  sql TEXT;
BEGIN
  -- Get topology information
  SELECT id, name FROM topology.topology
    INTO topology_info
    WHERE id = topology_id(tg);
  IF NOT FOUND THEN
      RAISE EXCEPTION 'No topology with id "%" in topology.topology', topology_id(tg);
  END IF;
  -- Clear the TopoGeometry contents
  sql := 'DELETE FROM ' || quote_ident(topology_info.name)
        || '.relation WHERE layer_id = '
        || layer_id(tg)
        || ' AND topogeo_id = '
        || id(tg);

  EXECUTE sql;

  RETURN tg;
END
$function$
]]></string>
			<comment><![CDATA[args: topogeom - Clears the content of a topo geometry]]></comment>
		</function>
		<function name="copytopology" id="Function_2886716e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.copytopology(atopology character varying, newtopo character varying)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  rec RECORD;
  rec2 RECORD;
  oldtopo_id integer;
  newtopo_id integer;
  n int4;
  ret text;
BEGIN
  SELECT * FROM topology.topology where name = atopology
  INTO strict rec;
  oldtopo_id = rec.id;
  -- TODO: more gracefully handle unexistent topology
  SELECT topology.CreateTopology(newtopo, rec.SRID, rec.precision, rec.hasZ)
  INTO strict newtopo_id;
  -- Copy faces
  EXECUTE 'INSERT INTO ' || quote_ident(newtopo)
    || '.face SELECT * FROM ' || quote_ident(atopology)
    || '.face WHERE face_id != 0';
  -- Update faces sequence
  EXECUTE 'SELECT setval(' || quote_literal(
      quote_ident(newtopo) || '.face_face_id_seq'
    ) || ', (SELECT last_value FROM ' 
    || quote_ident(atopology) || '.face_face_id_seq))';
  -- Copy nodes
  EXECUTE 'INSERT INTO ' || quote_ident(newtopo)
    || '.node SELECT * FROM ' || quote_ident(atopology)
    || '.node';
  -- Update node sequence
  EXECUTE 'SELECT setval(' || quote_literal(
      quote_ident(newtopo) || '.node_node_id_seq'
    ) || ', (SELECT last_value FROM ' 
    || quote_ident(atopology) || '.node_node_id_seq))';
  -- Copy edges
  EXECUTE 'INSERT INTO ' || quote_ident(newtopo)
    || '.edge_data SELECT * FROM ' || quote_ident(atopology)
    || '.edge_data';
  -- Update edge sequence
  EXECUTE 'SELECT setval(' || quote_literal(
      quote_ident(newtopo) || '.edge_data_edge_id_seq'
    ) || ', (SELECT last_value FROM ' 
    || quote_ident(atopology) || '.edge_data_edge_id_seq))';
  -- Copy layers and their TopoGeometry sequences 
  FOR rec IN SELECT * FROM topology.layer WHERE topology_id = oldtopo_id
  LOOP
    INSERT INTO topology.layer (topology_id, layer_id, feature_type,
      level, child_id, schema_name, table_name, feature_column) 
      VALUES (newtopo_id, rec.layer_id, rec.feature_type,
              rec.level, rec.child_id, newtopo,
              'LAYER' ||  rec.layer_id, '');
    -- Create layer's TopoGeometry sequences
    EXECUTE 'SELECT last_value FROM ' 
      || quote_ident(atopology) || '.topogeo_s_' || rec.layer_id 
      INTO STRICT n;
    EXECUTE 'CREATE SEQUENCE ' || quote_ident(newtopo)
      || '.topogeo_s_' || rec.layer_id;
    EXECUTE 'SELECT setval(' || quote_literal(
      quote_ident(newtopo) || '.topogeo_s_' || rec.layer_id
      ) || ', ' || n || ')';
  END LOOP;
  -- Copy TopoGeometry definitions
  EXECUTE 'INSERT INTO ' || quote_ident(newtopo)
    || '.relation SELECT * FROM ' || quote_ident(atopology)
    || '.relation';
  RETURN newtopo_id;
END
$function$
]]></string>
			<comment><![CDATA[args: existing_topology_name, new_name - Makes a copy of a topology structure (nodes, edges, faces, layers and TopoGeometries).]]></comment>
		</function>
		<function name="createtopogeom" id="Function_128e33b5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.createtopogeom(toponame character varying, tg_type integer, layer_id integer)
 RETURNS topogeometry
 LANGUAGE sql
 STRICT
AS $function$
  SELECT topology.CreateTopoGeom($1,$2,$3,'{{0,0}}');
$function$
CREATE OR REPLACE FUNCTION topology.createtopogeom(toponame character varying, tg_type integer, layer_id integer, tg_objs topoelementarray)
 RETURNS topogeometry
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  i integer;
  dims varchar;
  outerdims varchar;
  innerdims varchar;
  obj_type integer;
  obj_id integer;
  ret topology.TopoGeometry;
  rec RECORD;
  layertype integer;
  layerlevel integer;
  layerchild integer;
BEGIN
  IF tg_type < 1 OR tg_type > 4 THEN
    RAISE EXCEPTION 'Invalid TopoGeometry type % (must be in the range 1..4)', tg_type;
  END IF;
  -- Get topology id into return TopoGeometry
  SELECT id FROM topology.topology into ret.topology_id
    WHERE name = toponame;
  --
  -- Get layer info
  --
  layertype := NULL;
  FOR rec IN EXECUTE 'SELECT * FROM topology.layer'
    || ' WHERE topology_id = ' || ret.topology_id
    || ' AND layer_id = ' || layer_id
  LOOP
    layertype = rec.feature_type;
    layerlevel = rec.level;
    layerchild = rec.child_id;
  END LOOP;
  -- Check for existence of given layer id
  IF layertype IS NULL THEN
    RAISE EXCEPTION 'No layer with id % is registered with topology %', layer_id, toponame;
  END IF;
  -- Verify compatibility between layer geometry type and
  -- TopoGeom requested geometry type
  IF layertype != 4 and layertype != tg_type THEN
    RAISE EXCEPTION 'A Layer of type % cannot contain a TopoGeometry of type %', layertype, tg_type;
  END IF;
  -- Set layer id and type in return object
  ret.layer_id = layer_id;
  ret.type = tg_type;
  --
  -- Get new TopoGeo id from sequence
  --
  FOR rec IN EXECUTE 'SELECT nextval(' ||
    quote_literal(
      quote_ident(toponame) || '.topogeo_s_' || layer_id
    ) || ')'
  LOOP
    ret.id = rec.nextval;
  END LOOP;
  -- Loop over outer dimension
  i = array_lower(tg_objs, 1);
  LOOP
    obj_id = tg_objs[i][1];
    obj_type = tg_objs[i][2];
    -- Elements of type 0 represent emptiness, just skip them
    IF obj_type = 0 THEN
      IF obj_id != 0 THEN
        RAISE EXCEPTION 'Malformed empty topo element {0,%} -- id must be 0 as well', obj_id;
      END IF;
    ELSE
      IF layerlevel = 0 THEN -- array specifies lower-level objects
        IF tg_type != 4 and tg_type != obj_type THEN
          RAISE EXCEPTION 'A TopoGeometry of type % cannot contain topology elements of type %', tg_type, obj_type;
        END IF;
      ELSE -- array specifies lower-level topogeometries
        IF obj_type != layerchild THEN
          RAISE EXCEPTION 'TopoGeom element layer do not match TopoGeom child layer';
        END IF;
        -- TODO: verify that the referred TopoGeometry really
        -- exists in the relation table ?
      END IF;
      --RAISE NOTICE 'obj:% type:% id:%', i, obj_type, obj_id;
      --
      -- Insert record into the Relation table
      --
      EXECUTE 'INSERT INTO '||quote_ident(toponame)
        || '.relation(topogeo_id, layer_id, '
        || 'element_id,element_type) '
        || ' VALUES ('||ret.id
        ||','||ret.layer_id
        || ',' || obj_id || ',' || obj_type || ');';
    END IF;
    i = i+1;
    IF i > array_upper(tg_objs, 1) THEN
      EXIT;
    END IF;
  END LOOP;
  RETURN ret;
END
$function$
]]></string>
			<comment><![CDATA[args: toponame, tg_type, layer_id, tg_objs - Creates a new topo geometry object from topo element array - tg_type: 1:[multi]point, 2:[multi]line, 3:[multi]poly, 4:collection]]></comment>
		</function>
		<function name="createtopogeom_001" id="Function_35674c10" isSystem="false" >
			<comment><![CDATA[args: toponame, tg_type, layer_id - Creates a new topo geometry object from topo element array - tg_type: 1:[multi]point, 2:[multi]line, 3:[multi]poly, 4:collection]]></comment>
		</function>
		<function name="createtopology" id="Function_39f2f68d" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.createtopology(character varying)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT topology.CreateTopology($1, ST_SRID('POINT EMPTY'::geometry), 0); $function$
CREATE OR REPLACE FUNCTION topology.createtopology(character varying, integer)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT topology.CreateTopology($1, $2, 0); $function$
CREATE OR REPLACE FUNCTION topology.createtopology(toponame character varying, srid integer, prec double precision)
 RETURNS integer
 LANGUAGE sql
 STRICT
AS $function$ SELECT topology.CreateTopology($1, $2, $3, false);$function$
CREATE OR REPLACE FUNCTION topology.createtopology(atopology character varying, srid integer, prec double precision, hasz boolean)
 RETURNS integer
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  rec RECORD;
  topology_id integer;
  ndims integer;
BEGIN
--  FOR rec IN SELECT * FROM pg_namespace WHERE text(nspname) = atopology
--  LOOP
--    RAISE EXCEPTION 'SQL/MM Spatial exception - schema already exists';
--  END LOOP;
  ndims = 2;
  IF hasZ THEN ndims = 3; END IF;
  ------ Fetch next id for the new topology
  FOR rec IN SELECT nextval('topology.topology_id_seq')
  LOOP
    topology_id = rec.nextval;
  END LOOP;

  EXECUTE 'CREATE SCHEMA ' || quote_ident(atopology);
  -------------{ face CREATION
  EXECUTE 
  'CREATE TABLE ' || quote_ident(atopology) || '.face ('
  || 'face_id SERIAL,'
  || ' CONSTRAINT face_primary_key PRIMARY KEY(face_id)'
  || ');';
  -- Add mbr column to the face table 
  EXECUTE
  'SELECT AddGeometryColumn('||quote_literal(atopology)
  ||',''face'',''mbr'','||quote_literal(srid)
  ||',''POLYGON'',2)'; -- 2d only mbr is good enough
  -------------} END OF face CREATION

  --------------{ node CREATION
  EXECUTE 
  'CREATE TABLE ' || quote_ident(atopology) || '.node ('
  || 'node_id SERIAL,'
  --|| 'geom GEOMETRY,'
  || 'containing_face INTEGER,'
  || 'CONSTRAINT node_primary_key PRIMARY KEY(node_id),'
  --|| 'CONSTRAINT node_geometry_type CHECK '
  --|| '( GeometryType(geom) = ''POINT'' ),'
  || 'CONSTRAINT face_exists FOREIGN KEY(containing_face) '
  || 'REFERENCES ' || quote_ident(atopology) || '.face(face_id)'
  || ');';
  -- Add geometry column to the node table 
  EXECUTE
  'SELECT AddGeometryColumn('||quote_literal(atopology)
  ||',''node'',''geom'','||quote_literal(srid)
  ||',''POINT'',' || ndims || ')';
  --------------} END OF node CREATION
  --------------{ edge CREATION
  -- edge_data table
  EXECUTE 
  'CREATE TABLE ' || quote_ident(atopology) || '.edge_data ('
  || 'edge_id SERIAL NOT NULL PRIMARY KEY,'
  || 'start_node INTEGER NOT NULL,'
  || 'end_node INTEGER NOT NULL,'
  || 'next_left_edge INTEGER NOT NULL,'
  || 'abs_next_left_edge INTEGER NOT NULL,'
  || 'next_right_edge INTEGER NOT NULL,'
  || 'abs_next_right_edge INTEGER NOT NULL,'
  || 'left_face INTEGER NOT NULL,'
  || 'right_face INTEGER NOT NULL,'
  --|| 'geom GEOMETRY NOT NULL,'
  --|| 'CONSTRAINT edge_geometry_type CHECK '
  --|| '( GeometryType(geom) = ''LINESTRING'' ),'
  || 'CONSTRAINT start_node_exists FOREIGN KEY(start_node)'
  || ' REFERENCES ' || quote_ident(atopology) || '.node(node_id),'
  || 'CONSTRAINT end_node_exists FOREIGN KEY(end_node) '
  || ' REFERENCES ' || quote_ident(atopology) || '.node(node_id),'
  || 'CONSTRAINT left_face_exists FOREIGN KEY(left_face) '
  || 'REFERENCES ' || quote_ident(atopology) || '.face(face_id),'
  || 'CONSTRAINT right_face_exists FOREIGN KEY(right_face) '
  || 'REFERENCES ' || quote_ident(atopology) || '.face(face_id),'
  || 'CONSTRAINT next_left_edge_exists FOREIGN KEY(abs_next_left_edge)'
  || ' REFERENCES ' || quote_ident(atopology)
  || '.edge_data(edge_id)'
  || ' DEFERRABLE INITIALLY DEFERRED,'
  || 'CONSTRAINT next_right_edge_exists '
  || 'FOREIGN KEY(abs_next_right_edge)'
  || ' REFERENCES ' || quote_ident(atopology)
  || '.edge_data(edge_id) '
  || ' DEFERRABLE INITIALLY DEFERRED'
  || ');';
  -- Add geometry column to the edge_data table 
  EXECUTE
  'SELECT AddGeometryColumn('||quote_literal(atopology)
  ||',''edge_data'',''geom'','||quote_literal(srid)
  ||',''LINESTRING'',' || ndims || ')';

  -- edge standard view (select rule)
  EXECUTE 'CREATE VIEW ' || quote_ident(atopology)
    || '.edge AS SELECT '
    || ' edge_id, start_node, end_node, next_left_edge, '
    || ' next_right_edge, '
    || ' left_face, right_face, geom FROM '
    || quote_ident(atopology) || '.edge_data';
  -- edge standard view description
  EXECUTE 'COMMENT ON VIEW ' || quote_ident(atopology)
    || '.edge IS '
    || '''Contains edge topology primitives''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.edge_id IS '
    || '''Unique identifier of the edge''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.start_node IS '
    || '''Unique identifier of the node at the start of the edge''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.end_node IS '
    || '''Unique identifier of the node at the end of the edge''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.next_left_edge IS '
    || '''Unique identifier of the next edge of the face on the left (when looking in the direction from START_NODE to END_NODE), moving counterclockwise around the face boundary''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.next_right_edge IS '
    || '''Unique identifier of the next edge of the face on the right (when looking in the direction from START_NODE to END_NODE), moving counterclockwise around the face boundary''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.left_face IS '
    || '''Unique identifier of the face on the left side of the edge when looking in the direction from START_NODE to END_NODE''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.right_face IS '
    || '''Unique identifier of the face on the right side of the edge when looking in the direction from START_NODE to END_NODE''';
  EXECUTE 'COMMENT ON COLUMN ' || quote_ident(atopology)
    || '.edge.geom IS '
    || '''The geometry of the edge''';
  -- edge standard view (insert rule)
  EXECUTE 'CREATE RULE edge_insert_rule AS ON INSERT '
          || 'TO ' || quote_ident(atopology)
    || '.edge DO INSTEAD '
                || ' INSERT into ' || quote_ident(atopology)
    || '.edge_data '
                || ' VALUES (NEW.edge_id, NEW.start_node, NEW.end_node, '
    || ' NEW.next_left_edge, abs(NEW.next_left_edge), '
    || ' NEW.next_right_edge, abs(NEW.next_right_edge), '
    || ' NEW.left_face, NEW.right_face, NEW.geom);';
  --------------} END OF edge CREATION
  --------------{ layer sequence 
  EXECUTE 'CREATE SEQUENCE '
    || quote_ident(atopology) || '.layer_id_seq;';
  --------------} layer sequence
  --------------{ relation CREATION
  --
  EXECUTE 
  'CREATE TABLE ' || quote_ident(atopology) || '.relation ('
  || ' topogeo_id integer NOT NULL, '
  || ' layer_id integer NOT NULL, ' 
  || ' element_id integer NOT NULL, '
  || ' element_type integer NOT NULL, '
  || ' UNIQUE(layer_id,topogeo_id,element_id,element_type));';
  EXECUTE 
  'CREATE TRIGGER relation_integrity_checks '
  ||'BEFORE UPDATE OR INSERT ON '
  || quote_ident(atopology) || '.relation FOR EACH ROW '
  || ' EXECUTE PROCEDURE topology.RelationTrigger('
  ||topology_id||','||quote_literal(atopology)||')';
  --------------} END OF relation CREATION
  
  ------- Default (world) face
  EXECUTE 'INSERT INTO ' || quote_ident(atopology) || '.face(face_id) VALUES(0);';
  ------- GiST index on face
  EXECUTE 'CREATE INDEX face_gist ON '
    || quote_ident(atopology)
    || '.face using gist (mbr);';
  ------- GiST index on node
  EXECUTE 'CREATE INDEX node_gist ON '
    || quote_ident(atopology)
    || '.node using gist (geom);';
  ------- GiST index on edge
  EXECUTE 'CREATE INDEX edge_gist ON '
    || quote_ident(atopology)
    || '.edge_data using gist (geom);';
  ------- Indexes on left_face and right_face of edge_data
  ------- NOTE: these indexes speed up GetFaceGeometry (and thus
  -------       TopoGeometry::Geometry) by a factor of 10 !
  -------       See http://trac.osgeo.org/postgis/ticket/806
  EXECUTE 'CREATE INDEX edge_left_face_idx ON '
    || quote_ident(atopology)
    || '.edge_data (left_face);';
  EXECUTE 'CREATE INDEX edge_right_face_idx ON '
    || quote_ident(atopology)
    || '.edge_data (right_face);';
  ------- Indexes on start_node and end_node of edge_data
  ------- NOTE: this indexes speed up node deletion
  -------       by a factor of 1000 !
  -------       See http://trac.osgeo.org/postgis/ticket/2082
  EXECUTE 'CREATE INDEX edge_start_node_idx ON '
    || quote_ident(atopology)
    || '.edge_data (start_node);';
  EXECUTE 'CREATE INDEX edge_end_node_idx ON '
    || quote_ident(atopology)
    || '.edge_data (end_node);';
  -- TODO: consider also adding an index on node.containing_face 
  ------- Add record to the "topology" metadata table
  EXECUTE 'INSERT INTO topology.topology '
    || '(id, name, srid, precision, hasZ) VALUES ('
    || quote_literal(topology_id) || ','
    || quote_literal(atopology) || ','
    || quote_literal(srid) || ',' || quote_literal(prec)
    || ',' || hasZ
    || ')';
  RETURN topology_id;
END
$function$
]]></string>
			<comment><![CDATA[args: topology_schema_name, srid, tolerance, hasz - Creates a new topology schema and registers this new schema in the topology.topology table.]]></comment>
		</function>
		<function name="createtopology_001" id="Function_ecec223" isSystem="false" >
			<comment><![CDATA[args: topology_schema_name, srid, tolerance - Creates a new topology schema and registers this new schema in the topology.topology table.]]></comment>
		</function>
		<function name="createtopology_002" id="Function_3740b0f6" isSystem="false" >
			<comment><![CDATA[args: topology_schema_name, srid - Creates a new topology schema and registers this new schema in the topology.topology table.]]></comment>
		</function>
		<function name="createtopology_003" id="Function_22f5f73" isSystem="false" >
			<comment><![CDATA[args: topology_schema_name - Creates a new topology schema and registers this new schema in the topology.topology table.]]></comment>
		</function>
		<function name="droptopogeometrycolumn" id="Function_25e83c4a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.droptopogeometrycolumn(schema character varying, tbl character varying, col character varying)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
  lyrinfo RECORD;
  ok BOOL;
  result text;
BEGIN
        -- Get layer and topology info
  ok = false;
  FOR rec IN EXECUTE 'SELECT t.name as toponame, l.* FROM '
    || 'topology.topology t, topology.layer l '
    || ' WHERE l.topology_id = t.id'
    || ' AND l.schema_name = ' || quote_literal(schema)
    || ' AND l.table_name = ' || quote_literal(tbl)
    || ' AND l.feature_column = ' || quote_literal(col)
  LOOP
    ok = true;
    lyrinfo = rec;
  END LOOP;
  -- Layer not found
  IF NOT ok THEN
    RAISE EXCEPTION 'No layer registered on %.%.%',
      schema,tbl,col;
  END IF;
    
  -- Clean up the topology schema
  BEGIN
    -- Cleanup the relation table
    EXECUTE 'DELETE FROM ' || quote_ident(lyrinfo.toponame)
      || '.relation '
      || ' WHERE '
      || 'layer_id = ' || lyrinfo.layer_id;
    -- Drop the sequence for topogeoms in this layer
    EXECUTE 'DROP SEQUENCE ' || quote_ident(lyrinfo.toponame)
      || '.topogeo_s_' || lyrinfo.layer_id;
  EXCEPTION
    WHEN UNDEFINED_TABLE THEN
      RAISE NOTICE '%', SQLERRM;
    WHEN OTHERS THEN
      RAISE EXCEPTION 'Got % (%)', SQLERRM, SQLSTATE;
  END;
  ok = false;
  FOR rec IN SELECT * FROM pg_namespace n, pg_class c, pg_attribute a
    WHERE text(n.nspname) = schema
    AND c.relnamespace = n.oid
    AND text(c.relname) = tbl
    AND a.attrelid = c.oid
    AND text(a.attname) = col
  LOOP
    ok = true;
    EXIT;
  END LOOP;

  IF ok THEN
    -- Set feature column to NULL to bypass referential integrity
    -- checks
    EXECUTE 'UPDATE ' || quote_ident(schema) || '.'
      || quote_ident(tbl)
      || ' SET ' || quote_ident(col)
      || ' = NULL';
  END IF;
  -- Delete the layer record
  EXECUTE 'DELETE FROM topology.layer '
    || ' WHERE topology_id = ' || lyrinfo.topology_id
    || ' AND layer_id = ' || lyrinfo.layer_id;
  IF ok THEN
    -- Drop the layer column
    EXECUTE 'ALTER TABLE ' || quote_ident(schema) || '.'
      || quote_ident(tbl)
      || ' DROP ' || quote_ident(col)
      || ' cascade';
  END IF;
  result = 'Layer ' || lyrinfo.layer_id || ' ('
    || schema || '.' || tbl || '.' || col
    || ') dropped';
  RETURN result;
END;
$function$
]]></string>
			<comment><![CDATA[args: schema_name, table_name, column_name - Drops the topogeometry column from the table named table_name in schema schema_name and unregisters the columns from topology.layer table.]]></comment>
		</function>
		<function name="droptopology" id="Function_1dd5d02" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.droptopology(atopology character varying)
 RETURNS text
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  topoid integer;
  rec RECORD;
BEGIN
  -- Get topology id
        SELECT id FROM topology.topology into topoid
                WHERE name = atopology;

  IF topoid IS NOT NULL THEN
    RAISE NOTICE 'Dropping all layers from topology % (%)',
      atopology, topoid;
    -- Drop all layers in the topology
    FOR rec IN EXECUTE 'SELECT * FROM topology.layer WHERE '
      || ' topology_id = ' || topoid
    LOOP
      EXECUTE 'SELECT topology.DropTopoGeometryColumn('
        || quote_literal(rec.schema_name)
        || ','
        || quote_literal(rec.table_name)
        || ','
        || quote_literal(rec.feature_column)
        || ')';
    END LOOP;
    -- Delete record from topology.topology
    EXECUTE 'DELETE FROM topology.topology WHERE id = '
      || topoid;
  END IF;

  -- Drop the schema (if it exists)
  FOR rec IN SELECT * FROM pg_namespace WHERE text(nspname) = atopology
  LOOP
    EXECUTE 'DROP SCHEMA '||quote_ident(atopology)||' CASCADE';
  END LOOP;
  RETURN 'Topology ' || quote_literal(atopology) || ' dropped';
END
$function$
]]></string>
			<comment><![CDATA[args: topology_schema_name - Use with caution: Drops a topology schema and deletes its reference from topology.topology table and references to tables in that schema from the geometry_columns table.]]></comment>
		</function>
		<function name="equals" id="Function_3afa5f06" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.equals(tg1 topogeometry, tg2 topogeometry)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  rec RECORD;
  toponame varchar;
  query text;
BEGIN
  IF tg1.topology_id != tg2.topology_id THEN
    -- TODO: revert to ::geometry instead ?
    RAISE EXCEPTION 'Cannot compare TopoGeometries from different topologies';
  END IF;
  -- Not the same type, not equal
  IF tg1.type != tg2.type THEN
    RETURN FALSE;
  END IF;
  -- Geometry collection are not currently supported
  IF tg2.type = 4 THEN
    RAISE EXCEPTION 'GeometryCollection are not supported by equals()';
  END IF;
        -- Get topology name
        SELECT name FROM topology.topology into toponame
                WHERE id = tg1.topology_id;
  -- Two geometries are equal if they are composed by 
  -- the same TopoElements
  FOR rec IN EXECUTE 'SELECT * FROM '
    || ' topology.GetTopoGeomElements('
    || quote_literal(toponame) || ', '
    || tg1.layer_id || ',' || tg1.id || ') '
    || ' EXCEPT SELECT * FROM '
    || ' topology.GetTopogeomElements('
    || quote_literal(toponame) || ', '
    || tg2.layer_id || ',' || tg2.id || ');'
  LOOP
    RETURN FALSE;
  END LOOP;
  FOR rec IN EXECUTE 'SELECT * FROM '
    || ' topology.GetTopoGeomElements('
    || quote_literal(toponame) || ', '
    || tg2.layer_id || ',' || tg2.id || ')'
    || ' EXCEPT SELECT * FROM '
    || ' topology.GetTopogeomElements('
    || quote_literal(toponame) || ', '
    || tg1.layer_id || ',' || tg1.id || '); '
  LOOP
    RETURN FALSE;
  END LOOP;
  RETURN TRUE;
END
$function$
]]></string>
			<comment><![CDATA[args: tg1, tg2 - Returns true if two topogeometries are composed of the same topology primitives.]]></comment>
		</function>
		<function name="geometry" id="Function_27d5ff9e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.geometry(topogeom topogeometry)
 RETURNS geometry
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  toponame varchar;
  geom geometry;
  rec RECORD;
  plyr RECORD;
  clyr RECORD;
  sql TEXT;
BEGIN
  -- Get topology name
  SELECT name FROM topology.topology
  WHERE id = topogeom.topology_id
  INTO toponame;
  IF toponame IS NULL THEN
    RAISE EXCEPTION 'Invalid TopoGeometry (unexistent topology id %)', topogeom.topology_id;
  END IF;
  -- Get layer info
  SELECT * FROM topology.layer
    WHERE topology_id = topogeom.topology_id
    AND layer_id = topogeom.layer_id
    INTO plyr;
  IF plyr IS NULL THEN
    RAISE EXCEPTION 'Could not find TopoGeometry layer % in topology %', topogeom.layer_id, topogeom.topology_id;
  END IF;
  --
  -- If this feature layer is on any level > 0 we will
  -- compute the topological union of all child features
  -- in fact recursing.
  --
  IF plyr.level > 0 THEN -- {
    -- Get child layer info
    SELECT * FROM topology.layer WHERE layer_id = plyr.child_id
      AND topology_id = topogeom.topology_id
      INTO clyr;
    IF clyr IS NULL THEN
      RAISE EXCEPTION 'Invalid layer % in topology % (unexistent child layer %)', topogeom.layer_id, topogeom.topology_id, plyr.child_id;
    END IF;
    sql := 'SELECT st_multi(st_union(topology.Geometry('
      || quote_ident(clyr.feature_column)
      || '))) as geom FROM '
      || quote_ident(clyr.schema_name) || '.'
      || quote_ident(clyr.table_name)
      || ', ' || quote_ident(toponame) || '.relation pr'
      || ' WHERE '
      || ' pr.topogeo_id = ' || topogeom.id
      || ' AND '
      || ' pr.layer_id = ' || topogeom.layer_id
      || ' AND '
      || ' id('||quote_ident(clyr.feature_column)
      || ') = pr.element_id '
      || ' AND '
      || 'layer_id('||quote_ident(clyr.feature_column)
      || ') = pr.element_type ';
    --RAISE DEBUG '%', query;
    EXECUTE sql INTO geom;
      
  ELSIF topogeom.type = 3 THEN -- [multi]polygon -- }{
    sql := 'SELECT st_multi(st_union('
      || 'topology.ST_GetFaceGeometry('
      || quote_literal(toponame) || ','
      || 'element_id))) as g FROM ' 
      || quote_ident(toponame)
      || '.relation WHERE topogeo_id = '
      || topogeom.id || ' AND layer_id = '
      || topogeom.layer_id || ' AND element_type = 3 ';
    EXECUTE sql INTO geom;
  ELSIF topogeom.type = 2 THEN -- [multi]line -- }{
    sql := 
      'SELECT st_multi(ST_LineMerge(ST_Collect(e.geom))) as g FROM '
      || quote_ident(toponame) || '.edge e, '
      || quote_ident(toponame) || '.relation r '
      || ' WHERE r.topogeo_id = ' || topogeom.id
      || ' AND r.layer_id = ' || topogeom.layer_id
      || ' AND r.element_type = 2 '
      || ' AND abs(r.element_id) = e.edge_id';
    EXECUTE sql INTO geom;
  
  ELSIF topogeom.type = 1 THEN -- [multi]point -- }{
    sql :=
      'SELECT st_multi(st_union(n.geom)) as g FROM '
      || quote_ident(toponame) || '.node n, '
      || quote_ident(toponame) || '.relation r '
      || ' WHERE r.topogeo_id = ' || topogeom.id
      || ' AND r.layer_id = ' || topogeom.layer_id
      || ' AND r.element_type = 1 '
      || ' AND r.element_id = n.node_id';
    EXECUTE sql INTO geom;
  ELSIF topogeom.type = 4 THEN -- mixed collection -- }{
    sql := 'WITH areas AS ( SELECT ST_Union('
      || 'topology.ST_GetFaceGeometry('
      || quote_literal(toponame) || ','
      || 'element_id)) as g FROM ' 
      || quote_ident(toponame)
      || '.relation WHERE topogeo_id = '
      || topogeom.id || ' AND layer_id = '
      || topogeom.layer_id || ' AND element_type = 3), '
      || 'lines AS ( SELECT ST_LineMerge(ST_Collect(e.geom)) as g FROM '
      || quote_ident(toponame) || '.edge e, '
      || quote_ident(toponame) || '.relation r '
      || ' WHERE r.topogeo_id = ' || topogeom.id
      || ' AND r.layer_id = ' || topogeom.layer_id
      || ' AND r.element_type = 2 '
      || ' AND abs(r.element_id) = e.edge_id ), '
      || ' points as ( SELECT st_union(n.geom) as g FROM '
      || quote_ident(toponame) || '.node n, '
      || quote_ident(toponame) || '.relation r '
      || ' WHERE r.topogeo_id = ' || topogeom.id
      || ' AND r.layer_id = ' || topogeom.layer_id
      || ' AND r.element_type = 1 '
      || ' AND r.element_id = n.node_id ), '
      || ' un as ( SELECT g FROM areas UNION ALL SELECT g FROM lines '
      || '          UNION ALL SELECT g FROM points ) '
      || 'SELECT ST_Multi(ST_Collect(g)) FROM un';
    EXECUTE sql INTO geom;
  ELSE -- }{
    RAISE EXCEPTION 'Invalid TopoGeometries (unknown type %)', topogeom.type;
  END IF; -- }
  IF geom IS NULL THEN
    IF topogeom.type = 3 THEN -- [multi]polygon
      geom := 'MULTIPOLYGON EMPTY';
    ELSIF topogeom.type = 2 THEN -- [multi]line
      geom := 'MULTILINESTRING EMPTY';
    ELSIF topogeom.type = 1 THEN -- [multi]point
      geom := 'MULTIPOINT EMPTY';
    ELSE
      geom := 'GEOMETRYCOLLECTION EMPTY';
    END IF;
  END IF;
  RETURN geom;
END
$function$
]]></string>
		</function>
		<function name="geometrytype" id="Function_3b128cbb" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.geometrytype(tg topogeometry)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT CASE
		WHEN type($1) = 1 THEN 'MULTIPOINT'
		WHEN type($1) = 2 THEN 'MULTILINESTRING'
		WHEN type($1) = 3 THEN 'MULTIPOLYGON'
		WHEN type($1) = 4 THEN 'GEOMETRYCOLLECTION'
		ELSE 'UNEXPECTED'
		END;
$function$
]]></string>
		</function>
		<function name="getedgebypoint" id="Function_30632ff9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.getedgebypoint(atopology character varying, apoint geometry, tol1 double precision)
 RETURNS integer
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
	sql text;
	idedge int;
BEGIN
	--
	-- Atopology and apoint are required
	-- 
	IF atopology IS NULL OR apoint IS NULL THEN
		RAISE EXCEPTION 'Invalid null argument';
	END IF;
	--
	-- Apoint must be a point
	--
	IF substring(geometrytype(apoint), 1, 5) != 'POINT'
	THEN
		RAISE EXCEPTION 'Node geometry must be a point';
	END IF;
	--
	-- Tolerance must be >= 0
	--
	IF tol1 < 0
	THEN
		RAISE EXCEPTION 'Tolerance must be >=0';
	END IF;

    if tol1 = 0 then
    	sql := 'SELECT a.edge_id FROM ' 
        || quote_ident(atopology) 
        || '.edge_data as a WHERE '
        || '(a.geom && ' || quote_literal(apoint::text)||'::geometry) '
        || ' AND (ST_Intersects(a.geom,' || quote_literal(apoint::text)||'::geometry) );';
    else
    	sql := 'SELECT a.edge_id FROM ' 
        || quote_ident(atopology) 
        || '.edge_data as a WHERE '
        || '(ST_DWithin(a.geom,' || quote_literal(apoint::text)||'::geometry,' || tol1::text || ') );';
    end if;
    BEGIN
    EXECUTE sql INTO STRICT idedge;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            idedge = 0;
        WHEN TOO_MANY_ROWS THEN
            RAISE EXCEPTION 'Two or more edges found';
    END;
	RETURN idedge;
	
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, apoint, tol - Find the edge-id of an edge that intersects a given point]]></comment>
		</function>
		<function name="getfacebypoint" id="Function_f6d72ba" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.getfacebypoint(atopology character varying, apoint geometry, tol1 double precision)
 RETURNS integer
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
	sql text;
	idface int;
BEGIN
    idface := -1;
	--
	-- Atopology and apoint are required
	-- 
	IF atopology IS NULL OR apoint IS NULL THEN
		RAISE EXCEPTION 'Invalid null argument';
	END IF;
	--
	-- Apoint must be a point
	--
	IF substring(geometrytype(apoint), 1, 5) != 'POINT'
	THEN
		RAISE EXCEPTION 'Node geometry must be a point';
	END IF;
	--
	-- Tolerance must be >= 0
	--
	IF tol1 < 0
	THEN
		RAISE EXCEPTION 'Tolerance must be >=0';
	END IF;
    --
    -- first test is to check if there is inside an mbr
    --
    if tol1 = 0 then
    	sql := 'SELECT a.face_id FROM ' 
        || quote_ident(atopology) 
        || '.face as a WHERE '
        || '(a.mbr && ' || quote_literal(apoint::text)||'::geometry) '
        || 'LIMIT 1;';
    else
    	sql := 'SELECT a.face_id FROM ' 
        || quote_ident(atopology) 
        || '.face as a WHERE '
        || '(ST_DWithin(a.mbr,' || quote_literal(apoint::text)||'::geometry,' || tol1::text || ') ) '
        || 'LIMIT 1;';
    end if;
    BEGIN
    EXECUTE sql INTO STRICT idface;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            idface = 0;
    END;
    if idface > 0 then
        --
        -- probably there is something so now check the exact test
        --
    	if tol1 = 0 then
        	sql := 'SELECT e.face_id FROM ('
            || 'SELECT d.face_id,ST_BuildArea(ST_Union(geom)) as geom FROM ('
    		|| 'SELECT b.edge_id as edge_id,b.left_face as face_id,b.geom as geom FROM '
        	|| quote_ident(atopology) || '.edge_data as b,'
            || '(SELECT a.face_id FROM '
    		|| quote_ident(atopology) || '.face as a '
        	|| 'WHERE ST_Intersects(a.mbr,' || quote_literal(apoint::text)||'::geometry)=true'
            || ') as c '
    		|| 'WHERE (b.left_face = c.face_id) '
        	|| ' UNION ALL '
            || 'SELECT b.edge_id as edge_id, b.right_face as face_id, b.geom as geom FROM '
    		|| quote_ident(atopology) || '.edge_data as b,'
        	|| '(SELECT a.face_id FROM '
            || quote_ident(atopology) || '.face as a '
    		|| 'WHERE ST_Intersects(a.mbr,' || quote_literal(apoint::text)||'::geometry)=true'
        	|| ') as c '
            || 'WHERE (b.right_face = c.face_id) '
    		|| ') as d '
        	|| 'GROUP BY face_id '
            || ') as e '
    		|| 'WHERE ST_Intersects(e.geom, ' || quote_literal(apoint::text)||'::geometry)=true;';
        else
        	sql := 'SELECT e.face_id FROM ('
            || 'SELECT d.face_id,ST_BuildArea(ST_Union(geom)) as geom FROM ('
    		|| 'SELECT b.edge_id as edge_id,b.left_face as face_id,b.geom as geom FROM '
        	|| quote_ident(atopology) || '.edge_data as b,'
            || '(SELECT a.face_id FROM '
    		|| quote_ident(atopology) || '.face as a '
        	|| 'WHERE ST_DWithin(a.mbr,' || quote_literal(apoint::text)||'::geometry,' || tol1::text || ')=true'
            || ') as c '
    		|| 'WHERE (b.left_face = c.face_id) '
        	|| ' UNION ALL '
            || 'SELECT b.edge_id as edge_id, b.right_face as face_id, b.geom as geom FROM '
    		|| quote_ident(atopology) || '.edge_data as b,'
        	|| '(SELECT a.face_id FROM '
            || quote_ident(atopology) || '.face as a '
    		|| 'WHERE ST_DWithin(a.mbr,' || quote_literal(apoint::text)||'::geometry,' || tol1::text || ')=true'
        	|| ') as c '
            || 'WHERE (b.right_face = c.face_id) '
    		|| ') as d '
        	|| 'GROUP BY face_id '
            || ') as e '
    		|| 'WHERE ST_DWithin(e.geom, ' || quote_literal(apoint::text)||'::geometry,' || tol1::text || ')=true;';
        end if;
	
    	RAISE DEBUG ' ==> %',sql;
        BEGIN
            EXECUTE sql INTO STRICT idface;
        	EXCEPTION
        	    WHEN NO_DATA_FOUND THEN
                    idface = 0;
                WHEN TOO_MANY_ROWS THEN
                    RAISE EXCEPTION 'Two or more faces found';
            END;
    end if;
    
    RETURN idface;
	
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, apoint, tol - Find the face-id of a face that intersects a given point]]></comment>
		</function>
		<function name="getnodebypoint" id="Function_357abad9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.getnodebypoint(atopology character varying, apoint geometry, tol1 double precision)
 RETURNS integer
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
	sql text;
	idnode int;
BEGIN
	--
	-- Atopology and apoint are required
	-- 
	IF atopology IS NULL OR apoint IS NULL THEN
		RAISE EXCEPTION 'Invalid null argument';
	END IF;
	--
	-- Apoint must be a point
	--
	IF substring(geometrytype(apoint), 1, 5) != 'POINT'
	THEN
		RAISE EXCEPTION 'Node geometry must be a point';
	END IF;
	--
	-- Tolerance must be >= 0
	--
	IF tol1 < 0
	THEN
		RAISE EXCEPTION 'Tolerance must be >=0';
	END IF;

    if tol1 = 0 then
    	sql := 'SELECT a.node_id FROM ' 
        || quote_ident(atopology) 
        || '.node as a WHERE '
        || '(a.geom && ' || quote_literal(apoint::text)||'::geometry) '
        || ' AND (ST_Intersects(a.geom,' || quote_literal(apoint::text)||'::geometry) );';
    else
    	sql := 'SELECT a.node_id FROM ' 
        || quote_ident(atopology) 
        || '.node as a WHERE '
        || '(ST_DWithin(a.geom,' || quote_literal(apoint::text)||'::geometry,' || tol1::text || ') );';
    end if;
    BEGIN
    EXECUTE sql INTO STRICT idnode;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            idnode = 0;
        WHEN TOO_MANY_ROWS THEN
            RAISE EXCEPTION 'Two or more nodes found';
    END;
	RETURN idnode;
	
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, point, tol - Find the id of a node at a point location]]></comment>
		</function>
		<function name="getnodeedges" id="Function_f28ecb6" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.getnodeedges(atopology character varying, anode integer)
 RETURNS SETOF getfaceedges_returntype
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  curedge int;
  nextedge int;
  rec RECORD;
  retrec topology.GetFaceEdges_ReturnType;
  n int;
  sql text;
BEGIN
  n := 0;
  sql :=
    'WITH incident_edges AS ( SELECT edge_id, start_node, end_node, ST_RemoveRepeatedPoints(geom) as geom FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE start_node = ' || anode
    || ' or end_node = ' || anode
    || ') SELECT edge_id, ST_Azimuth(ST_StartPoint(geom), ST_PointN(geom, 2)) as az FROM  incident_edges WHERE start_node = ' || anode
    || ' UNION ALL SELECT -edge_id, ST_Azimuth(ST_EndPoint(geom), ST_PointN(geom, ST_NumPoints(geom)-1)) FROM incident_edges WHERE end_node = ' || anode
    || ' ORDER BY az';


  FOR rec IN EXECUTE sql
  LOOP -- incident edges {


    n := n + 1;
    retrec.sequence := n;
    retrec.edge := rec.edge_id;
    RETURN NEXT retrec;
  END LOOP; -- incident edges }
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anode - Returns an ordered set of edges incident to the given node.]]></comment>
		</function>
		<function name="getringedges" id="Function_1481fb91" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.getringedges(atopology character varying, anedge integer, maxedges integer DEFAULT NULL::integer)
 RETURNS SETOF getfaceedges_returntype
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  rec RECORD;
  retrec topology.GetFaceEdges_ReturnType;
  n int;
  sql text;
BEGIN
  sql := 'WITH RECURSIVE edgering AS ( SELECT '
    || anedge
    || ' as signed_edge_id, edge_id, next_left_edge, next_right_edge FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE edge_id = '
    || abs(anedge)
    || ' UNION '
    || ' SELECT CASE WHEN p.signed_edge_id < 0 THEN p.next_right_edge '
    || ' ELSE p.next_left_edge END, e.edge_id, e.next_left_edge, e.next_right_edge '
    || ' FROM ' || quote_ident(atopology)
    || '.edge_data e, edgering p WHERE e.edge_id = CASE WHEN p.signed_edge_id < 0 '
    || 'THEN abs(p.next_right_edge) ELSE abs(p.next_left_edge) END ) SELECT * FROM edgering';
  n := 1;
  FOR rec IN EXECUTE sql
  LOOP
    retrec.sequence := n;
    retrec.edge := rec.signed_edge_id;
    RETURN NEXT retrec;
    n := n + 1;
    IF n > maxedges THEN
      RAISE EXCEPTION 'Max traversing limit hit: %', maxedges;
    END IF;
  END LOOP;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, aring, max_edges=null - Returns the ordered set of signed edge identifiers met by walking on ana given edge side.]]></comment>
		</function>
		<function name="gettopogeomelementarray" id="Function_25e7a8ce" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.gettopogeomelementarray(tg topogeometry)
 RETURNS topoelementarray
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  toponame varchar;
BEGIN
  toponame = topology.GetTopologyName(tg.topology_id);
  RETURN topology.GetTopoGeomElementArray(toponame, tg.layer_id, tg.id);
END;
$function$
CREATE OR REPLACE FUNCTION topology.gettopogeomelementarray(toponame character varying, layer_id integer, tgid integer)
 RETURNS topoelementarray
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  rec RECORD;
  tg_objs varchar := '{';
  i integer;
  query text;
BEGIN
  query = 'SELECT * FROM topology.GetTopoGeomElements('
    || quote_literal(toponame) || ','
    || quote_literal(layer_id) || ','
    || quote_literal(tgid)
    || ') as obj ORDER BY obj';


  -- TODO: why not using array_agg here ?
  i = 1;
  FOR rec IN EXECUTE query
  LOOP
    IF i > 1 THEN
      tg_objs = tg_objs || ',';
    END IF;
    tg_objs = tg_objs || '{'
      || rec.obj[1] || ',' || rec.obj[2]
      || '}';
    i = i+1;
  END LOOP;
  tg_objs = tg_objs || '}';
  RETURN tg_objs;
END;
$function$
]]></string>
			<comment><![CDATA[args: toponame, layer_id, tg_id - Returns a topoelementarray (an array of topoelements) containing the topological elements and type of the given TopoGeometry (primitive elements)]]></comment>
		</function>
		<function name="gettopogeomelementarray_001" id="Function_3ae99b76" isSystem="false" >
			<comment><![CDATA[args: tg - Returns a topoelementarray (an array of topoelements) containing the topological elements and type of the given TopoGeometry (primitive elements)]]></comment>
		</function>
		<function name="gettopogeomelements" id="Function_13da10f9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.gettopogeomelements(tg topogeometry)
 RETURNS SETOF topoelement
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  toponame varchar;
  rec RECORD;
BEGIN
  toponame = topology.GetTopologyName(tg.topology_id);
  FOR rec IN SELECT * FROM topology.GetTopoGeomElements(toponame,
    tg.layer_id,tg.id) as ret
  LOOP
    RETURN NEXT rec.ret;
  END LOOP;
  RETURN;
END;
$function$
CREATE OR REPLACE FUNCTION topology.gettopogeomelements(toponame character varying, layerid integer, tgid integer)
 RETURNS SETOF topoelement
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  ret topology.TopoElement;
  rec RECORD;
  rec2 RECORD;
  query text;
  query2 text;
  lyr RECORD;
  ok bool;
BEGIN
  -- Get layer info
  ok = false;
  FOR rec IN EXECUTE 'SELECT * FROM '
    || ' topology.layer '
    || ' WHERE layer_id = ' || layerid
  LOOP
    lyr = rec;
    ok = true;
  END LOOP;
  IF NOT ok THEN
    RAISE EXCEPTION 'Layer % does not exist', layerid;
  END IF;

  query = 'SELECT abs(element_id) as element_id, element_type FROM '
    || quote_ident(toponame) || '.relation WHERE '
    || ' layer_id = ' || layerid
    || ' AND topogeo_id = ' || quote_literal(tgid)
    || ' ORDER BY element_type, element_id';
  --RAISE NOTICE 'Query: %', query;
  FOR rec IN EXECUTE query
  LOOP
    IF lyr.level > 0 THEN
      query2 = 'SELECT * from topology.GetTopoGeomElements('
        || quote_literal(toponame) || ','
        || rec.element_type
        || ','
        || rec.element_id
        || ') as ret;';
      --RAISE NOTICE 'Query2: %', query2;
      FOR rec2 IN EXECUTE query2
      LOOP
        RETURN NEXT rec2.ret;
      END LOOP;
    ELSE
      ret = '{' || rec.element_id || ',' || rec.element_type || '}';
      RETURN NEXT ret;
    END IF;
  
  END LOOP;
  RETURN;
END;
$function$
]]></string>
			<comment><![CDATA[args: toponame, layer_id, tg_id - Returns a set of topoelement objects containing the topological element_id,element_type of the given TopoGeometry (primitive elements)]]></comment>
		</function>
		<function name="gettopogeomelements_001" id="Function_a008042" isSystem="false" >
			<comment><![CDATA[args: tg - Returns a set of topoelement objects containing the topological element_id,element_type of the given TopoGeometry (primitive elements)]]></comment>
		</function>
		<function name="gettopologyid" id="Function_e784117" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.gettopologyid(toponame character varying)
 RETURNS integer
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  ret integer;
BEGIN
        SELECT id FROM topology.topology into ret
                WHERE name = toponame;
  RETURN ret;
END
$function$
]]></string>
			<comment><![CDATA[args: toponame - Returns the SRID of a topology in the topology.topology table given the name of the topology.]]></comment>
		</function>
		<function name="gettopologyname" id="Function_2405bcb5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.gettopologyname(topoid integer)
 RETURNS character varying
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  ret varchar;
BEGIN
        SELECT name FROM topology.topology into ret
                WHERE id = topoid;
  RETURN ret;
END
$function$
]]></string>
			<comment><![CDATA[args: topology_id - Returns the name of a topology (schema) given the id of the topology.]]></comment>
		</function>
		<function name="gettopologysrid" id="Function_fda6af5" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.gettopologysrid(toponame character varying)
 RETURNS integer
 LANGUAGE sql
 STABLE STRICT
AS $function$
  SELECT SRID FROM topology.topology WHERE name = $1;
$function$
]]></string>
		</function>
		<function name="intersects" id="Function_2618db6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.intersects(tg1 topogeometry, tg2 topogeometry)
 RETURNS boolean
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  tgbuf topology.TopoGeometry;
  rec RECORD;
  toponame varchar;
  query text;
BEGIN
  IF tg1.topology_id != tg2.topology_id THEN
    -- TODO: revert to ::geometry instead ?
    RAISE EXCEPTION 'Cannot compute intersection between TopoGeometries from different topologies';
  END IF;
  -- Order TopoGeometries so that tg1 has less-or-same
  -- dimensionality of tg1 (point,line,polygon,collection)
  IF tg1.type > tg2.type THEN
    tgbuf := tg2;
    tg2 := tg1;
    tg1 := tgbuf;
  END IF;
  --RAISE NOTICE 'tg1.id:% tg2.id:%', tg1.id, tg2.id;
  -- Geometry collection are not currently supported
  IF tg2.type = 4 THEN
    RAISE EXCEPTION 'GeometryCollection are not supported by intersects()';
  END IF;
        -- Get topology name
        SELECT name FROM topology.topology into toponame
                WHERE id = tg1.topology_id;
  -- Hierarchical TopoGeometries are not currently supported
  query = 'SELECT level FROM topology.layer'
    || ' WHERE '
    || ' topology_id = ' || tg1.topology_id
    || ' AND '
    || '( layer_id = ' || tg1.layer_id
    || ' OR layer_id = ' || tg2.layer_id
    || ' ) '
    || ' AND level > 0 ';
  --RAISE NOTICE '%', query;
  FOR rec IN EXECUTE query
  LOOP
    -- TODO: revert to ::geometry instead ?
    RAISE EXCEPTION 'Hierarchical TopoGeometries are not currently supported by intersects()';
  END LOOP;
  IF tg1.type = 1 THEN -- [multi]point

    IF tg2.type = 1 THEN -- point/point
  ---------------------------------------------------------
  -- 
  --  Two [multi]point features intersect if they share
  --  any Node 
  --
  --
  --
      query =
        'SELECT a.topogeo_id FROM '
        || quote_ident(toponame) ||
        '.relation a, '
        || quote_ident(toponame) ||
        '.relation b '
        || 'WHERE a.layer_id = ' || tg1.layer_id
        || ' AND b.layer_id = ' || tg2.layer_id
        || ' AND a.topogeo_id = ' || tg1.id
        || ' AND b.topogeo_id = ' || tg2.id
        || ' AND a.element_id = b.element_id '
        || ' LIMIT 1';
      --RAISE NOTICE '%', query;
      FOR rec IN EXECUTE query
      LOOP
        RETURN TRUE; -- they share an element
      END LOOP;
      RETURN FALSE; -- no elements shared
  --
  ---------------------------------------------------------
      
    ELSIF tg2.type = 2 THEN -- point/line
  ---------------------------------------------------------
  -- 
  --  A [multi]point intersects a [multi]line if they share
  --  any Node. 
  --
  --
  --
      query =
        'SELECT a.topogeo_id FROM '
        || quote_ident(toponame) ||
        '.relation a, '
        || quote_ident(toponame) ||
        '.relation b, '
        || quote_ident(toponame) ||
        '.edge_data e '
        || 'WHERE a.layer_id = ' || tg1.layer_id
        || ' AND b.layer_id = ' || tg2.layer_id
        || ' AND a.topogeo_id = ' || tg1.id
        || ' AND b.topogeo_id = ' || tg2.id
        || ' AND abs(b.element_id) = e.edge_id '
        || ' AND ( '
          || ' e.start_node = a.element_id '
          || ' OR '
          || ' e.end_node = a.element_id '
        || ' )'
        || ' LIMIT 1';
      --RAISE NOTICE '%', query;
      FOR rec IN EXECUTE query
      LOOP
        RETURN TRUE; -- they share an element
      END LOOP;
      RETURN FALSE; -- no elements shared
  --
  ---------------------------------------------------------
    ELSIF tg2.type = 3 THEN -- point/polygon
  ---------------------------------------------------------
  -- 
  --  A [multi]point intersects a [multi]polygon if any
  --  Node of the point is contained in any face of the
  --  polygon OR ( is end_node or start_node of any edge
  --  of any polygon face ).
  --
  --  We assume the Node-in-Face check is faster becasue
  --  there will be less Faces then Edges in any polygon.
  --
  --
  --
  --
      -- Check if any node is contained in a face
      query =
        'SELECT n.node_id as id FROM '
        || quote_ident(toponame) ||
        '.relation r1, '
        || quote_ident(toponame) ||
        '.relation r2, '
        || quote_ident(toponame) ||
        '.node n '
        || 'WHERE r1.layer_id = ' || tg1.layer_id
        || ' AND r2.layer_id = ' || tg2.layer_id
        || ' AND r1.topogeo_id = ' || tg1.id
        || ' AND r2.topogeo_id = ' || tg2.id
        || ' AND n.node_id = r1.element_id '
        || ' AND r2.element_id = n.containing_face '
        || ' LIMIT 1';
      --RAISE NOTICE '%', query;
      FOR rec IN EXECUTE query
      LOOP
        --RAISE NOTICE 'Node % in polygon face', rec.id;
        RETURN TRUE; -- one (or more) nodes are
                     -- contained in a polygon face
      END LOOP;
      -- Check if any node is start or end of any polygon
      -- face edge
      query =
        'SELECT n.node_id as nid, e.edge_id as eid '
        || ' FROM '
        || quote_ident(toponame) ||
        '.relation r1, '
        || quote_ident(toponame) ||
        '.relation r2, '
        || quote_ident(toponame) ||
        '.edge_data e, '
        || quote_ident(toponame) ||
        '.node n '
        || 'WHERE r1.layer_id = ' || tg1.layer_id
        || ' AND r2.layer_id = ' || tg2.layer_id
        || ' AND r1.topogeo_id = ' || tg1.id
        || ' AND r2.topogeo_id = ' || tg2.id
        || ' AND n.node_id = r1.element_id '
        || ' AND ( '
        || ' e.left_face = r2.element_id '
        || ' OR '
        || ' e.right_face = r2.element_id '
        || ' ) '
        || ' AND ( '
        || ' e.start_node = r1.element_id '
        || ' OR '
        || ' e.end_node = r1.element_id '
        || ' ) '
        || ' LIMIT 1';
      --RAISE NOTICE '%', query;
      FOR rec IN EXECUTE query
      LOOP
        --RAISE NOTICE 'Node % on edge % bound', rec.nid, rec.eid;
        RETURN TRUE; -- one node is start or end
                     -- of a face edge
      END LOOP;
      RETURN FALSE; -- no intersection
  --
  ---------------------------------------------------------
    ELSIF tg2.type = 4 THEN -- point/collection
      RAISE EXCEPTION 'Intersection point/collection not implemented yet';
    ELSE
      RAISE EXCEPTION 'Invalid TopoGeometry type %', tg2.type;
    END IF;
  ELSIF tg1.type = 2 THEN -- [multi]line
    IF tg2.type = 2 THEN -- line/line
  ---------------------------------------------------------
  -- 
  --  A [multi]line intersects a [multi]line if they share
  --  any Node. 
  --
  --
  --
      query =
        'SELECT e1.start_node FROM '
        || quote_ident(toponame) ||
        '.relation r1, '
        || quote_ident(toponame) ||
        '.relation r2, '
        || quote_ident(toponame) ||
        '.edge_data e1, '
        || quote_ident(toponame) ||
        '.edge_data e2 '
        || 'WHERE r1.layer_id = ' || tg1.layer_id
        || ' AND r2.layer_id = ' || tg2.layer_id
        || ' AND r1.topogeo_id = ' || tg1.id
        || ' AND r2.topogeo_id = ' || tg2.id
        || ' AND abs(r1.element_id) = e1.edge_id '
        || ' AND abs(r2.element_id) = e2.edge_id '
        || ' AND ( '
        || ' e1.start_node = e2.start_node '
        || ' OR '
        || ' e1.start_node = e2.end_node '
        || ' OR '
        || ' e1.end_node = e2.start_node '
        || ' OR '
        || ' e1.end_node = e2.end_node '
        || ' )'
        || ' LIMIT 1';
      --RAISE NOTICE '%', query;
      FOR rec IN EXECUTE query
      LOOP
        RETURN TRUE; -- they share an element
      END LOOP;
      RETURN FALSE; -- no elements shared
  --
  ---------------------------------------------------------
    ELSIF tg2.type = 3 THEN -- line/polygon
  ---------------------------------------------------------
  -- 
  -- A [multi]line intersects a [multi]polygon if they share
  -- any Node (touch-only case), or if any line edge has any
  -- polygon face on the left or right (full-containment case
  -- + edge crossing case).
  --
  --
      -- E1 are line edges, E2 are polygon edges
      -- R1 are line relations.
      -- R2 are polygon relations.
      -- R2.element_id are FACE ids
      query =
        'SELECT e1.edge_id'
        || ' FROM '
        || quote_ident(toponame) ||
        '.relation r1, '
        || quote_ident(toponame) ||
        '.relation r2, '
        || quote_ident(toponame) ||
        '.edge_data e1, '
        || quote_ident(toponame) ||
        '.edge_data e2 '
        || 'WHERE r1.layer_id = ' || tg1.layer_id
        || ' AND r2.layer_id = ' || tg2.layer_id
        || ' AND r1.topogeo_id = ' || tg1.id
        || ' AND r2.topogeo_id = ' || tg2.id
        -- E1 are line edges
        || ' AND e1.edge_id = abs(r1.element_id) '
        -- E2 are face edges
        || ' AND ( e2.left_face = r2.element_id '
        || '   OR e2.right_face = r2.element_id ) '
        || ' AND ( '
        -- Check if E1 have left-or-right face 
        -- being part of R2.element_id
        || ' e1.left_face = r2.element_id '
        || ' OR '
        || ' e1.right_face = r2.element_id '
        -- Check if E1 share start-or-end node
        -- with any E2.
        || ' OR '
        || ' e1.start_node = e2.start_node '
        || ' OR '
        || ' e1.start_node = e2.end_node '
        || ' OR '
        || ' e1.end_node = e2.start_node '
        || ' OR '
        || ' e1.end_node = e2.end_node '
        || ' ) '
        || ' LIMIT 1';
      --RAISE NOTICE '%', query;
      FOR rec IN EXECUTE query
      LOOP
        RETURN TRUE; -- either common node
                     -- or edge-in-face
      END LOOP;
      RETURN FALSE; -- no intersection
  --
  ---------------------------------------------------------
    ELSIF tg2.type = 4 THEN -- line/collection
      RAISE EXCEPTION 'Intersection line/collection not implemented yet';
    ELSE
      RAISE EXCEPTION 'Invalid TopoGeometry type %', tg2.type;
    END IF;

  ELSIF tg1.type = 3 THEN -- [multi]polygon
    IF tg2.type = 3 THEN -- polygon/polygon
  ---------------------------------------------------------
  -- 
  -- A [multi]polygon intersects a [multi]polygon if they share
  -- any Node (touch-only case), or if any face edge has any of the
  -- other polygon face on the left or right (full-containment case
  -- + edge crossing case).
  --
  --
      -- E1 are poly1 edges.
      -- E2 are poly2 edges
      -- R1 are poly1 relations.
      -- R2 are poly2 relations.
      -- R1.element_id are poly1 FACE ids
      -- R2.element_id are poly2 FACE ids
      query =
        'SELECT e1.edge_id'
        || ' FROM '
        || quote_ident(toponame) ||
        '.relation r1, '
        || quote_ident(toponame) ||
        '.relation r2, '
        || quote_ident(toponame) ||
        '.edge_data e1, '
        || quote_ident(toponame) ||
        '.edge_data e2 '
        || 'WHERE r1.layer_id = ' || tg1.layer_id
        || ' AND r2.layer_id = ' || tg2.layer_id
        || ' AND r1.topogeo_id = ' || tg1.id
        || ' AND r2.topogeo_id = ' || tg2.id
        -- E1 are poly1 edges
        || ' AND ( e1.left_face = r1.element_id '
        || '   OR e1.right_face = r1.element_id ) '
        -- E2 are poly2 edges
        || ' AND ( e2.left_face = r2.element_id '
        || '   OR e2.right_face = r2.element_id ) '
        || ' AND ( '
        -- Check if any edge from a polygon face
        -- has any of the other polygon face
        -- on the left or right 
        || ' e1.left_face = r2.element_id '
        || ' OR '
        || ' e1.right_face = r2.element_id '
        || ' OR '
        || ' e2.left_face = r1.element_id '
        || ' OR '
        || ' e2.right_face = r1.element_id '
        -- Check if E1 share start-or-end node
        -- with any E2.
        || ' OR '
        || ' e1.start_node = e2.start_node '
        || ' OR '
        || ' e1.start_node = e2.end_node '
        || ' OR '
        || ' e1.end_node = e2.start_node '
        || ' OR '
        || ' e1.end_node = e2.end_node '
        || ' ) '
        || ' LIMIT 1';
      --RAISE NOTICE '%', query;
      FOR rec IN EXECUTE query
      LOOP
        RETURN TRUE; -- either common node
                     -- or edge-in-face
      END LOOP;
      RETURN FALSE; -- no intersection
  --
  ---------------------------------------------------------
    ELSIF tg2.type = 4 THEN -- polygon/collection
      RAISE EXCEPTION 'Intersection poly/collection not implemented yet';
    ELSE
      RAISE EXCEPTION 'Invalid TopoGeometry type %', tg2.type;
    END IF;
  ELSIF tg1.type = 4 THEN -- collection
    IF tg2.type = 4 THEN -- collection/collection
      RAISE EXCEPTION 'Intersection collection/collection not implemented yet';
    ELSE
      RAISE EXCEPTION 'Invalid TopoGeometry type %', tg2.type;
    END IF;
  ELSE
    RAISE EXCEPTION 'Invalid TopoGeometry type %', tg1.type;
  END IF;
END
$function$
]]></string>
		</function>
		<function name="layertrigger" id="Function_17f27e21" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.layertrigger()
 RETURNS trigger
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  rec RECORD;
  ok BOOL;
  toponame varchar;
  query TEXT;
BEGIN
  --RAISE NOTICE 'LayerTrigger called % % at % level', TG_WHEN, TG_OP, TG_LEVEL;

  IF TG_OP = 'INSERT' THEN
    RAISE EXCEPTION 'LayerTrigger not meant to be called on INSERT';
  ELSIF TG_OP = 'UPDATE' THEN
    RAISE EXCEPTION 'The topology.layer table cannot be updated';
  END IF;

  -- Check for existance of any feature column referencing
  -- this layer
  FOR rec IN SELECT * FROM pg_namespace n, pg_class c, pg_attribute a
    WHERE text(n.nspname) = OLD.schema_name
    AND c.relnamespace = n.oid
    AND text(c.relname) = OLD.table_name
    AND a.attrelid = c.oid
    AND text(a.attname) = OLD.feature_column
  LOOP
    query = 'SELECT * '
      || ' FROM ' || quote_ident(OLD.schema_name)
      || '.' || quote_ident(OLD.table_name)
      || ' WHERE layer_id('
      || quote_ident(OLD.feature_column)||') '
      || '=' || OLD.layer_id
      || ' LIMIT 1';
    --RAISE NOTICE '%', query;
    FOR rec IN EXECUTE query
    LOOP
      RAISE NOTICE 'A feature referencing layer % of topology % still exists in %.%.%', OLD.layer_id, OLD.topology_id, OLD.schema_name, OLD.table_name, OLD.feature_column;
      RETURN NULL;
    END LOOP;
  END LOOP;

  -- Get topology name
  SELECT name FROM topology.topology INTO toponame
    WHERE id = OLD.topology_id;
  IF toponame IS NULL THEN
    RAISE NOTICE 'Could not find name of topology with id %',
      OLD.layer_id;
  END IF;
  -- Check if any record in the relation table references this layer
  FOR rec IN SELECT c.oid FROM pg_namespace n, pg_class c
    WHERE text(n.nspname) = toponame AND c.relnamespace = n.oid
          AND c.relname = 'relation'
  LOOP
    query = 'SELECT * '
      || ' FROM ' || quote_ident(toponame)
      || '.relation '
      || ' WHERE layer_id = '|| OLD.layer_id
      || ' LIMIT 1';
    --RAISE NOTICE '%', query;
    FOR rec IN EXECUTE query
    LOOP
      RAISE NOTICE 'A record in %.relation still references layer %', toponame, OLD.layer_id;
      RETURN NULL;
    END LOOP;
  END LOOP;
  RETURN OLD;
END;
$function$
]]></string>
		</function>
		<function name="polygonize" id="Function_3103d9fc" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.polygonize(toponame character varying)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  sql text;
  rec RECORD;
  faces int;
BEGIN
  sql := 'SELECT (st_dump(st_polygonize(geom))).geom from '
         || quote_ident(toponame) || '.edge_data';
  faces = 0;
  FOR rec in EXECUTE sql LOOP
    BEGIN
      PERFORM topology.AddFace(toponame, rec.geom);
      faces = faces + 1;
    EXCEPTION
      WHEN OTHERS THEN
        RAISE WARNING 'Error registering face % (%)', rec.geom, SQLERRM;
    END;
  END LOOP;
  RETURN faces || ' faces registered';
END
$function$
]]></string>
			<comment><![CDATA[args: toponame - Find and register all faces defined by topology edges]]></comment>
		</function>
		<function name="postgis_topology_scripts_installed" id="Function_3b23451a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.postgis_topology_scripts_installed()
 RETURNS text
 LANGUAGE sql
 IMMUTABLE
AS $function$ SELECT '2.1.7'::text || ' r' || 13414::text AS version $function$
]]></string>
		</function>
		<function name="relationtrigger" id="Function_26686197" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.relationtrigger()
 RETURNS trigger
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  toponame varchar;
  topoid integer;
  plyr RECORD; -- parent layer
  rec RECORD;
  ok BOOL;
BEGIN
  IF TG_NARGS != 2 THEN
    RAISE EXCEPTION 'RelationTrigger called with wrong number of arguments';
  END IF;
  topoid = TG_ARGV[0];
  toponame = TG_ARGV[1];
  --RAISE NOTICE 'RelationTrigger called % % on %.relation for a %', TG_WHEN, TG_OP, toponame, TG_LEVEL;

  IF TG_OP = 'DELETE' THEN
    RAISE EXCEPTION 'RelationTrigger not meant to be called on DELETE';
  END IF;
  -- Get layer info (and verify it exists)
  ok = false;
  FOR plyr IN EXECUTE 'SELECT * FROM topology.layer '
    || 'WHERE '
    || ' topology_id = ' || topoid
    || ' AND'
    || ' layer_id = ' || NEW.layer_id
  LOOP
    ok = true;
    EXIT;
  END LOOP;
  IF NOT ok THEN
    RAISE EXCEPTION 'Layer % does not exist in topology %',
      NEW.layer_id, topoid;
    RETURN NULL;
  END IF;
  IF plyr.level > 0 THEN -- this is hierarchical layer
    -- ElementType must be the layer child id
    IF NEW.element_type != plyr.child_id THEN
      RAISE EXCEPTION 'Type of elements in layer % must be set to its child layer id %', plyr.layer_id, plyr.child_id;
      RETURN NULL;
    END IF;
    -- ElementId must be an existent TopoGeometry in child layer
    ok = false;
    FOR rec IN EXECUTE 'SELECT topogeo_id FROM '
      || quote_ident(toponame) || '.relation '
      || ' WHERE layer_id = ' || plyr.child_id 
      || ' AND topogeo_id = ' || NEW.element_id
    LOOP
      ok = true;
      EXIT;
    END LOOP;
    IF NOT ok THEN
      RAISE EXCEPTION 'TopoGeometry % does not exist in the child layer %', NEW.element_id, plyr.child_id;
      RETURN NULL;
    END IF;
  ELSE -- this is a basic layer
    -- ElementType must be compatible with layer type
    IF plyr.feature_type != 4
      AND plyr.feature_type != NEW.element_type
    THEN
      RAISE EXCEPTION 'Element of type % is not compatible with layer of type %', NEW.element_type, plyr.feature_type;
      RETURN NULL;
    END IF;
    --
    -- Now lets see if the element is consistent, which
    -- is it exists in the topology tables.
    --
    --
    -- Element is a Node
    --
    IF NEW.element_type = 1 
    THEN
      ok = false;
      FOR rec IN EXECUTE 'SELECT node_id FROM '
        || quote_ident(toponame) || '.node '
        || ' WHERE node_id = ' || NEW.element_id
      LOOP
        ok = true;
        EXIT;
      END LOOP;
      IF NOT ok THEN
        RAISE EXCEPTION 'Node % does not exist in topology %', NEW.element_id, toponame;
        RETURN NULL;
      END IF;
    --
    -- Element is an Edge
    --
    ELSIF NEW.element_type = 2 
    THEN
      ok = false;
      FOR rec IN EXECUTE 'SELECT edge_id FROM '
        || quote_ident(toponame) || '.edge_data '
        || ' WHERE edge_id = ' || abs(NEW.element_id)
      LOOP
        ok = true;
        EXIT;
      END LOOP;
      IF NOT ok THEN
        RAISE EXCEPTION 'Edge % does not exist in topology %', NEW.element_id, toponame;
        RETURN NULL;
      END IF;
    --
    -- Element is a Face
    --
    ELSIF NEW.element_type = 3 
    THEN
      IF NEW.element_id = 0 THEN
        RAISE EXCEPTION 'Face % cannot be associated with any feature', NEW.element_id;
        RETURN NULL;
      END IF;
      ok = false;
      FOR rec IN EXECUTE 'SELECT face_id FROM '
        || quote_ident(toponame) || '.face '
        || ' WHERE face_id = ' || NEW.element_id
      LOOP
        ok = true;
        EXIT;
      END LOOP;
      IF NOT ok THEN
        RAISE EXCEPTION 'Face % does not exist in topology %', NEW.element_id, toponame;
        RETURN NULL;
      END IF;
    END IF;
  END IF;
  
  RETURN NEW;
END;
$function$
]]></string>
		</function>
		<function name="st_addedgemodface" id="Function_364d8e71" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_addedgemodface(atopology character varying, anode integer, anothernode integer, acurve geometry)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
  rrec RECORD;
  i INTEGER;
  topoid INTEGER;
  az FLOAT8;
  span RECORD; -- start point analysis data
  epan RECORD; --   end point analysis data
  fan RECORD; -- face analisys
  newedge RECORD; -- informations about new edge
  sql TEXT;
  newfaces INTEGER[];
  newface INTEGER;
BEGIN
  --
  -- All args required
  -- 
  IF atopology IS NULL
    OR anode IS NULL
    OR anothernode IS NULL
    OR acurve IS NULL
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  --
  -- Acurve must be a LINESTRING
  --
  IF substring(geometrytype(acurve), 1, 4) != 'LINE'
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - invalid curve';
  END IF;
  
  --
  -- Curve must be simple
  --
  IF NOT ST_IsSimple(acurve) THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - curve not simple';
  END IF;
  --
  -- Get topology id
  --
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = atopology;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  -- Initialize new edge info (will be filled up more later)
  SELECT anode as start_node, anothernode as end_node, acurve as geom,
    NULL::int as next_left_edge, NULL::int as next_right_edge,
    NULL::int as left_face, NULL::int as right_face, NULL::int as edge_id,
    NULL::int as prev_left_edge, NULL::int as prev_right_edge, -- convenience
    anode = anothernode as isclosed, -- convenience
    false as start_node_isolated, -- convenience
    false as end_node_isolated, -- convenience
    NULL::geometry as start_node_geom, -- convenience
    NULL::geometry as end_node_geom, -- convenience
    ST_RemoveRepeatedPoints(acurve) as cleangeom -- convenience
  INTO newedge;
  -- Compute azimut of first edge end on start node
  SELECT null::int AS nextCW, null::int AS nextCCW,
         null::float8 AS minaz, null::float8 AS maxaz,
         false AS was_isolated,
         ST_Azimuth(ST_StartPoint(newedge.cleangeom),
                    ST_PointN(newedge.cleangeom, 2)) AS myaz
  INTO span;
  IF span.myaz IS NULL THEN
    RAISE EXCEPTION 'Invalid edge (no two distinct vertices exist)';
  END IF;
  -- Compute azimuth of last edge end on end node
  SELECT null::int AS nextCW, null::int AS nextCCW,
         null::float8 AS minaz, null::float8 AS maxaz,
         false AS was_isolated,
         ST_Azimuth(ST_EndPoint(newedge.cleangeom),
                    ST_PointN(newedge.cleangeom,
                              ST_NumPoints(newedge.cleangeom)-1)) AS myaz
  INTO epan;
  IF epan.myaz IS NULL THEN
    RAISE EXCEPTION 'Invalid edge (no two distinct vertices exist)';
  END IF;

  -- 
  -- Check endpoints existance, match with Curve geometry
  -- and get face information (if any)
  --
  i := 0;
  FOR rec IN EXECUTE 'SELECT node_id, containing_face, geom FROM '
    || quote_ident(atopology)
    || '.node WHERE node_id IN ( '
    || anode || ',' || anothernode
    || ')'
  LOOP
    IF rec.containing_face IS NOT NULL THEN


      IF newedge.left_face IS NULL THEN
        newedge.left_face := rec.containing_face;
        newedge.right_face := rec.containing_face;
      ELSE
        IF newedge.left_face != rec.containing_face THEN
          RAISE EXCEPTION
            'SQL/MM Spatial exception - geometry crosses an edge (endnodes in faces % and %)', newedge.left_face, rec.containing_face;
        END IF;
      END IF;
    END IF;
    IF rec.node_id = anode THEN
      newedge.start_node_geom = rec.geom;
    END IF;
    IF rec.node_id = anothernode THEN
      newedge.end_node_geom = rec.geom;
    END IF;
    i := i + 1;
  END LOOP;
  IF newedge.start_node_geom IS NULL
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent node';
  ELSIF NOT ST_Equals(newedge.start_node_geom, ST_StartPoint(acurve))
  THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - start node not geometry start point.';
  END IF;
  IF newedge.end_node_geom IS NULL
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent node';
  ELSIF NOT ST_Equals(newedge.end_node_geom, ST_EndPoint(acurve))
  THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - end node not geometry end point.';
  END IF;
  --
  -- Check if this geometry crosses any node
  --
  FOR rec IN EXECUTE
    'SELECT node_id, ST_Relate(geom, '
    || quote_literal(acurve::text) || '::geometry, 2) as relate FROM '
    || quote_ident(atopology)
    || '.node WHERE geom && '
    || quote_literal(acurve::text)
    || '::geometry'
  LOOP
    IF ST_RelateMatch(rec.relate, 'T********') THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - geometry crosses a node';
    END IF;
  END LOOP;
  --
  -- Check if this geometry has any interaction with any existing edge
  --
  FOR rec IN EXECUTE 'SELECT edge_id, ST_Relate(geom,' 
    || quote_literal(acurve::text)
    || '::geometry, 2) as im FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE geom && '
    || quote_literal(acurve::text) || '::geometry'
  LOOP
    --RAISE DEBUG 'IM=%',rec.im;
    IF ST_RelateMatch(rec.im, 'F********') THEN
      CONTINUE; -- no interior intersection
    END IF;
    IF ST_RelateMatch(rec.im, '1FFF*FFF2') THEN
      RAISE EXCEPTION
        'SQL/MM Spatial exception - coincident edge %', rec.edge_id;
    END IF;
    -- NOT IN THE SPECS: geometry touches an edge
    IF ST_RelateMatch(rec.im, '1********') THEN
      RAISE EXCEPTION
        'Spatial exception - geometry intersects edge %', rec.edge_id;
    END IF;
    IF ST_RelateMatch(rec.im, 'T********') THEN
      RAISE EXCEPTION
        'SQL/MM Spatial exception - geometry crosses edge %', rec.edge_id;
    END IF;
  END LOOP;
  ---------------------------------------------------------------
  --
  -- All checks passed, time to prepare the new edge
  --
  ---------------------------------------------------------------
  EXECUTE 'SELECT nextval(' || quote_literal(
      quote_ident(atopology) || '.edge_data_edge_id_seq') || ')'
  INTO STRICT newedge.edge_id;

  -- Find links on start node -- {


  sql :=
    'SELECT edge_id, -1 AS end_node, start_node, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) as geom FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE start_node = ' || anode
    || ' UNION SELECT edge_id, end_node, -1, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE end_node = ' || anode;
  IF newedge.isclosed THEN
    sql := sql || ' UNION SELECT '
      || newedge.edge_id || ',' || newedge.end_node
      || ',-1,0,0,' -- pretend we start elsewhere
      || quote_literal(newedge.cleangeom::text);
  END IF;
  i := 0;
  FOR rec IN EXECUTE sql
  LOOP -- incident edges {
    i := i + 1;
    IF rec.start_node = anode THEN
      --
      -- Edge starts at our node, we compute
      -- azimuth from node to its second point
      --
      az := ST_Azimuth(ST_StartPoint(rec.geom), ST_PointN(rec.geom, 2));
    ELSE
      --
      -- Edge ends at our node, we compute
      -- azimuth from node to its second-last point
      --
      az := ST_Azimuth(ST_EndPoint(rec.geom),
                       ST_PointN(rec.geom, ST_NumPoints(rec.geom)-1));
      rec.edge_id := -rec.edge_id;
    END IF;
    IF az IS NULL THEN
      RAISE EXCEPTION 'Invalid edge % found (no two distinct nodes exist)',
        rec.edge_id;
    END IF;



    az = az - span.myaz;
    IF az < 0 THEN
      az := az + 2*PI();
    END IF;
    -- RAISE DEBUG ' normalized az %', az;
    IF span.maxaz IS NULL OR az > span.maxaz THEN
      span.maxaz := az;
      span.nextCCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.left_face := rec.left_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.left_face := rec.right_face;
        END IF;
      END IF;
    END IF;
    IF span.minaz IS NULL OR az < span.minaz THEN
      span.minaz := az;
      span.nextCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.right_face := rec.right_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.right_face := rec.left_face;
        END IF;
      END IF;
    END IF;
    --RAISE DEBUG 'Closest edges: CW:%(%) CCW:%(%)', span.nextCW, span.minaz, span.nextCCW, span.maxaz;
  END LOOP; -- incident edges }


  IF newedge.isclosed THEN
    IF i < 2 THEN span.was_isolated = true; END IF;
  ELSE
    IF i < 1 THEN span.was_isolated = true; END IF;
  END IF;
  IF span.nextCW IS NULL THEN
    -- This happens if the destination node is isolated
    newedge.next_right_edge := newedge.edge_id;
    newedge.prev_left_edge := -newedge.edge_id;
  ELSE
    newedge.next_right_edge := span.nextCW;
    newedge.prev_left_edge := -span.nextCCW;
  END IF;

  -- } start_node analysis

  -- Find links on end_node {
      


  sql :=
    'SELECT edge_id, -1 as end_node, start_node, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) as geom FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE start_node = ' || anothernode
    || 'UNION SELECT edge_id, end_node, -1, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE end_node = ' || anothernode;
  IF newedge.isclosed THEN
    sql := sql || ' UNION SELECT '
      || newedge.edge_id || ',' || -1 -- pretend we end elsewhere
      || ',' || newedge.start_node || ',0,0,'
      || quote_literal(newedge.cleangeom::text);
  END IF;
  i := 0;
  FOR rec IN EXECUTE sql
  LOOP -- incident edges {
    i := i + 1;
    IF rec.start_node = anothernode THEN
      --
      -- Edge starts at our node, we compute
      -- azimuth from node to its second point
      --
      az := ST_Azimuth(ST_StartPoint(rec.geom),
                       ST_PointN(rec.geom, 2));
    ELSE
      --
      -- Edge ends at our node, we compute
      -- azimuth from node to its second-last point
      --
      az := ST_Azimuth(ST_EndPoint(rec.geom),
        ST_PointN(rec.geom, ST_NumPoints(rec.geom)-1));
      rec.edge_id := -rec.edge_id;
    END IF;


    az := az - epan.myaz;
    IF az < 0 THEN
      az := az + 2*PI();
    END IF;
    -- RAISE DEBUG ' normalized az %', az;
    IF epan.maxaz IS NULL OR az > epan.maxaz THEN
      epan.maxaz := az;
      epan.nextCCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.right_face := rec.left_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.right_face := rec.right_face;
        END IF;
      END IF;
    END IF;
    IF epan.minaz IS NULL OR az < epan.minaz THEN
      epan.minaz := az;
      epan.nextCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.left_face := rec.right_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.left_face := rec.left_face;
        END IF;
      END IF;
    END IF;
    --RAISE DEBUG 'Closest edges: CW:%(%) CCW:%(%)', epan.nextCW, epan.minaz, epan.nextCCW, epan.maxaz;
  END LOOP; -- incident edges }


  IF newedge.isclosed THEN
    IF i < 2 THEN epan.was_isolated = true; END IF;
  ELSE
    IF i < 1 THEN epan.was_isolated = true; END IF;
  END IF;
  IF epan.nextCW IS NULL THEN
    -- This happens if the destination node is isolated
    newedge.next_left_edge := -newedge.edge_id;
    newedge.prev_right_edge := newedge.edge_id;
  ELSE
    newedge.next_left_edge := epan.nextCW;
    newedge.prev_right_edge := -epan.nextCCW;
  END IF;
  -- } end_node analysis

  ----------------------------------------------------------------------
  --
  -- If we don't have faces setup by now we must have encountered
  -- a malformed topology (no containing_face on isolated nodes, no
  -- left/right faces on adjacent edges or mismatching values)
  --
  ----------------------------------------------------------------------
  IF newedge.left_face != newedge.right_face THEN
    RAISE EXCEPTION 'Left(%)/right(%) faces mismatch: invalid topology ?', 
      newedge.left_face, newedge.right_face;
  END IF;
  IF newedge.left_face IS NULL THEN
    RAISE EXCEPTION 'Could not derive edge face from linked primitives: invalid topology ?';
  END IF;
  ----------------------------------------------------------------------
  --
  -- Insert the new edge, and update all linking
  --
  ----------------------------------------------------------------------
  -- Insert the new edge with what we have so far
  EXECUTE 'INSERT INTO ' || quote_ident(atopology) 
    || '.edge VALUES(' || newedge.edge_id
    || ',' || newedge.start_node
    || ',' || newedge.end_node
    || ',' || newedge.next_left_edge
    || ',' || newedge.next_right_edge
    || ',' || newedge.left_face
    || ',' || newedge.right_face
    || ',' || quote_literal(newedge.geom::geometry::text)
    || ')';
  -- Link prev_left_edge to us 
  -- (if it's not us already)
  IF abs(newedge.prev_left_edge) != newedge.edge_id THEN
    IF newedge.prev_left_edge > 0 THEN
      -- its next_left_edge is us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_left_edge = '
        || newedge.edge_id
        || ', abs_next_left_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || newedge.prev_left_edge;
    ELSE
      -- its next_right_edge is us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_right_edge = '
        || newedge.edge_id
        || ', abs_next_right_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || -newedge.prev_left_edge;
    END IF;
  END IF;
  -- Link prev_right_edge to us 
  -- (if it's not us already)
  IF abs(newedge.prev_right_edge) != newedge.edge_id THEN
    IF newedge.prev_right_edge > 0 THEN
      -- its next_left_edge is -us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_left_edge = '
        || -newedge.edge_id
        || ', abs_next_left_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || newedge.prev_right_edge;
    ELSE
      -- its next_right_edge is -us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_right_edge = '
        || -newedge.edge_id
        || ', abs_next_right_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || -newedge.prev_right_edge;
    END IF;
  END IF;
  -- NOT IN THE SPECS...
  -- set containing_face = null for start_node and end_node
  -- if they where isolated 
  IF span.was_isolated OR epan.was_isolated THEN
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.node SET containing_face = null WHERE node_id IN ('
        || anode || ',' || anothernode || ')';
  END IF;
  --------------------------------------------
  -- Check face splitting
  --------------------------------------------


  SELECT topology._ST_AddFaceSplit(atopology, newedge.edge_id, newedge.left_face, false)
  INTO newface;
  IF newface = 0 THEN

    RETURN newedge.edge_id; 
  END IF;
  IF newface IS NULL THEN -- must be forming a maximal ring in universal face

    SELECT topology._ST_AddFaceSplit(atopology, -newedge.edge_id, newedge.left_face, false)
    INTO newface;
  ELSE

    PERFORM topology._ST_AddFaceSplit(atopology, -newedge.edge_id, newedge.left_face, true);
  END IF;
  IF newface IS NULL THEN

    RETURN newedge.edge_id; 
  END IF;
  --------------------------------------------
  -- Update topogeometries, if needed
  --------------------------------------------
  IF newedge.left_face != 0 THEN -- {
    -- NOT IN THE SPECS:
    -- update TopoGeometry compositions to add newface
    sql := 'SELECT r.topogeo_id, r.layer_id FROM '
      || quote_ident(atopology)
      || '.relation r, topology.layer l '
      || ' WHERE l.topology_id = ' || topoid
      || ' AND l.level = 0 '
      || ' AND l.layer_id = r.layer_id '
      || ' AND r.element_id = ' || newedge.left_face
      || ' AND r.element_type = 3 ';
    --RAISE DEBUG 'SQL: %', sql;
    FOR rec IN EXECUTE sql
    LOOP


      -- Add reference to the other face
      sql := 'INSERT INTO ' || quote_ident(atopology)
        || '.relation VALUES( ' || rec.topogeo_id
        || ',' || rec.layer_id || ',' || newface || ', 3)';
      --RAISE DEBUG 'SQL: %', sql;
      EXECUTE sql;
    END LOOP;
  END IF; -- }
  RETURN newedge.edge_id;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anode, anothernode, acurve - Add a new edge and, if in doing so it splits a face, modify the original face and add a new face.]]></comment>
		</function>
		<function name="st_addedgenewfaces" id="Function_3b14322c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_addedgenewfaces(atopology character varying, anode integer, anothernode integer, acurve geometry)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
  i INTEGER;
  topoid INTEGER;
  az FLOAT8;
  span RECORD; -- start point analysis data
  epan RECORD; --   end point analysis data
  fan RECORD; -- face analisys
  newedge RECORD; -- informations about new edge
  sql TEXT;
  newfaces INTEGER[];
  newface INTEGER;
BEGIN
  --
  -- All args required
  -- 
  IF atopology IS NULL
    OR anode IS NULL
    OR anothernode IS NULL
    OR acurve IS NULL
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  --
  -- Acurve must be a LINESTRING
  --
  IF substring(geometrytype(acurve), 1, 4) != 'LINE'
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - invalid curve';
  END IF;
  
  --
  -- Curve must be simple
  --
  IF NOT ST_IsSimple(acurve) THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - curve not simple';
  END IF;
  --
  -- Get topology id
  --
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = atopology;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  -- Initialize new edge info (will be filled up more later)
  SELECT anode as start_node, anothernode as end_node, acurve as geom,
    NULL::int as next_left_edge, NULL::int as next_right_edge,
    NULL::int as left_face, NULL::int as right_face, NULL::int as edge_id,
    NULL::int as prev_left_edge, NULL::int as prev_right_edge, -- convenience
    anode = anothernode as isclosed, -- convenience
    false as start_node_isolated, -- convenience
    false as end_node_isolated, -- convenience
    NULL::geometry as start_node_geom, -- convenience
    NULL::geometry as end_node_geom, -- convenience
    ST_RemoveRepeatedPoints(acurve) as cleangeom -- convenience
  INTO newedge;
  -- Compute azimuth of first edge end on start node
  SELECT null::int AS nextCW, null::int AS nextCCW,
         null::float8 AS minaz, null::float8 AS maxaz,
         false AS was_isolated,
         ST_Azimuth(ST_StartPoint(newedge.cleangeom),
                    ST_PointN(newedge.cleangeom, 2)) AS myaz
  INTO span;
  IF span.myaz IS NULL THEN
    RAISE EXCEPTION 'Invalid edge (no two distinct vertices exist)';
  END IF;
  -- Compute azimuth of last edge end on end node
  SELECT null::int AS nextCW, null::int AS nextCCW,
         null::float8 AS minaz, null::float8 AS maxaz,
         false AS was_isolated,
         ST_Azimuth(ST_EndPoint(newedge.cleangeom),
                    ST_PointN(newedge.cleangeom,
                              ST_NumPoints(newedge.cleangeom)-1)) AS myaz
  INTO epan;
  IF epan.myaz IS NULL THEN
    RAISE EXCEPTION 'Invalid edge (no two distinct vertices exist)';
  END IF;

  -- 
  -- Check endpoints existance, match with Curve geometry
  -- and get face information (if any)
  --
  i := 0;
  FOR rec IN EXECUTE 'SELECT node_id, containing_face, geom FROM '
    || quote_ident(atopology)
    || '.node WHERE node_id IN ( '
    || anode || ',' || anothernode
    || ')'
  LOOP
    IF rec.containing_face IS NOT NULL THEN


      IF newedge.left_face IS NULL THEN
        newedge.left_face := rec.containing_face;
        newedge.right_face := rec.containing_face;
      ELSE
        IF newedge.left_face != rec.containing_face THEN
          RAISE EXCEPTION
            'SQL/MM Spatial exception - geometry crosses an edge (endnodes in faces % and %)', newedge.left_face, rec.containing_face;
        END IF;
      END IF;
    END IF;
    IF rec.node_id = anode THEN
      newedge.start_node_geom = rec.geom;
    END IF;
    IF rec.node_id = anothernode THEN
      newedge.end_node_geom = rec.geom;
    END IF;
    i := i + 1;
  END LOOP;
  IF newedge.start_node_geom IS NULL
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent node';
  ELSIF NOT ST_Equals(newedge.start_node_geom, ST_StartPoint(acurve))
  THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - start node not geometry start point.';
  END IF;
  IF newedge.end_node_geom IS NULL
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent node';
  ELSIF NOT ST_Equals(newedge.end_node_geom, ST_EndPoint(acurve))
  THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - end node not geometry end point.';
  END IF;
  RAISE DEBUG 'All Checked !';
  --
  -- Check if this geometry crosses any node
  --
  FOR rec IN EXECUTE
    'SELECT node_id, ST_Relate(geom, '
    || quote_literal(acurve::text) || '::geometry, 2) as relate FROM '
    || quote_ident(atopology)
    || '.node WHERE geom && '
    || quote_literal(acurve::text)
    || '::geometry'
  LOOP
    IF ST_RelateMatch(rec.relate, 'T********') THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - geometry crosses a node';
    END IF;
  END LOOP;
  --
  -- Check if this geometry has any interaction with any existing edge
  --
  FOR rec IN EXECUTE 'SELECT edge_id, ST_Relate(geom,' 
    || quote_literal(acurve::text)
    || '::geometry, 2) as im FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE geom && '
    || quote_literal(acurve::text) || '::geometry'
  LOOP
    --RAISE DEBUG 'IM=%',rec.im;
    IF ST_RelateMatch(rec.im, 'F********') THEN
      CONTINUE; -- no interior intersection
    END IF;
    IF ST_RelateMatch(rec.im, '1FFF*FFF2') THEN
      RAISE EXCEPTION
        'SQL/MM Spatial exception - coincident edge %', rec.edge_id;
    END IF;
    -- NOT IN THE SPECS: geometry touches an edge
    IF ST_RelateMatch(rec.im, '1********') THEN
      RAISE EXCEPTION
        'Spatial exception - geometry intersects edge %', rec.edge_id;
    END IF;
    IF ST_RelateMatch(rec.im, 'T********') THEN
      RAISE EXCEPTION
        'SQL/MM Spatial exception - geometry crosses edge %', rec.edge_id;
    END IF;
  END LOOP;
  ---------------------------------------------------------------
  --
  -- All checks passed, time to prepare the new edge
  --
  ---------------------------------------------------------------
  EXECUTE 'SELECT nextval(' || quote_literal(
      quote_ident(atopology) || '.edge_data_edge_id_seq') || ')'
  INTO STRICT newedge.edge_id;

  -- Find links on start node -- {


  sql :=
    'SELECT edge_id, -1 AS end_node, start_node, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) as geom FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE start_node = ' || anode
    || ' UNION SELECT edge_id, end_node, -1, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE end_node = ' || anode;
  IF newedge.isclosed THEN
    sql := sql || ' UNION SELECT '
      || newedge.edge_id || ',' || newedge.end_node
      || ',-1,0,0,' -- pretend we start elsewhere
      || quote_literal(newedge.cleangeom::text);
  END IF;
  i := 0;
  FOR rec IN EXECUTE sql
  LOOP -- incident edges {
    i := i + 1;
    IF rec.start_node = anode THEN
      --
      -- Edge starts at our node, we compute
      -- azimuth from node to its second point
      --
      az := ST_Azimuth(ST_StartPoint(rec.geom), ST_PointN(rec.geom, 2));
    ELSE
      --
      -- Edge ends at our node, we compute
      -- azimuth from node to its second-last point
      --
      az := ST_Azimuth(ST_EndPoint(rec.geom),
                       ST_PointN(rec.geom, ST_NumPoints(rec.geom)-1));
      rec.edge_id := -rec.edge_id;
    END IF;
    IF az IS NULL THEN
      RAISE EXCEPTION 'Invalid edge % found (no two distinct nodes exist)',
        rec.edge_id;
    END IF;



    az = az - span.myaz;
    IF az < 0 THEN
      az := az + 2*PI();
    END IF;
    -- RAISE DEBUG ' normalized az %', az;
    IF span.maxaz IS NULL OR az > span.maxaz THEN
      span.maxaz := az;
      span.nextCCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.left_face := rec.left_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.left_face := rec.right_face;
        END IF;
      END IF;
    END IF;
    IF span.minaz IS NULL OR az < span.minaz THEN
      span.minaz := az;
      span.nextCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.right_face := rec.right_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.right_face := rec.left_face;
        END IF;
      END IF;
    END IF;
    --RAISE DEBUG 'Closest edges: CW:%(%) CCW:%(%)', span.nextCW, span.minaz, span.nextCCW, span.maxaz;
  END LOOP; -- incident edges }


  IF newedge.isclosed THEN
    IF i < 2 THEN span.was_isolated = true; END IF;
  ELSE
    IF i < 1 THEN span.was_isolated = true; END IF;
  END IF;
  IF span.nextCW IS NULL THEN
    -- This happens if the destination node is isolated
    newedge.next_right_edge := newedge.edge_id;
    newedge.prev_left_edge := -newedge.edge_id;
  ELSE
    newedge.next_right_edge := span.nextCW;
    newedge.prev_left_edge := -span.nextCCW;
  END IF;

  -- } start_node analysis

  -- Find links on end_node {
      


  sql :=
    'SELECT edge_id, -1 as end_node, start_node, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) as geom FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE start_node = ' || anothernode
    || 'UNION SELECT edge_id, end_node, -1, left_face, right_face, '
    || 'ST_RemoveRepeatedPoints(geom) FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE end_node = ' || anothernode;
  IF newedge.isclosed THEN
    sql := sql || ' UNION SELECT '
      || newedge.edge_id || ',' || -1 -- pretend we end elsewhere
      || ',' || newedge.start_node || ',0,0,'
      || quote_literal(newedge.cleangeom::text);
  END IF;
  i := 0;
  FOR rec IN EXECUTE sql
  LOOP -- incident edges {
    i := i + 1;
    IF rec.start_node = anothernode THEN
      --
      -- Edge starts at our node, we compute
      -- azimuth from node to its second point
      --
      az := ST_Azimuth(ST_StartPoint(rec.geom),
                       ST_PointN(rec.geom, 2));
    ELSE
      --
      -- Edge ends at our node, we compute
      -- azimuth from node to its second-last point
      --
      az := ST_Azimuth(ST_EndPoint(rec.geom),
        ST_PointN(rec.geom, ST_NumPoints(rec.geom)-1));
      rec.edge_id := -rec.edge_id;
    END IF;


    az := az - epan.myaz;
    IF az < 0 THEN
      az := az + 2*PI();
    END IF;
    -- RAISE DEBUG ' normalized az %', az;
    IF epan.maxaz IS NULL OR az > epan.maxaz THEN
      epan.maxaz := az;
      epan.nextCCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.right_face := rec.left_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.right_face := rec.right_face;
        END IF;
      END IF;
    END IF;
    IF epan.minaz IS NULL OR az < epan.minaz THEN
      epan.minaz := az;
      epan.nextCW := rec.edge_id;
      IF abs(rec.edge_id) != newedge.edge_id THEN
        IF rec.edge_id < 0 THEN
          -- TODO: check for mismatch ?
          newedge.left_face := rec.right_face;
        ELSE
          -- TODO: check for mismatch ?
          newedge.left_face := rec.left_face;
        END IF;
      END IF;
    END IF;
    --RAISE DEBUG 'Closest edges: CW:%(%) CCW:%(%)', epan.nextCW, epan.minaz, epan.nextCCW, epan.maxaz;
  END LOOP; -- incident edges }


  IF newedge.isclosed THEN
    IF i < 2 THEN epan.was_isolated = true; END IF;
  ELSE
    IF i < 1 THEN epan.was_isolated = true; END IF;
  END IF;
  IF epan.nextCW IS NULL THEN
    -- This happens if the destination node is isolated
    newedge.next_left_edge := -newedge.edge_id;
    newedge.prev_right_edge := newedge.edge_id;
  ELSE
    newedge.next_left_edge := epan.nextCW;
    newedge.prev_right_edge := -epan.nextCCW;
  END IF;
  -- } end_node analysis

  ----------------------------------------------------------------------
  --
  -- If we don't have faces setup by now we must have encountered
  -- a malformed topology (no containing_face on isolated nodes, no
  -- left/right faces on adjacent edges or mismatching values)
  --
  ----------------------------------------------------------------------
  IF newedge.left_face != newedge.right_face THEN
    RAISE EXCEPTION 'Left(%)/right(%) faces mismatch: invalid topology ?', 
      newedge.left_face, newedge.right_face;
  END IF;
  IF newedge.left_face IS NULL THEN
    RAISE EXCEPTION 'Could not derive edge face from linked primitives: invalid topology ?';
  END IF;
  ----------------------------------------------------------------------
  --
  -- Insert the new edge, and update all linking
  --
  ----------------------------------------------------------------------
  -- Insert the new edge with what we have so far
  EXECUTE 'INSERT INTO ' || quote_ident(atopology) 
    || '.edge VALUES(' || newedge.edge_id
    || ',' || newedge.start_node
    || ',' || newedge.end_node
    || ',' || newedge.next_left_edge
    || ',' || newedge.next_right_edge
    || ',' || newedge.left_face
    || ',' || newedge.right_face
    || ',' || quote_literal(newedge.geom::geometry::text)
    || ')';
  -- Link prev_left_edge to us 
  -- (if it's not us already)
  IF abs(newedge.prev_left_edge) != newedge.edge_id THEN
    IF newedge.prev_left_edge > 0 THEN
      -- its next_left_edge is us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_left_edge = '
        || newedge.edge_id
        || ', abs_next_left_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || newedge.prev_left_edge;
    ELSE
      -- its next_right_edge is us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_right_edge = '
        || newedge.edge_id
        || ', abs_next_right_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || -newedge.prev_left_edge;
    END IF;
  END IF;
  -- Link prev_right_edge to us 
  -- (if it's not us already)
  IF abs(newedge.prev_right_edge) != newedge.edge_id THEN
    IF newedge.prev_right_edge > 0 THEN
      -- its next_left_edge is -us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_left_edge = '
        || -newedge.edge_id
        || ', abs_next_left_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || newedge.prev_right_edge;
    ELSE
      -- its next_right_edge is -us
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.edge_data SET next_right_edge = '
        || -newedge.edge_id
        || ', abs_next_right_edge = '
        || newedge.edge_id
        || ' WHERE edge_id = ' 
        || -newedge.prev_right_edge;
    END IF;
  END IF;
  -- NOT IN THE SPECS...
  -- set containing_face = null for start_node and end_node
  -- if they where isolated 
  IF span.was_isolated OR epan.was_isolated THEN
      EXECUTE 'UPDATE ' || quote_ident(atopology)
        || '.node SET containing_face = null WHERE node_id IN ('
        || anode || ',' || anothernode || ')';
  END IF;
  --------------------------------------------
  -- Check face splitting
  --------------------------------------------


  SELECT topology._ST_AddFaceSplit(atopology, -newedge.edge_id, newedge.left_face, false)
  INTO newface;
  IF newface = 0 THEN

    RETURN newedge.edge_id; 
  END IF;
  newfaces[1] := newface;


  SELECT topology._ST_AddFaceSplit(atopology, newedge.edge_id, newedge.left_face, false)
  INTO newface;
  newfaces[2] := newface;
  IF newedge.left_face != 0 THEN -- {
    -- NOT IN THE SPECS:
    -- update TopoGeometry compositions to substitute oldface with newfaces
    sql := 'UPDATE '
      || quote_ident(atopology)
      || '.relation r set element_id = ' || newfaces[1]
      || ' FROM topology.layer l '
      || ' WHERE l.topology_id = ' || topoid
      || ' AND l.level = 0 '
      || ' AND l.layer_id = r.layer_id '
      || ' AND r.element_id = ' || newedge.left_face
      || ' AND r.element_type = 3 RETURNING r.topogeo_id, r.layer_id';
    --RAISE DEBUG 'SQL: %', sql;
    FOR rec IN EXECUTE sql
    LOOP


      -- Add reference to the other face
      sql := 'INSERT INTO ' || quote_ident(atopology)
        || '.relation VALUES( ' || rec.topogeo_id
        || ',' || rec.layer_id || ',' || newfaces[2] || ', 3)';
      --RAISE DEBUG 'SQL: %', sql;
      EXECUTE sql;
    END LOOP;
    -- drop old face from faces table
    sql := 'DELETE FROM ' || quote_ident(atopology)
      || '.face WHERE face_id = ' || newedge.left_face;
    EXECUTE sql;
  END IF; -- }
  RETURN newedge.edge_id;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anode, anothernode, acurve - Add a new edge and, if in doing so it splits a face, delete the original face and replace it with two new faces.]]></comment>
		</function>
		<function name="st_addisoedge" id="Function_1d266737" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_addisoedge(atopology character varying, anode integer, anothernode integer, acurve geometry)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  aface INTEGER;
  face GEOMETRY;
  snodegeom GEOMETRY;
  enodegeom GEOMETRY;
  count INTEGER;
  rec RECORD;
  edgeid INTEGER;
BEGIN
  --
  -- All arguments required
  -- 
  IF atopology IS NULL
     OR anode IS NULL
     OR anothernode IS NULL
     OR acurve IS NULL
  THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  -- NOT IN THE SPECS:
  -- A closed edge is never isolated (as it forms a face)
  IF anode = anothernode THEN
      RAISE EXCEPTION
       'Closed edges would not be isolated, try ST_AddEdgeNewFaces';
  END IF;
  --
  -- Acurve must be a LINESTRING
  --
  IF substring(geometrytype(acurve), 1, 4) != 'LINE'
  THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - invalid curve';
  END IF;
  --
  -- Acurve must be simple
  --
  IF NOT ST_IsSimple(acurve)
  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - curve not simple';
  END IF;
  --
  -- Check for:
  --    existence of nodes
  --    nodes faces match
  -- Extract:
  --    nodes face id
  --    nodes geoms
  --
  aface := NULL;
  count := 0;
  FOR rec IN EXECUTE 'SELECT geom, containing_face, node_id FROM '
    || quote_ident(atopology) || '.node
    WHERE node_id = ' || anode ||
    ' OR node_id = ' || anothernode
  LOOP 
    IF rec.containing_face IS NULL THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - not isolated node';
    END IF;
    IF aface IS NULL THEN
      aface := rec.containing_face;
    ELSE
      IF aface != rec.containing_face THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - nodes in different faces';
      END IF;
    END IF;
    -- Get nodes geom
    IF rec.node_id = anode THEN
      snodegeom = rec.geom;
    ELSE
      enodegeom = rec.geom;
    END IF;
    count = count+1;
  END LOOP;
  -- TODO: don't need count, can do with snodegeom/enodegeom instead..
  IF count < 2 THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent node';
  END IF;

  --
  -- l) Check that start point of acurve match start node
  -- geoms.
  -- 
  IF ST_X(snodegeom) != ST_X(ST_StartPoint(acurve)) OR
     ST_Y(snodegeom) != ST_Y(ST_StartPoint(acurve))
  THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - start node not geometry start point.';
  END IF;
  --
  -- m) Check that end point of acurve match end node
  -- geoms.
  -- 
  IF ST_X(enodegeom) != ST_X(ST_EndPoint(acurve)) OR
     ST_Y(enodegeom) != ST_Y(ST_EndPoint(acurve))
  THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - end node not geometry end point.';
  END IF;
  --
  -- n) Check if curve crosses (contains) any node
  -- I used _contains_ here to leave endpoints out
  -- 
  FOR rec IN EXECUTE 'SELECT node_id FROM '
    || quote_ident(atopology) || '.node '
    || ' WHERE geom && ' || quote_literal(acurve::text) 
    || ' AND ST_Contains(' || quote_literal(acurve::text)
    || ',geom)'
  LOOP
    RAISE EXCEPTION
      'SQL/MM Spatial exception - geometry crosses a node';
  END LOOP;
  --
  -- o) Check if curve intersects any other edge
  -- 
  FOR rec IN EXECUTE 'SELECT * FROM '
    || quote_ident(atopology) || '.edge_data
    WHERE ST_Intersects(geom, ' || quote_literal(acurve::text) || '::geometry)'
  LOOP
    RAISE EXCEPTION 'SQL/MM Spatial exception - geometry intersects an edge';
  END LOOP;
  --
  -- Get new edge id from sequence
  --
  FOR rec IN EXECUTE 'SELECT nextval(''' ||
    atopology || '.edge_data_edge_id_seq'')'
  LOOP
    edgeid = rec.nextval;
  END LOOP;
  -- TODO: this should likely be an exception instead !
  IF aface IS NULL THEN
    aface := 0;
  END IF;
  --
  -- Insert the new row
  --
  EXECUTE 'INSERT INTO ' || quote_ident(atopology)
    || '.edge VALUES(' || edgeid || ',' || anode
    || ',' || anothernode || ',' || (-edgeid)
    || ',' || edgeid || ','
    || aface || ',' || aface || ','
    || quote_literal(acurve::text) || ')';
  --
  -- Update Node containing_face values
  --
  -- the nodes anode and anothernode are no more isolated
  -- because now there is an edge connecting them
  -- 
  EXECUTE 'UPDATE ' || quote_ident(atopology)
    || '.node SET containing_face = NULL where (node_id ='
    || anode
    || ' OR node_id='
    || anothernode
    || ')';
  RETURN edgeid;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anode, anothernode, alinestring - Adds an isolated edge defined by geometry alinestring to a topology connecting two existing isolated nodes anode and anothernode and returns the edge id of the new edge.]]></comment>
		</function>
		<function name="st_addisonode" id="Function_2186f57" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_addisonode(atopology character varying, aface integer, apoint geometry)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
  nodeid integer;
  sql text;
  containingface integer;
BEGIN
  --
  -- Atopology and apoint are required
  -- 
  IF atopology IS NULL OR apoint IS NULL THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  --
  -- Atopology must  be registered
  -- 
  IF NOT EXISTS(SELECT name FROM topology.topology WHERE topology.name = atopology) THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - invalid topology name';
  END IF;
  --
  -- Apoint must be a point
  --
  IF substring(geometrytype(apoint), 1, 5) != 'POINT'
  THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - invalid point';
  END IF;
  --
  -- Check if a coincident node already exists
  -- 
  -- We use index AND x/y equality
  --
  FOR rec IN EXECUTE 'SELECT node_id FROM '
    || quote_ident(atopology) || '.node ' ||
    'WHERE ST_Equals(geom, ' || quote_literal(apoint::text) || '::geometry)'
  LOOP
    RAISE EXCEPTION
     'SQL/MM Spatial exception - coincident node';
  END LOOP;
  --
  -- Check if any edge crosses (intersects) this node
  -- I used _intersects_ here to include boundaries (endpoints)
  --
  FOR rec IN EXECUTE 'SELECT edge_id FROM '
    || quote_ident(atopology) || '.edge ' 
    || 'WHERE ST_Intersects(geom, ' || quote_literal(apoint::text)
    || '::geometry)'
  LOOP
    RAISE EXCEPTION
    'SQL/MM Spatial exception - edge crosses node.';
  END LOOP;
  -- retrieve the face that contains (eventually) the point
  
  --
  -- first test is to check if there is inside an mbr (more fast)
  --
  sql := 'SELECT f.face_id FROM ' 
        || quote_ident(atopology) 
        || '.face f WHERE f.face_id > 0 AND f.mbr && '
        || quote_literal(apoint::text)
        || '::geometry AND ST_Contains(topology.ST_GetFaceGeometry('
        || quote_literal(atopology) 
        || ', f.face_id), '
        || quote_literal(apoint::text)
        || '::geometry)';
  IF aface IS NOT NULL AND aface != 0 THEN
    sql := sql || ' AND f.face_id = ' || aface;
  END IF;


  EXECUTE sql INTO containingface;
  -- If aface was specified, check that it was correct
  IF aface IS NOT NULL THEN -- {
    IF aface = 0 THEN -- {
      IF containingface IS NOT NULL THEN -- {
        RAISE EXCEPTION
          'SQL/MM Spatial exception - within face % (not universe)',
          containingface;
      ELSE -- }{
        containingface := 0;
      END IF; -- }
    ELSE -- }{ -- aface != 0
      IF containingface IS NULL OR containingface != aface THEN -- {
        RAISE EXCEPTION 'SQL/MM Spatial exception - not within face';
      END IF; -- }
    END IF; -- }
  ELSE -- }{ -- aface is null
    containingface := COALESCE(containingface, 0);
  END IF; -- }
  --
  -- Insert the new row
  --
  sql := 'INSERT INTO '
      || quote_ident(atopology)
      || '.node(node_id, geom, containing_face) SELECT nextval('
      || quote_literal( quote_ident(atopology) || '.node_node_id_seq' )
      || '),'
      ||quote_literal(apoint::text)
      || '::geometry,' || containingface
      || ' RETURNING node_id';


  EXECUTE sql INTO nodeid;
  RETURN nodeid;
EXCEPTION
  -- TODO: avoid the EXCEPTION handling here ?
  WHEN INVALID_SCHEMA_NAME THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, aface, apoint - Adds an isolated node to a face in a topology and returns the nodeid of the new node. If face is null, the node is still created.]]></comment>
		</function>
		<function name="st_changeedgegeom" id="Function_1d9af988" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_changeedgegeom(atopology character varying, anedge integer, acurve geometry)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
  rng_info RECORD; -- movement range info
  oldedge RECORD;
  range GEOMETRY; -- movement range
  tmp1 GEOMETRY;
  snode_info RECORD;
  enode_info RECORD;
  sql TEXT;
  iscw BOOLEAN;
BEGIN
  --
  -- All arguments required
  -- 
  IF atopology IS NULL
     OR anedge IS NULL
     OR acurve IS NULL
  THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  --
  -- Acurve must be a LINESTRING
  --
  IF substring(geometrytype(acurve), 1, 4) != 'LINE'
  THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - invalid curve';
  END IF;
  --
  -- Acurve must be a simple
  --
  IF NOT ST_IsSimple(acurve)
  THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - curve not simple';
  END IF;
  --
  -- Get data about existing edge
  --
  BEGIN
    EXECUTE 'SELECT * FROM ' || quote_ident(atopology) || '.edge_data  '
      || ' WHERE edge_id = ' || anedge
    INTO STRICT oldedge;
  EXCEPTION
    -- NOT IN THE SPECS: check given edge existance
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent edge %', anedge;
  END;
  --
  -- e) Check StartPoint consistency
  --
  IF NOT ST_Equals(ST_StartPoint(acurve), ST_StartPoint(oldedge.geom)) THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - start node not geometry start point.';
  END IF;
  IF oldedge.start_node = oldedge.end_node THEN -- {
    -- Not in the specs:
    -- if the edge is closed, check we didn't change winding !
    --       (should be part of isomorphism checking)
    range := ST_MakePolygon(oldedge.geom);
    iscw := ST_OrderingEquals(range, ST_ForceRHR(range));
    IF ST_NumPoints(ST_RemoveRepeatedPoints(acurve)) < 3 THEN
      RAISE EXCEPTION 'Invalid edge (no two distinct vertices exist)';
    END IF;
    range := ST_MakePolygon(acurve);
    IF iscw != ST_OrderingEquals(range, ST_ForceRHR(range)) THEN
      RAISE EXCEPTION 'Edge twist at node %',
        ST_AsText(ST_StartPoint(oldedge.geom));
    END IF;
  ELSE -- }{
    --
    -- f) Check EndPoint consistency
    --
    IF NOT ST_Equals(ST_EndPoint(acurve), ST_EndPoint(oldedge.geom)) THEN
      RAISE EXCEPTION
        'SQL/MM Spatial exception - end node not geometry end point.';
    END IF;
  END IF; -- }
  --
  -- g) Check if curve crosses any node
  -- 
  FOR rec IN EXECUTE
    'SELECT node_id, ST_Relate(geom, '
    || quote_literal(acurve::text) || '::geometry, 2) as relate FROM '
    || quote_ident(atopology)
    || '.node WHERE geom && '
    || quote_literal(acurve::text)
    || '::geometry AND node_id NOT IN ('
    || oldedge.start_node || ',' || oldedge.end_node
    || ')'
  LOOP
    IF ST_RelateMatch(rec.relate, 'T********') THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - geometry crosses a node';
    END IF;
  END LOOP;
  --
  -- h) Check if this geometry has any interaction with any existing edge
  --
  sql := 'SELECT edge_id, ST_Relate(geom,' 
    || quote_literal(acurve::text)
    || '::geometry, 2) as im FROM '
    || quote_ident(atopology)
    || '.edge_data WHERE edge_id != ' || anedge || ' AND geom && '
    || quote_literal(acurve::text) || '::geometry';
  FOR rec IN EXECUTE sql LOOP -- {
    --RAISE DEBUG 'IM=%',rec.im;
    IF ST_RelateMatch(rec.im, 'F********') THEN
      CONTINUE; -- no interior-interior intersection
    END IF;
    IF ST_RelateMatch(rec.im, '1FFF*FFF2') THEN
      RAISE EXCEPTION
        'SQL/MM Spatial exception - coincident edge %', rec.edge_id;
    END IF;
    -- NOT IN THE SPECS: geometry touches an edge
    IF ST_RelateMatch(rec.im, '1********') THEN
      RAISE EXCEPTION
        'Spatial exception - geometry intersects edge %', rec.edge_id;
    END IF;
    IF ST_RelateMatch(rec.im, 'T********') THEN
      RAISE EXCEPTION
        'SQL/MM Spatial exception - geometry crosses edge %', rec.edge_id;
    END IF;
  END LOOP; -- }
  --
  -- Not in the specs:
  -- Check topological isomorphism 
  --
  -- Check that the "motion range" doesn't include any node 
  --{
  sql := 'SELECT ST_Collect(geom) as nodes, '
    || 'null::geometry as r1, null::geometry as r2 FROM '
    || quote_ident(atopology)
    || '.node WHERE geom && '
    || quote_literal(ST_Collect(ST_Envelope(oldedge.geom),
                                ST_Envelope(acurve))::text)
    || '::geometry AND node_id NOT IN ( '
    || oldedge.start_node || ',' || oldedge.end_node || ')';

  EXECUTE sql INTO rng_info;
  -- There's no collision if there's no nodes in the combined
  -- bbox of old and new edges.
  --
  IF NOT ST_IsEmpty(rng_info.nodes) THEN -- {




    tmp1 := ST_MakeLine(ST_EndPoint(oldedge.geom), ST_StartPoint(oldedge.geom));


    rng_info.r1 := ST_MakeLine(oldedge.geom, tmp1);
    IF ST_NumPoints(rng_info.r1) < 4 THEN
      rng_info.r1 := ST_AddPoint(rng_info.r1, ST_StartPoint(oldedge.geom));
    END IF;

    rng_info.r1 := ST_CollectionExtract(
                       ST_MakeValid(ST_MakePolygon(rng_info.r1)), 3);


    rng_info.r2 := ST_MakeLine(acurve, tmp1);
    IF ST_NumPoints(rng_info.r2) < 4 THEN
      rng_info.r2 := ST_AddPoint(rng_info.r2, ST_StartPoint(oldedge.geom));
    END IF;

    rng_info.r2 := ST_CollectionExtract(
                       ST_MakeValid(ST_MakePolygon(rng_info.r2)), 3);


    FOR rec IN WITH
      nodes AS ( SELECT * FROM ST_Dump(rng_info.nodes) ),
      inr1 AS ( SELECT path[1] FROM nodes WHERE ST_Contains(rng_info.r1, geom) ),
      inr2 AS ( SELECT path[1] FROM nodes WHERE ST_Contains(rng_info.r2, geom) )
      ( SELECT * FROM inr1
          EXCEPT
        SELECT * FROM inr2
      ) UNION 
      ( SELECT * FROM inr2
          EXCEPT
        SELECT * FROM inr1
      )
    LOOP
      RAISE EXCEPTION 'Edge motion collision at %',
                     ST_AsText(ST_GeometryN(rng_info.nodes, rec.path));
    END LOOP;
  END IF; -- }
  --} motion range checking end
  -- 
  -- Check edge adjacency before
  --{
  SELECT topology._ST_AdjacentEdges(
      atopology, oldedge.start_node, anedge
    ) as pre, NULL::integer[] as post
  INTO STRICT snode_info;


  SELECT topology._ST_AdjacentEdges(
      atopology, oldedge.end_node, -anedge
    ) as pre, NULL::integer[] as post
  INTO STRICT enode_info;


  --}
  --
  -- Update edge geometry
  --
  EXECUTE 'UPDATE ' || quote_ident(atopology) || '.edge_data '
    || ' SET geom = ' || quote_literal(acurve::text) 
    || ' WHERE edge_id = ' || anedge;
  -- 
  -- Check edge adjacency after
  --{
  snode_info.post := topology._ST_AdjacentEdges(
      atopology, oldedge.start_node, anedge
    );


  enode_info.post := topology._ST_AdjacentEdges(
      atopology, oldedge.end_node, -anedge
    );


  IF snode_info.pre != snode_info.post THEN
    RAISE EXCEPTION 'Edge changed disposition around start node %',
      oldedge.start_node;
  END IF;
  IF enode_info.pre != enode_info.post THEN
    RAISE EXCEPTION 'Edge changed disposition around end node %',
      oldedge.end_node;
  END IF;
  --}
  -- Update faces MBR of left and right faces
  -- TODO: think about ways to optimize this part, like see if
  --       the old edge geometry partecipated in the definition
  --       of the current MBR (for shrinking) or the new edge MBR
  --       would be larger than the old face MBR...
  --
  IF oldedge.left_face != 0 THEN
    sql := 'UPDATE ' || quote_ident(atopology) || '.face '
      || ' SET mbr = ' || quote_literal(
        ST_Envelope(topology.ST_GetFaceGeometry(atopology, oldedge.left_face))::text
        )
      || '::geometry WHERE face_id = ' || oldedge.left_face;
    EXECUTE sql;
  END IF;
  IF oldedge.right_face != 0 AND oldedge.right_face != oldedge.left_face THEN
    sql := 'UPDATE ' || quote_ident(atopology) || '.face '
      || ' SET mbr = ' || quote_literal(
        ST_Envelope(topology.ST_GetFaceGeometry(atopology, oldedge.right_face))::text
        )
      || '::geometry WHERE face_id = ' || oldedge.right_face;
    EXECUTE sql;
  END IF;
  
  RETURN 'Edge ' || anedge || ' changed';
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge, acurve - Changes the shape of an edge without affecting the topology structure.]]></comment>
		</function>
		<function name="st_createtopogeo" id="Function_38bb1e8e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_createtopogeo(atopology character varying, acollection geometry)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  typ char(4);
  rec RECORD;
  ret int;
  nodededges GEOMETRY;
  points GEOMETRY;
  snode_id int;
  enode_id int;
  tolerance FLOAT8;
  topoinfo RECORD;
BEGIN
  IF atopology IS NULL OR acollection IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  -- Get topology information
  BEGIN
    SELECT * FROM topology.topology
      INTO STRICT topoinfo WHERE name = atopology;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  -- Check SRID compatibility
  IF ST_SRID(acollection) != topoinfo.SRID THEN
    RAISE EXCEPTION 'Geometry SRID (%) does not match topology SRID (%)',
      ST_SRID(acollection), topoinfo.SRID;
  END IF;
  -- Verify pre-conditions (valid, empty topology schema exists)
  BEGIN -- {
    -- Verify the topology views in the topology schema to be empty
    FOR rec in EXECUTE
      'SELECT count(*) FROM '
      || quote_ident(atopology) || '.edge_data '
      || ' UNION ' ||
      'SELECT count(*) FROM '
      || quote_ident(atopology) || '.node '
    LOOP
      IF rec.count > 0 THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - non-empty view';
      END IF;
    END LOOP;
    -- face check is separated as it will contain a single (world)
    -- face record
    FOR rec in EXECUTE
      'SELECT count(*) FROM '
      || quote_ident(atopology) || '.face '
    LOOP
      IF rec.count != 1 THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - non-empty face view';
      END IF;
    END LOOP;
  EXCEPTION
    WHEN INVALID_SCHEMA_NAME THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
    WHEN UNDEFINED_TABLE THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent view';
  END; -- }


  --
  -- Node input linework with itself
  --
  WITH components AS ( SELECT geom FROM ST_Dump(acollection) )
  SELECT ST_UnaryUnion(ST_Collect(geom)) FROM (
    SELECT geom FROM components
      WHERE ST_Dimension(geom) = 1
    UNION ALL
    SELECT ST_Boundary(geom) FROM components
      WHERE ST_Dimension(geom) = 2
  ) as linework INTO STRICT nodededges;


  --
  -- Linemerge the resulting edges, to reduce the working set
  -- NOTE: this is more of a workaround for GEOS splitting overlapping
  --       lines to each of the segments.
  --
  SELECT ST_LineMerge(nodededges) INTO STRICT nodededges;



  --
  -- Collect input points and input lines endpoints
  --
  WITH components AS ( SELECT geom FROM ST_Dump(acollection) )
  SELECT ST_Union(geom) FROM (
    SELECT geom FROM components
      WHERE ST_Dimension(geom) = 0
    UNION ALL
    SELECT ST_Boundary(geom) FROM components
      WHERE ST_Dimension(geom) = 1
  ) as nodes INTO STRICT points;


  --
  -- Further split edges by points
  -- TODO: optimize this adding ST_Split support for multiline/multipoint
  --
  FOR rec IN SELECT geom FROM ST_Dump(points)
  LOOP
    -- Use the node to split edges
    SELECT ST_Collect(geom) 
    FROM ST_Dump(ST_Split(nodededges, rec.geom))
    INTO STRICT nodededges;
  END LOOP;
  SELECT ST_UnaryUnion(nodededges) INTO STRICT nodededges;



  --
  -- Collect all nodes (from points and noded linework endpoints)
  --
  WITH edges AS ( SELECT geom FROM ST_Dump(nodededges) )
  SELECT ST_Union( -- TODO: ST_UnaryUnion ?
          COALESCE(ST_UnaryUnion(ST_Collect(geom)), 
            ST_SetSRID('POINT EMPTY'::geometry, topoinfo.SRID)),
          COALESCE(points,
            ST_SetSRID('POINT EMPTY'::geometry, topoinfo.SRID))
         )
  FROM (
    SELECT ST_StartPoint(geom) as geom FROM edges
      UNION ALL
    SELECT ST_EndPoint(geom) FROM edges
  ) as endpoints INTO points;


  --
  -- Add all nodes as isolated so that 
  -- later calls to AddEdgeModFace will tweak their being
  -- isolated or not...
  --
  FOR rec IN SELECT geom FROM ST_Dump(points)
  LOOP
    PERFORM topology.ST_AddIsoNode(atopology, 0, rec.geom);
  END LOOP;
  
  FOR rec IN SELECT geom FROM ST_Dump(nodededges)
  LOOP
    SELECT topology.GetNodeByPoint(atopology, st_startpoint(rec.geom), 0)
      INTO STRICT snode_id;
    SELECT topology.GetNodeByPoint(atopology, st_endpoint(rec.geom), 0)
      INTO STRICT enode_id;
    PERFORM topology.ST_AddEdgeModFace(atopology, snode_id, enode_id, rec.geom);
  END LOOP;
  RETURN 'Topology ' || atopology || ' populated';
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, acollection - Adds a collection of geometries to a given empty topology and returns a message detailing success.]]></comment>
		</function>
		<function name="st_geometrytype" id="Function_132dc494" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_geometrytype(tg topogeometry)
 RETURNS text
 LANGUAGE sql
 STABLE STRICT
AS $function$
	SELECT CASE
		WHEN type($1) = 1 THEN 'ST_MultiPoint'
		WHEN type($1) = 2 THEN 'ST_MultiLinestring'
		WHEN type($1) = 3 THEN 'ST_MultiPolygon'
		WHEN type($1) = 4 THEN 'ST_GeometryCollection'
		ELSE 'ST_Unexpected'
		END;
$function$
]]></string>
		</function>
		<function name="st_getfaceedges" id="Function_19715596" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_getfaceedges(toponame character varying, face_id integer)
 RETURNS SETOF getfaceedges_returntype
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  rec RECORD;
  bounds geometry;
  retrec topology.GetFaceEdges_ReturnType;
  n int;
  sql TEXT;
BEGIN
  --
  -- toponame and face_id are required
  -- 
  IF toponame IS NULL OR face_id IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  IF NOT EXISTS(SELECT name FROM topology.topology WHERE name = toponame)  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END IF;
  n := 1;
  -- Construct the face geometry, then for each ring of each polygon:
  sql := 'SELECT (ST_DumpRings((ST_Dump(ST_ForceRHR('
    || 'ST_BuildArea(ST_Collect(geom))))).geom)).geom FROM '
    || quote_ident(toponame) || '.edge_data WHERE left_face = '
    || face_id || ' OR right_face = ' || face_id;
  FOR rec IN EXECUTE sql 
  LOOP -- {
    -- Find the edges constituting its boundary
    bounds = ST_Boundary(rec.geom);

    sql := 'WITH er2 AS ( ' 
      || 'WITH er AS ( SELECT ' 
      || 'min(e.edge_id) over (), count(*) over () as cnt, e.edge_id, '
      || 'ST_LineLocatePoint('
      || quote_literal(bounds::text)
      || ', ST_LineInterpolatePoint(e.geom, 0.2)) as pos'
      || ', ST_LineLocatePoint('
      || quote_literal(bounds::text)
      || ', ST_LineInterpolatePoint(e.geom, 0.8)) as pos2 FROM '
      || quote_ident(toponame)
      || '.edge e WHERE ( e.left_face = ' || face_id
      || ' OR e.right_face = ' || face_id
      || ') AND ST_Covers('
      || quote_literal(bounds::text)
      || ', e.geom)';
    IF face_id = 0 THEN
      sql := sql || ' ORDER BY POS ASC) ';
    ELSE
      sql := sql || ' ORDER BY POS DESC) ';
    END IF;
    -- Reorder rows so to start with the one with smaller edge_id
    sql := sql || 'SELECT row_number() over () - 1 as rn, * FROM er ) '
               || 'SELECT *, ( rn + cnt - ( select rn FROM er2 WHERE edge_id = min ) ) % cnt AS reord FROM er2 ORDER BY reord';

    --RAISE DEBUG 'SQL: %', sql;
    FOR rec IN EXECUTE sql
    LOOP



      retrec.sequence = n;
      retrec.edge = rec.edge_id;
      IF face_id = 0 THEN
        -- if this edge goes in opposite direction to the
        --       ring bounds, make it with negative orientation
        IF rec.pos2 < rec.pos THEN -- edge goes in opposite direction
          retrec.edge = -retrec.edge;
        END IF;
      ELSE
        -- if this edge goes in same direction to the
        --       ring bounds, make it with negative orientation
        IF rec.pos2 > rec.pos THEN -- edge goes in same direction
          retrec.edge = -retrec.edge;
        END IF;
      END IF;
      RETURN NEXT retrec;
      n = n+1;
    END LOOP;
  END LOOP; -- }
  RETURN;
EXCEPTION
  WHEN INVALID_SCHEMA_NAME THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, aface - Returns a set of ordered edges that bound aface.]]></comment>
		</function>
		<function name="st_getfacegeometry" id="Function_56651b7" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_getfacegeometry(toponame character varying, aface integer)
 RETURNS geometry
 LANGUAGE plpgsql
 STABLE
AS $function$
DECLARE
  rec RECORD;
  sql TEXT;
BEGIN
  --
  -- toponame and aface are required
  -- 
  IF toponame IS NULL OR aface IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  IF NOT EXISTS(SELECT name FROM topology.topology WHERE name = toponame)  THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END IF;
  IF aface = 0 THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - universal face has no geometry';
  END IF;
  BEGIN
    -- No such face
    sql := 'SELECT NOT EXISTS (SELECT * from ' || quote_ident(toponame)
      || '.face WHERE face_id = ' || aface
      || ') as none';
    EXECUTE sql INTO rec;
    IF rec.none THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent face.';
    END IF;
    --
    -- Construct face 
    -- 
    sql :=
      'SELECT ST_BuildArea(ST_Collect(geom)) as geom FROM '
      || quote_ident(toponame)
      || '.edge_data WHERE left_face = ' || aface
      || ' OR right_face = ' || aface;
    FOR rec IN EXECUTE sql
    LOOP
      RETURN rec.geom;
    END LOOP;
  EXCEPTION
    WHEN INVALID_SCHEMA_NAME THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
    WHEN UNDEFINED_TABLE THEN
      RAISE EXCEPTION 'corrupted topology "%"', toponame;
  END;
  RETURN NULL;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, aface - Returns the polygon in the given topology with the specified face id.]]></comment>
		</function>
		<function name="st_inittopogeo" id="Function_832736a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_inittopogeo(atopology character varying)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
  topology_id numeric;
BEGIN
  IF atopology IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  FOR rec IN SELECT * FROM pg_namespace WHERE text(nspname) = atopology
  LOOP
    RAISE EXCEPTION 'SQL/MM Spatial exception - schema already exists';
  END LOOP;
  FOR rec IN EXECUTE 'SELECT topology.CreateTopology('
    ||quote_literal(atopology)|| ') as id'
  LOOP
    topology_id := rec.id;
  END LOOP;
  RETURN 'Topology-Geometry ' || quote_literal(atopology)
    || ' (id:' || topology_id || ') created.';
END
$function$
]]></string>
			<comment><![CDATA[args: topology_schema_name - Creates a new topology schema and registers this new schema in the topology.topology table and details summary of process.]]></comment>
		</function>
		<function name="st_modedgeheal" id="Function_19890b03" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_modedgeheal(toponame character varying, e1id integer, e2id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  e1rec RECORD;
  e2rec RECORD;
  rec RECORD;
  connectededges int[];
  commonnode int;
  caseno int;
  topoid int;
  sql text;
  e2sign int;
  eidary int[];
BEGIN
  --
  -- toponame and face_id are required
  -- 
  IF toponame IS NULL OR e1id IS NULL OR e2id IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  -- NOT IN THE SPECS: see if the same edge is given twice..
  IF e1id = e2id THEN
    RAISE EXCEPTION 'Cannot heal edge % with itself, try with another', e1id;
  END IF;
  -- Get topology id
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = toponame;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  BEGIN
    EXECUTE 'SELECT * FROM ' || quote_ident(toponame)
      || '.edge_data WHERE edge_id = ' || e1id
      INTO STRICT e1rec;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent edge %', e1id;
      WHEN INVALID_SCHEMA_NAME THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
      WHEN UNDEFINED_TABLE THEN
        RAISE EXCEPTION 'corrupted topology "%" (missing edge_data table)',
          toponame;
  END;
  BEGIN
    EXECUTE 'SELECT * FROM ' || quote_ident(toponame)
      || '.edge_data WHERE edge_id = ' || e2id
      INTO STRICT e2rec;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent edge %', e2id;
    -- NOTE: checks for INVALID_SCHEMA_NAME or UNDEFINED_TABLE done before
  END;

  -- NOT IN THE SPECS: See if any of the two edges are closed.
  IF e1rec.start_node = e1rec.end_node THEN
    RAISE EXCEPTION 'Edge % is closed, cannot heal to edge %', e1id, e2id;
  END IF;
  IF e2rec.start_node = e2rec.end_node THEN
    RAISE EXCEPTION 'Edge % is closed, cannot heal to edge %', e2id, e1id;
  END IF;
  -- Find common node
  IF e1rec.end_node = e2rec.start_node THEN
    commonnode = e1rec.end_node;
    caseno = 1;
  ELSIF e1rec.end_node = e2rec.end_node THEN
    commonnode = e1rec.end_node;
    caseno = 2;
  END IF;
  -- Check if any other edge is connected to the common node
  IF commonnode IS NOT NULL THEN
    FOR rec IN EXECUTE 'SELECT edge_id FROM ' || quote_ident(toponame)
      || '.edge_data WHERE ( edge_id != ' || e1id
      || ' AND edge_id != ' || e2id || ') AND ( start_node = '
      || commonnode || ' OR end_node = ' || commonnode || ' )'
    LOOP
      commonnode := NULL;
      connectededges = connectededges || rec.edge_id;
    END LOOP;
  END IF;
  IF commonnode IS NULL THEN
    IF e1rec.start_node = e2rec.start_node THEN
      commonnode = e1rec.start_node;
      caseno = 3;
    ELSIF e1rec.start_node = e2rec.end_node THEN
      commonnode = e1rec.start_node;
      caseno = 4;
    END IF;
    -- Check if any other edge is connected to the common node
    IF commonnode IS NOT NULL THEN
      FOR rec IN EXECUTE 'SELECT edge_id FROM ' || quote_ident(toponame)
        || '.edge_data WHERE ( edge_id != ' || e1id
        || ' AND edge_id != ' || e2id || ') AND ( start_node = '
        || commonnode || ' OR end_node = ' || commonnode || ' )'
      LOOP
        commonnode := NULL;
        connectededges = connectededges || rec.edge_id;
      END LOOP;
    END IF;
  END IF;
  IF commonnode IS NULL THEN
    IF connectededges IS NOT NULL THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - other edges connected (%)', array_to_string(connectededges, ',');
    ELSE
      RAISE EXCEPTION 'SQL/MM Spatial exception - non-connected edges';
    END IF;
  END IF;
  -- NOT IN THE SPECS:
  -- check if any topo_geom is defined only by one of the
  -- input edges. In such case there would be no way to adapt
  -- the definition in case of healing, so we'd have to bail out
  eidary = ARRAY[e1id, e2id];
  sql := 'SELECT t.* from ('
    || 'SELECT r.topogeo_id, r.layer_id'
    || ', l.schema_name, l.table_name, l.feature_column'
    || ', array_agg(abs(r.element_id)) as elems '
    || 'FROM topology.layer l INNER JOIN '
    || quote_ident(toponame)
    || '.relation r ON (l.layer_id = r.layer_id) '
    || 'WHERE l.level = 0 AND l.feature_type = 2 '
    || ' AND l.topology_id = ' || topoid
    || ' AND abs(r.element_id) IN (' || e1id || ',' || e2id || ') '
    || 'group by r.topogeo_id, r.layer_id, l.schema_name, l.table_name, '
    || ' l.feature_column ) t WHERE NOT t.elems @> '
    || quote_literal(eidary);
  --RAISE DEBUG 'SQL: %', sql;
  FOR rec IN EXECUTE sql LOOP
    RAISE EXCEPTION 'TopoGeom % in layer % (%.%.%) cannot be represented healing edges % and %',
          rec.topogeo_id, rec.layer_id,
          rec.schema_name, rec.table_name, rec.feature_column,
          e1id, e2id;
  END LOOP;
  -- Update data of the first edge {
  rec := e1rec;
  IF caseno = 1 THEN -- e1.end = e2.start
    rec.geom = ST_MakeLine(e1rec.geom, e2rec.geom);
    rec.end_node = e2rec.end_node;
    rec.next_left_edge = e2rec.next_left_edge;
    e2sign = 1;
  ELSIF caseno = 2 THEN -- e1.end = e2.end
    rec.geom = ST_MakeLine(e1rec.geom, st_reverse(e2rec.geom));
    rec.end_node = e2rec.start_node;
    rec.next_left_edge = e2rec.next_right_edge;
    e2sign = -1;
  ELSIF caseno = 3 THEN -- e1.start = e2.start
    rec.geom = ST_MakeLine(st_reverse(e2rec.geom), e1rec.geom);
    rec.start_node = e2rec.end_node;
    rec.next_right_edge = e2rec.next_left_edge;
    e2sign = -1;
  ELSIF caseno = 4 THEN -- e1.start = e2.end
    rec.geom = ST_MakeLine(e2rec.geom, e1rec.geom);
    rec.start_node = e2rec.start_node;
    rec.next_right_edge = e2rec.next_right_edge;
    e2sign = 1;
  END IF;
  EXECUTE 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET geom = ' || quote_literal(rec.geom::text)
    || ', start_node = ' || rec.start_node
    || ', end_node = ' || rec.end_node
    || ', next_left_edge = ' || rec.next_left_edge
    || ', abs_next_left_edge = ' || abs(rec.next_left_edge)
    || ', next_right_edge = ' || rec.next_right_edge
    || ', abs_next_right_edge = ' || abs(rec.next_right_edge)
    || ' WHERE edge_id = ' || e1id;
  -- End of first edge update }
  -- Update next_left_edge/next_right_edge for
  -- any edge having them still pointing at the edge being removed (e2id)
  --
  -- NOTE:
  -- *(next_XXX_edge/e2id) serves the purpose of extracting existing
  -- sign from the value, while *e2sign changes that sign again if we
  -- reverted edge2 direction
  --
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET abs_next_left_edge = ' || e1id
    || ', next_left_edge = ' || e2sign*e1id
    || '*(next_left_edge/'
    || e2id || ')  WHERE abs_next_left_edge = ' || e2id;
  IF e2rec.start_node = commonnode THEN
    sql := sql || ' AND end_node = ' || e2rec.end_node;
  ELSE
    sql := sql || ' AND end_node = ' || e2rec.start_node;
  END IF;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET abs_next_right_edge = ' || e1id
    || ', next_right_edge = ' || e2sign*e1id
    || '*(next_right_edge/'
    || e2id || ') WHERE abs_next_right_edge = ' || e2id;
  IF e2rec.start_node = commonnode THEN
    sql := sql || ' AND start_node = ' || e2rec.end_node;
  ELSE
    sql := sql || ' AND start_node = ' || e2rec.start_node;
  END IF;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  -- Delete the second edge
  EXECUTE 'DELETE FROM ' || quote_ident(toponame)
    || '.edge_data WHERE edge_id = ' || e2id;
  -- Delete the common node 
  BEGIN
    EXECUTE 'DELETE FROM ' || quote_ident(toponame)
            || '.node WHERE node_id = ' || commonnode;
    EXCEPTION
      WHEN UNDEFINED_TABLE THEN
        RAISE EXCEPTION 'corrupted topology "%" (missing node table)',
          toponame;
  END;
  --
  -- NOT IN THE SPECS:
  -- Drop composition rows involving second
  -- edge, as the first edge took its space,
  -- and all affected TopoGeom have been previously checked
  -- for being composed by both edges.
  sql := 'DELETE FROM ' || quote_ident(toponame)
    || '.relation r USING topology.layer l '
    || 'WHERE l.level = 0 AND l.feature_type = 2'
    || ' AND l.topology_id = ' || topoid
    || ' AND l.layer_id = r.layer_id AND abs(r.element_id) = '
    || e2id;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  RETURN commonnode;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge, anotheredge - Heal two edges by deleting the node connecting them, modifying the first edgeand deleting the second edge. Returns the id of the deleted node.]]></comment>
		</function>
		<function name="st_modedgesplit" id="Function_25cf5b6a" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_modedgesplit(atopology character varying, anedge integer, apoint geometry)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  oldedge RECORD;
  rec RECORD;
  tmp integer;
  topoid integer;
  nodeid integer;
  nodepos float8;
  newedgeid integer;
  newedge1 geometry;
  newedge2 geometry;
  query text;
  ok BOOL;
BEGIN
  --
  -- All args required
  -- 
  IF atopology IS NULL OR anedge IS NULL OR apoint IS NULL THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  -- Get topology id
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = atopology;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  --
  -- Check node existance
  -- 
  ok = false;
  FOR oldedge IN EXECUTE 'SELECT * FROM '
    || quote_ident(atopology) || '.edge_data ' ||
    ' WHERE edge_id =  ' || anedge
  LOOP
    ok = true;
  END LOOP;
  IF NOT ok THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - non-existent edge';
  END IF;
  --
  -- Check that given point is Within(anedge.geom)
  -- 
  IF NOT ST_Within(apoint, oldedge.geom) THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - point not on edge';
  END IF;
  --
  -- Check if a coincident node already exists
  --
  FOR rec IN EXECUTE 'SELECT node_id FROM '
    || quote_ident(atopology) || '.node ' ||
    'WHERE geom && '
    || quote_literal(apoint::text) || '::geometry'
    ||' AND ST_X(geom) = ST_X('
    || quote_literal(apoint::text) || '::geometry)'
    ||' AND ST_Y(geom) = ST_Y('
    ||quote_literal(apoint::text)||'::geometry)'
  LOOP
    RAISE EXCEPTION
     'SQL/MM Spatial exception - coincident node';
  END LOOP;
  --
  -- Get new node id
  --
  FOR rec IN EXECUTE 'SELECT nextval(''' ||
    atopology || '.node_node_id_seq'')'
  LOOP
    nodeid = rec.nextval;
  END LOOP;
  --RAISE NOTICE 'Next node id = % ', nodeid;
  --
  -- Add the new node 
  --
  EXECUTE 'INSERT INTO ' || quote_ident(atopology)
    || '.node(node_id, geom) 
    VALUES('||nodeid||','||quote_literal(apoint::text)||
    ')';
  --
  -- Compute new edge
  --
  newedge2 := ST_Split(oldedge.geom, apoint);
  newedge1 := ST_GeometryN(newedge2, 1);
  newedge2 := ST_GeometryN(newedge2, 2);
  --
  -- Get ids for the new edge
  --
  FOR rec IN EXECUTE 'SELECT nextval(''' ||
    atopology || '.edge_data_edge_id_seq'')'
  LOOP
    newedgeid = rec.nextval;
  END LOOP;


  --
  -- Insert the new edge
  --
  EXECUTE 'INSERT INTO ' || quote_ident(atopology)
    || '.edge '
    || '(edge_id, start_node, end_node,'
    || 'next_left_edge, next_right_edge,'
    || 'left_face, right_face, geom) '
    || 'VALUES('
    || newedgeid
    || ',' || nodeid
    || ',' || oldedge.end_node
    || ',' || COALESCE(                      -- next_left_edge
                NULLIF(
                  oldedge.next_left_edge,
                  -anedge
                ),
                -newedgeid
              )
    || ',' || -anedge                        -- next_right_edge
    || ',' || oldedge.left_face              -- left_face
    || ',' || oldedge.right_face             -- right_face
    || ',' || quote_literal(newedge2::text)  -- geom
    ||')';
  --
  -- Update the old edge
  --
  EXECUTE 'UPDATE ' || quote_ident(atopology) || '.edge_data '
    || ' SET geom = ' || quote_literal(newedge1::text)
    || ','
    || ' next_left_edge = ' || newedgeid
    || ', abs_next_left_edge = ' || newedgeid
    || ','
    || ' end_node = ' || nodeid
    || ' WHERE edge_id = ' || anedge;

  --
  -- Update all next edge references to match new layout
  --
  EXECUTE 'UPDATE ' || quote_ident(atopology)
    || '.edge_data SET next_right_edge = '
    || -newedgeid 
    || ','
    || ' abs_next_right_edge = ' || newedgeid
    || ' WHERE edge_id != ' || newedgeid
    || ' AND next_right_edge = ' || -anedge
    || ' AND start_node = ' || oldedge.end_node;
  EXECUTE 'UPDATE ' || quote_ident(atopology)
    || '.edge_data SET '
    || ' next_left_edge = ' || -newedgeid
    || ','
    || ' abs_next_left_edge = ' || newedgeid
    || ' WHERE edge_id != ' || newedgeid
    || ' AND next_left_edge = ' || -anedge
    || ' AND end_node = ' || oldedge.end_node;
  --
  -- Update references in the Relation table.
  -- We only take into considerations non-hierarchical
  -- TopoGeometry here, for obvious reasons.
  --
  FOR rec IN EXECUTE 'SELECT r.* FROM '
    || quote_ident(atopology)
    || '.relation r, topology.layer l '
    || ' WHERE '
    || ' l.topology_id = ' || topoid
    || ' AND l.level = 0 '
    || ' AND l.layer_id = r.layer_id '
    || ' AND abs(r.element_id) = ' || anedge
    || ' AND r.element_type = 2'
  LOOP
    --RAISE NOTICE 'TopoGeometry % in layer % contains the edge being split (%) - updating to add new edge %', rec.topogeo_id, rec.layer_id, anedge, newedgeid;
    -- Add new reference to edge1
    IF rec.element_id < 0 THEN
      tmp = -newedgeid;
    ELSE
      tmp = newedgeid;
    END IF;
    query = 'INSERT INTO ' || quote_ident(atopology)
      || '.relation '
      || ' VALUES( '
      || rec.topogeo_id
      || ','
      || rec.layer_id
      || ','
      || tmp
      || ','
      || rec.element_type
      || ')';
    --RAISE NOTICE '%', query;
    EXECUTE query;
  END LOOP;
  --RAISE NOTICE 'Edge % split in edges % and % by node %',
  --  anedge, anedge, newedgeid, nodeid;
  RETURN nodeid; 
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge, apoint - Split an edge by creating a new node along an existing edge, modifying the original edge and adding a new edge.]]></comment>
		</function>
		<function name="st_moveisonode" id="Function_258a545c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_moveisonode(atopology character varying, anode integer, apoint geometry)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
BEGIN
  --
  -- All arguments are required
  -- 
  IF atopology IS NULL OR anode IS NULL OR apoint IS NULL THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  --
  -- Apoint must be a point
  --
  IF substring(geometrytype(apoint), 1, 5) != 'POINT'
  THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - invalid point';
  END IF;
  --
  -- Check node isolation.
  -- 
  FOR rec IN EXECUTE 'SELECT edge_id FROM '
    || quote_ident(atopology) || '.edge ' ||
    ' WHERE start_node =  ' || anode ||
    ' OR end_node = ' || anode 
  LOOP
    RAISE EXCEPTION
     'SQL/MM Spatial exception - not isolated node';
  END LOOP;
  --
  -- Check if a coincident node already exists
  -- 
  -- We use index AND x/y equality
  --
  FOR rec IN EXECUTE 'SELECT node_id FROM '
    || quote_ident(atopology) || '.node ' ||
    'WHERE geom && ' || quote_literal(apoint::text) || '::geometry'
    ||' AND ST_X(geom) = ST_X('||quote_literal(apoint::text)||'::geometry)'
    ||' AND ST_Y(geom) = ST_Y('||quote_literal(apoint::text)||'::geometry)'
  LOOP
    RAISE EXCEPTION
     'SQL/MM Spatial exception - coincident node';
  END LOOP;
  --
  -- Check if any edge crosses (intersects) this node
  -- I used _intersects_ here to include boundaries (endpoints)
  --
  FOR rec IN EXECUTE 'SELECT edge_id FROM '
    || quote_ident(atopology) || '.edge ' 
    || 'WHERE geom && ' || quote_literal(apoint::text) 
    || ' AND ST_Intersects(geom, ' || quote_literal(apoint::text)
    || '::geometry)'
  LOOP
    RAISE EXCEPTION
    'SQL/MM Spatial exception - edge crosses node.';
  END LOOP;
  --
  -- Update node point
  --
  EXECUTE 'UPDATE ' || quote_ident(atopology) || '.node '
    || ' SET geom = ' || quote_literal(apoint::text) 
    || ' WHERE node_id = ' || anode;
  RETURN 'Isolated Node ' || anode || ' moved to location '
    || ST_X(apoint) || ',' || ST_Y(apoint);
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge, apoint - Moves an isolated node in a topology from one point to another. If new apoint geometry exists as a node an error is thrown. REturns description of move.]]></comment>
		</function>
		<function name="st_newedgeheal" id="Function_23817ea9" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_newedgeheal(toponame character varying, e1id integer, e2id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  e1rec RECORD;
  e2rec RECORD;
  rec RECORD;
  newedgeid int;
  connectededges int[];
  commonnode int;
  caseno int;
  topoid int;
  sql text;
  e2sign int;
  eidary int[];
BEGIN
  --
  -- toponame and face_id are required
  -- 
  IF toponame IS NULL OR e1id IS NULL OR e2id IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  -- NOT IN THE SPECS: see if the same edge is given twice..
  IF e1id = e2id THEN
    RAISE EXCEPTION 'Cannot heal edge % with itself, try with another', e1id;
  END IF;
  -- Get topology id
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = toponame;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  BEGIN
    EXECUTE 'SELECT * FROM ' || quote_ident(toponame)
      || '.edge_data WHERE edge_id = ' || e1id
      INTO STRICT e1rec;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent edge %', e1id;
      WHEN INVALID_SCHEMA_NAME THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
      WHEN UNDEFINED_TABLE THEN
        RAISE EXCEPTION 'corrupted topology "%" (missing edge_data table)',
          toponame;
  END;
  BEGIN
    EXECUTE 'SELECT * FROM ' || quote_ident(toponame)
      || '.edge_data WHERE edge_id = ' || e2id
      INTO STRICT e2rec;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent edge %', e2id;
    -- NOTE: checks for INVALID_SCHEMA_NAME or UNDEFINED_TABLE done before
  END;

  -- NOT IN THE SPECS: See if any of the two edges are closed.
  IF e1rec.start_node = e1rec.end_node THEN
    RAISE EXCEPTION 'Edge % is closed, cannot heal to edge %', e1id, e2id;
  END IF;
  IF e2rec.start_node = e2rec.end_node THEN
    RAISE EXCEPTION 'Edge % is closed, cannot heal to edge %', e2id, e1id;
  END IF;
  -- Find common node
  IF e1rec.end_node = e2rec.start_node THEN
    commonnode = e1rec.end_node;
    caseno = 1;
  ELSIF e1rec.end_node = e2rec.end_node THEN
    commonnode = e1rec.end_node;
    caseno = 2;
  END IF;
  -- Check if any other edge is connected to the common node
  IF commonnode IS NOT NULL THEN
    FOR rec IN EXECUTE 'SELECT edge_id FROM ' || quote_ident(toponame)
      || '.edge_data WHERE ( edge_id != ' || e1id
      || ' AND edge_id != ' || e2id || ') AND ( start_node = '
      || commonnode || ' OR end_node = ' || commonnode || ' )'
    LOOP
      commonnode := NULL;
      connectededges = connectededges || rec.edge_id;
    END LOOP;
  END IF;
  IF commonnode IS NULL THEN
    IF e1rec.start_node = e2rec.start_node THEN
      commonnode = e1rec.start_node;
      caseno = 3;
    ELSIF e1rec.start_node = e2rec.end_node THEN
      commonnode = e1rec.start_node;
      caseno = 4;
    END IF;
    -- Check if any other edge is connected to the common node
    IF commonnode IS NOT NULL THEN
      FOR rec IN EXECUTE 'SELECT edge_id FROM ' || quote_ident(toponame)
        || '.edge_data WHERE ( edge_id != ' || e1id
        || ' AND edge_id != ' || e2id || ') AND ( start_node = '
        || commonnode || ' OR end_node = ' || commonnode || ' )'
      LOOP
        commonnode := NULL;
        connectededges = connectededges || rec.edge_id;
      END LOOP;
    END IF;
  END IF;
  IF commonnode IS NULL THEN
    IF connectededges IS NOT NULL THEN
      RAISE EXCEPTION 'SQL/MM Spatial exception - other edges connected (%)', array_to_string(connectededges, ',');
    ELSE
      RAISE EXCEPTION 'SQL/MM Spatial exception - non-connected edges';
    END IF;
  END IF;
  -- NOT IN THE SPECS:
  -- check if any topo_geom is defined only by one of the
  -- input edges. In such case there would be no way to adapt
  -- the definition in case of healing, so we'd have to bail out
  eidary = ARRAY[e1id, e2id];
  sql := 'SELECT t.* from ('
    || 'SELECT r.topogeo_id, r.layer_id'
    || ', l.schema_name, l.table_name, l.feature_column'
    || ', array_agg(abs(r.element_id)) as elems '
    || 'FROM topology.layer l INNER JOIN '
    || quote_ident(toponame)
    || '.relation r ON (l.layer_id = r.layer_id) '
    || 'WHERE l.level = 0 AND l.feature_type = 2 '
    || ' AND l.topology_id = ' || topoid
    || ' AND abs(r.element_id) IN (' || e1id || ',' || e2id || ') '
    || 'group by r.topogeo_id, r.layer_id, l.schema_name, l.table_name, '
    || ' l.feature_column ) t WHERE NOT t.elems @> '
    || quote_literal(eidary);
  --RAISE DEBUG 'SQL: %', sql;
  FOR rec IN EXECUTE sql LOOP
    RAISE EXCEPTION 'TopoGeom % in layer % (%.%.%) cannot be represented healing edges % and %',
          rec.topogeo_id, rec.layer_id,
          rec.schema_name, rec.table_name, rec.feature_column,
          e1id, e2id;
  END LOOP;
  -- Create new edge {
  rec := e1rec;
  IF caseno = 1 THEN -- e1.end = e2.start
    rec.geom = ST_MakeLine(e1rec.geom, e2rec.geom);
    rec.end_node = e2rec.end_node;
    rec.next_left_edge = e2rec.next_left_edge;
    e2sign = 1;
  ELSIF caseno = 2 THEN -- e1.end = e2.end
    rec.geom = ST_MakeLine(e1rec.geom, st_reverse(e2rec.geom));
    rec.end_node = e2rec.start_node;
    rec.next_left_edge = e2rec.next_right_edge;
    e2sign = -1;
  ELSIF caseno = 3 THEN -- e1.start = e2.start
    rec.geom = ST_MakeLine(st_reverse(e2rec.geom), e1rec.geom);
    rec.start_node = e2rec.end_node;
    rec.next_right_edge = e2rec.next_left_edge;
    e2sign = -1;
  ELSIF caseno = 4 THEN -- e1.start = e2.end
    rec.geom = ST_MakeLine(e2rec.geom, e1rec.geom);
    rec.start_node = e2rec.start_node;
    rec.next_right_edge = e2rec.next_right_edge;
    e2sign = 1;
  END IF;
  -- }
  -- Insert new edge {
  EXECUTE 'SELECT nextval(' || quote_literal(
      quote_ident(toponame) || '.edge_data_edge_id_seq'
    ) || ')' INTO STRICT newedgeid;
  EXECUTE 'INSERT INTO ' || quote_ident(toponame)
    || '.edge VALUES(' || newedgeid
    || ',' || rec.start_node
    || ',' || rec.end_node
    || ',' || rec.next_left_edge
    || ',' || rec.next_right_edge
    || ',' || rec.left_face
    || ',' || rec.right_face
    || ',' || quote_literal(rec.geom::text)
    || ')';
  -- End of new edge insertion }
  -- Update next_left_edge/next_right_edge for
  -- any edge having them still pointing at the edges being removed
  -- (e2id)
  --
  -- NOTE:
  -- *(next_XXX_edge/e2id) serves the purpose of extracting existing
  -- sign from the value, while *e2sign changes that sign again if we
  -- reverted edge2 direction
  --
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET abs_next_left_edge = ' || newedgeid
    || ', next_left_edge = ' || e2sign*newedgeid
    || '*(next_left_edge/'
    || e2id || ')  WHERE abs_next_left_edge = ' || e2id;
  IF e2rec.start_node = commonnode THEN
    sql := sql || ' AND end_node = ' || e2rec.end_node;
  ELSE
    sql := sql || ' AND end_node = ' || e2rec.start_node;
  END IF;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET abs_next_right_edge = ' || newedgeid
    || ', next_right_edge = ' || e2sign*newedgeid
    || '*(next_right_edge/'
    || e2id || ') WHERE abs_next_right_edge = ' || e2id;
  IF e2rec.start_node = commonnode THEN
    sql := sql || ' AND start_node = ' || e2rec.end_node;
  ELSE
    sql := sql || ' AND start_node = ' || e2rec.start_node;
  END IF;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  -- New edge has the same direction as old edge 1
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET abs_next_left_edge = ' || newedgeid
    || ', next_left_edge = ' || newedgeid
    || '*(next_left_edge/'
    || e1id || ')  WHERE abs_next_left_edge = ' || e1id;
  IF e1rec.start_node = commonnode THEN
    sql := sql || ' AND end_node = ' || e1rec.end_node;
  ELSE
    sql := sql || ' AND end_node = ' || e1rec.start_node;
  END IF;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET abs_next_right_edge = ' || newedgeid
    || ', next_right_edge = ' || newedgeid
    || '*(next_right_edge/'
    || e1id || ') WHERE abs_next_right_edge = ' || e1id;
  IF e1rec.start_node = commonnode THEN
    sql := sql || ' AND start_node = ' || e1rec.end_node;
  ELSE
    sql := sql || ' AND start_node = ' || e1rec.start_node;
  END IF;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  --
  -- NOT IN THE SPECS:
  -- Replace composition rows involving the two
  -- edges as one involving the new edge.
  -- It takes a DELETE and an UPDATE to do all
  sql := 'DELETE FROM ' || quote_ident(toponame)
    || '.relation r USING topology.layer l '
    || 'WHERE l.level = 0 AND l.feature_type = 2'
    || ' AND l.topology_id = ' || topoid
    || ' AND l.layer_id = r.layer_id AND abs(r.element_id) = '
    || e2id;
  --RAISE DEBUG 'SQL: %', sql;
  EXECUTE sql;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.relation r '
    || ' SET element_id = ' || newedgeid || '*(element_id/'
    || e1id
    || ') FROM topology.layer l WHERE l.level = 0 AND l.feature_type = 2'
    || ' AND l.topology_id = ' || topoid
    || ' AND l.layer_id = r.layer_id AND abs(r.element_id) = '
    || e1id
  ;

  EXECUTE sql;

  -- Delete both edges
  EXECUTE 'DELETE FROM ' || quote_ident(toponame)
    || '.edge_data WHERE edge_id = ' || e2id;
  EXECUTE 'DELETE FROM ' || quote_ident(toponame)
    || '.edge_data WHERE edge_id = ' || e1id;
  -- Delete the common node 
  BEGIN
    EXECUTE 'DELETE FROM ' || quote_ident(toponame)
            || '.node WHERE node_id = ' || commonnode;
    EXCEPTION
      WHEN UNDEFINED_TABLE THEN
        RAISE EXCEPTION 'corrupted topology "%" (missing node table)',
          toponame;
  END;
  RETURN newedgeid;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge, anotheredge - Heal two edges by deleting the node connecting them, deleting both edges,and replacing them with an edge whose direction is the same as the firstedge provided.]]></comment>
		</function>
		<function name="st_newedgessplit" id="Function_1f8b38ac" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_newedgessplit(atopology character varying, anedge integer, apoint geometry)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  oldedge RECORD;
  rec RECORD;
  tmp integer;
  topoid integer;
  nodeid integer;
  nodepos float8;
  edgeid1 integer;
  edgeid2 integer;
  edge1 geometry;
  edge2 geometry;
  ok BOOL;
BEGIN
  --
  -- All args required
  -- 
  IF atopology IS NULL OR anedge IS NULL OR apoint IS NULL THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  
  -- Get topology id
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = atopology;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  --
  -- Check node existance
  -- 
  ok = false;
  FOR oldedge IN EXECUTE 'SELECT * FROM '
    || quote_ident(atopology) || '.edge_data ' ||
    ' WHERE edge_id =  ' || anedge
  LOOP
    ok = true;
  END LOOP;
  IF NOT ok THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - non-existent edge';
  END IF;
  --
  -- Check that given point is Within(anedge.geom)
  -- 
  IF NOT ST_Within(apoint, oldedge.geom) THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - point not on edge';
  END IF;
  --
  -- Check if a coincident node already exists
  --
  FOR rec IN EXECUTE 'SELECT node_id FROM '
    || quote_ident(atopology) || '.node '
    || 'WHERE geom && '
    || quote_literal(apoint::text) || '::geometry'
    || ' AND ST_X(geom) = ST_X('
    || quote_literal(apoint::text) || '::geometry)'
    || ' AND ST_Y(geom) = ST_Y('
    || quote_literal(apoint::text) || '::geometry)'
  LOOP
    RAISE EXCEPTION
     'SQL/MM Spatial exception - coincident node';
  END LOOP;
  --
  -- Get new node id
  --
  FOR rec IN EXECUTE 'SELECT nextval(''' ||
    atopology || '.node_node_id_seq'')'
  LOOP
    nodeid = rec.nextval;
  END LOOP;
  --RAISE NOTICE 'Next node id = % ', nodeid;
  --
  -- Add the new node 
  --
  EXECUTE 'INSERT INTO ' || quote_ident(atopology)
    || '.node(node_id, geom) 
    VALUES(' || nodeid || ','
    || quote_literal(apoint::text)
    || ')';
  --
  -- Delete the old edge
  --
  EXECUTE 'DELETE FROM ' || quote_ident(atopology) || '.edge_data '
    || ' WHERE edge_id = ' || anedge;
  --
  -- Compute new edges
  --
  edge2 := ST_Split(oldedge.geom, apoint);
  edge1 := ST_GeometryN(edge2, 1);
  edge2 := ST_GeometryN(edge2, 2);
  --
  -- Get ids for the new edges 
  --
  FOR rec IN EXECUTE 'SELECT nextval(''' ||
    atopology || '.edge_data_edge_id_seq'')'
  LOOP
    edgeid1 = rec.nextval;
  END LOOP;
  FOR rec IN EXECUTE 'SELECT nextval(''' ||
    atopology || '.edge_data_edge_id_seq'')'
  LOOP
    edgeid2 = rec.nextval;
  END LOOP;


  --RAISE NOTICE 'EdgeId1 % EdgeId2 %', edgeid1, edgeid2;
  --RAISE DEBUG 'oldedge.next_left_edge: %', oldedge.next_left_edge;
  --RAISE DEBUG 'oldedge.next_right_edge: %', oldedge.next_right_edge;
  --
  -- Insert the two new edges
  --
  EXECUTE 'INSERT INTO ' || quote_ident(atopology)
    || '.edge VALUES('
    || edgeid1                                -- edge_id
    || ',' || oldedge.start_node              -- start_node
    || ',' || nodeid                          -- end_node
    || ',' || edgeid2                         -- next_left_edge
    || ',' || CASE                            -- next_right_edge
               WHEN 
                oldedge.next_right_edge = anedge
               THEN edgeid1
               WHEN
                oldedge.next_right_edge = -anedge
               THEN -edgeid2
               ELSE oldedge.next_right_edge
              END
    || ',' || oldedge.left_face               -- left_face
    || ',' || oldedge.right_face              -- right_face
    || ',' || quote_literal(edge1::text)      -- geom
    ||')';
  EXECUTE 'INSERT INTO ' || quote_ident(atopology)
    || '.edge VALUES('
    || edgeid2                                -- edge_id
    || ',' || nodeid                          -- start_node
    || ',' || oldedge.end_node                -- end_node
    || ',' || CASE                            -- next_left_edge
               WHEN 
                oldedge.next_left_edge =
                -anedge
               THEN -edgeid2
               WHEN 
                oldedge.next_left_edge =
                anedge
               THEN edgeid1
               ELSE oldedge.next_left_edge
              END
    || ',' || -edgeid1                        -- next_right_edge
    || ',' || oldedge.left_face               -- left_face
    || ',' || oldedge.right_face              -- right_face
    || ',' || quote_literal(edge2::text)      -- geom
    ||')';
  --
  -- Update all next edge references to match new layout
  --
  EXECUTE 'UPDATE ' || quote_ident(atopology)
    || '.edge_data SET next_right_edge = '
    || edgeid2
    || ','
    || ' abs_next_right_edge = ' || edgeid2
    || ' WHERE next_right_edge = ' || anedge
    || ' AND start_node = ' || oldedge.start_node
    || ' AND edge_id NOT IN (' || edgeid1 || ',' || edgeid2 || ')'
    ;
  EXECUTE 'UPDATE ' || quote_ident(atopology)
    || '.edge_data SET next_right_edge = '
    || -edgeid1
    || ','
    || ' abs_next_right_edge = ' || edgeid1
    || ' WHERE next_right_edge = ' || -anedge
    || ' AND start_node = ' || oldedge.end_node
    || ' AND edge_id NOT IN (' || edgeid1 || ',' || edgeid2 || ')'
    ;
  EXECUTE 'UPDATE ' || quote_ident(atopology)
    || '.edge_data SET next_left_edge = '
    || edgeid1
    || ','
    || ' abs_next_left_edge = ' || edgeid1
    || ' WHERE next_left_edge = ' || anedge
    || ' AND end_node = ' || oldedge.start_node
    || ' AND edge_id NOT IN (' || edgeid1 || ',' || edgeid2 || ')'
    ;
  EXECUTE 'UPDATE ' || quote_ident(atopology)
    || '.edge_data SET '
    || ' next_left_edge = ' || -edgeid2
    || ','
    || ' abs_next_left_edge = ' || edgeid2
    || ' WHERE next_left_edge = ' || -anedge
    || ' AND end_node = ' || oldedge.end_node
    || ' AND edge_id NOT IN (' || edgeid1 || ',' || edgeid2 || ')'
    ;
  --
  -- Update references in the Relation table.
  -- We only take into considerations non-hierarchical
  -- TopoGeometry here, for obvious reasons.
  --
  FOR rec IN EXECUTE 'SELECT r.* FROM '
    || quote_ident(atopology)
    || '.relation r, topology.layer l '
    || ' WHERE '
    || ' l.topology_id = ' || topoid
    || ' AND l.level = 0 '
    || ' AND l.layer_id = r.layer_id '
    || ' AND abs(r.element_id) = ' || anedge
    || ' AND r.element_type = 2'
  LOOP
    --RAISE NOTICE 'TopoGeometry % in layer % contains the edge being split', rec.topogeo_id, rec.layer_id;
    -- Delete old reference
    EXECUTE 'DELETE FROM ' || quote_ident(atopology)
      || '.relation '
      || ' WHERE '
      || 'layer_id = ' || rec.layer_id
      || ' AND '
      || 'topogeo_id = ' || rec.topogeo_id
      || ' AND '
      || 'element_type = ' || rec.element_type
      || ' AND '
      || 'abs(element_id) = ' || anedge;
    -- Add new reference to edge1
    IF rec.element_id < 0 THEN
      tmp = -edgeid1;
    ELSE
      tmp = edgeid1;
    END IF;
    EXECUTE 'INSERT INTO ' || quote_ident(atopology)
      || '.relation '
      || ' VALUES( '
      || rec.topogeo_id
      || ','
      || rec.layer_id
      || ','
      || tmp
      || ','
      || rec.element_type
      || ')';
    -- Add new reference to edge2
    IF rec.element_id < 0 THEN
      tmp = -edgeid2;
    ELSE
      tmp = edgeid2;
    END IF;
    EXECUTE 'INSERT INTO ' || quote_ident(atopology)
      || '.relation '
      || ' VALUES( '
      || rec.topogeo_id
      || ','
      || rec.layer_id
      || ','
      || tmp
      || ','
      || rec.element_type
      || ')';
      
  END LOOP;
  --RAISE NOTICE 'Edge % split in edges % and % by node %',
  --  anedge, edgeid1, edgeid2, nodeid;
  RETURN nodeid; 
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge, apoint - Split an edge by creating a new node along an existing edge, deleting the original edge and replacing it with two new edges. Returns the id of the new node created that joins the new edges.]]></comment>
		</function>
		<function name="st_remedgemodface" id="Function_28dceda3" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_remedgemodface(toponame character varying, e1id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  e1rec RECORD;
  rec RECORD;
  fidary int[];
  topoid int;
  sql text;
  floodfaceid int;
  elink int;
BEGIN
  --
  -- toponame and face_id are required
  -- 
  IF toponame IS NULL OR e1id IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  -- Get topology id
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = toponame;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  BEGIN
    EXECUTE 'SELECT * FROM ' || quote_ident(toponame)
      || '.edge_data WHERE edge_id = ' || e1id
      INTO STRICT e1rec;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent edge %', e1id;
      WHEN INVALID_SCHEMA_NAME THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
      WHEN UNDEFINED_TABLE THEN
        RAISE EXCEPTION 'corrupted topology "%" (missing edge_data table)',
          toponame;
  END;
  -- NOT IN THE SPECS:
  -- Check that no TopoGeometry references the edge being removed
  PERFORM topology._ST_RemEdgeCheck(toponame, topoid, e1id, e1rec.left_face, e1rec.right_face);
  -- Update next_left_edge and next_right_edge face
  -- for all edges bounding the new face
  RAISE NOTICE 'Updating next_{right,left}_face of ring edges...';
  -- TODO: reduce the following to 2 UPDATE rather than 4
  -- Update next_left_edge of previous edges in left face -- {
  elink := e1rec.next_left_edge;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_left_edge = '
    || elink
    || ', abs_next_left_edge = '
    || abs(elink)
    || ' WHERE next_left_edge < 0 AND abs(next_left_edge) = '
    || e1id;

  EXECUTE sql;
  -- If the edge being removed links to self,
  -- we use the other face
  IF e1rec.abs_next_right_edge = e1rec.edge_id THEN
    elink := e1rec.next_left_edge;
  ELSE
    elink := e1rec.next_right_edge;
  END IF;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_left_edge = '
    || elink
    || ', abs_next_left_edge = '
    || abs(elink)
    || ' WHERE next_left_edge > 0 AND abs(next_left_edge) = '
    || e1id;

  EXECUTE sql;
  -- }
  -- Update next_right_edge of previous edges in right face -- {
  elink := e1rec.next_left_edge;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_right_edge = '
    || elink
    || ', abs_next_right_edge = '
    || abs(elink)
    || ' WHERE next_right_edge < 0 AND abs(next_right_edge) = '
    || e1id;

  EXECUTE sql;
  -- If the edge being removed links to self,
  -- we use the other face
  IF e1rec.abs_next_right_edge = e1rec.edge_id THEN
    elink := e1rec.next_left_edge;
  ELSE
    elink := e1rec.next_right_edge;
  END IF;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_right_edge = '
    || elink
    || ', abs_next_right_edge = '
    || abs(elink)
    || ' WHERE next_right_edge > 0 AND abs(next_right_edge) = '
    || e1id;

  EXECUTE sql;
  -- }
  IF e1rec.left_face = e1rec.right_face THEN -- {
    floodfaceid = e1rec.left_face; 
  ELSE -- }{
    IF e1rec.left_face = 0 OR e1rec.right_face = 0 THEN -- {
      --
      -- We won't add any new face, but rather let the universe
      -- flood the removed face.
      --
      floodfaceid = 0;
    ELSE -- }{
      -- we choose right face as the face that will remain
      -- to be symmetric with ST_AddEdgeModFace 
      floodfaceid = e1rec.right_face;
      sql := 'UPDATE '
        || quote_ident(toponame)
        || '.face SET mbr = (SELECT '
        -- minimum bounding rectangle is the union of the old faces mbr
        -- (doing this without GEOS would be faster)
        || 'ST_Envelope(ST_Union(mbr)) FROM '
        || quote_ident(toponame)
        || '.face WHERE face_id IN (' 
        || e1rec.left_face || ',' || e1rec.right_face 
        || ') ) WHERE face_id = ' || floodfaceid ;

      EXECUTE sql;
    END IF; -- }
    -- Update left_face for all edges still referencing old faces
    sql := 'UPDATE ' || quote_ident(toponame)
      || '.edge_data SET left_face = ' || floodfaceid 
      || ' WHERE left_face IN ('
      || e1rec.left_face || ',' || e1rec.right_face 
      || ')';

    EXECUTE sql;
    -- Update right_face for all edges still referencing old faces
    sql := 'UPDATE ' || quote_ident(toponame)
      || '.edge_data SET right_face = ' || floodfaceid 
      || ' WHERE right_face IN ('
      || e1rec.left_face || ',' || e1rec.right_face 
      || ')';

    EXECUTE sql;
    -- Update containing_face for all nodes still referencing old faces
    sql := 'UPDATE ' || quote_ident(toponame)
      || '.node SET containing_face = ' || floodfaceid 
      || ' WHERE containing_face IN ('
      || e1rec.left_face || ',' || e1rec.right_face 
      || ')';

    EXECUTE sql;
    -- NOT IN THE SPECS:
    -- Replace composition rows involving the two
    -- faces as one involving the new face.
    -- It takes a single DELETE to do that.
    sql := 'DELETE FROM ' || quote_ident(toponame)
      || '.relation r USING topology.layer l '
      || 'WHERE l.level = 0 AND l.feature_type = 3'
      || ' AND l.topology_id = ' || topoid
      || ' AND l.layer_id = r.layer_id AND abs(r.element_id) IN ('
      || e1rec.left_face || ',' || e1rec.right_face
      || ') AND abs(r.element_id) != '
      || floodfaceid; -- could be optimized..

    EXECUTE sql;
  END IF; -- } two faces healed...
  -- Delete the edge
  sql := 'DELETE FROM ' || quote_ident(toponame)
    || '.edge_data WHERE edge_id = ' || e1id;

  EXECUTE sql;
  -- Check if any of the edge nodes remains isolated, 
  -- set containing_face  = floodfaceid in that case
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.node n SET containing_face = ' || floodfaceid
    || ' WHERE node_id IN ('
    || e1rec.start_node || ','
    || e1rec.end_node || ') AND NOT EXISTS (SELECT edge_id FROM '
    || quote_ident(toponame)
    || '.edge_data WHERE start_node = n.node_id OR end_node = n.node_id)';

  EXECUTE sql;
  IF e1rec.right_face != e1rec.left_face THEN -- {
    -- Delete left face, if not universe and not "flood" face
    IF e1rec.left_face != 0 AND e1rec.left_face != floodfaceid
    THEN
      sql := 'DELETE FROM ' || quote_ident(toponame)
        || '.face WHERE face_id = ' || e1rec.left_face; 

      EXECUTE sql;
    END IF;
    -- Delete right face, if not universe and not "flood" face
    IF e1rec.right_face != 0 AND e1rec.right_face != floodfaceid
    THEN
      sql := 'DELETE FROM ' || quote_ident(toponame)
        || '.face WHERE face_id = ' || e1rec.right_face;

      EXECUTE sql;
    END IF;
  END IF; -- }
  RETURN floodfaceid;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge - Removes an edge and, if the removed edge separated two faces,delete one of the them and modify the other to take the space of both.]]></comment>
		</function>
		<function name="st_remedgenewface" id="Function_18019591" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_remedgenewface(toponame character varying, e1id integer)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  e1rec RECORD;
  rec RECORD;
  fidary int[];
  topoid int;
  sql text;
  newfaceid int;
  newfacecreated bool;
  elink int;
BEGIN
  --
  -- toponame and face_id are required
  -- 
  IF toponame IS NULL OR e1id IS NULL THEN
    RAISE EXCEPTION 'SQL/MM Spatial exception - null argument';
  END IF;
  -- Get topology id
  BEGIN
    SELECT id FROM topology.topology
      INTO STRICT topoid WHERE name = toponame;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
  END;
  BEGIN
    EXECUTE 'SELECT * FROM ' || quote_ident(toponame)
      || '.edge_data WHERE edge_id = ' || e1id
      INTO STRICT e1rec;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - non-existent edge %', e1id;
      WHEN INVALID_SCHEMA_NAME THEN
        RAISE EXCEPTION 'SQL/MM Spatial exception - invalid topology name';
      WHEN UNDEFINED_TABLE THEN
        RAISE EXCEPTION 'corrupted topology "%" (missing edge_data table)',
          toponame;
  END;
  -- NOT IN THE SPECS:
  -- Check that no TopoGeometry references the edge being removed
  PERFORM topology._ST_RemEdgeCheck(toponame, topoid, e1id, e1rec.left_face, e1rec.right_face);
  -- Update next_left_edge and next_right_edge face
  -- for all edges bounding the new face
  RAISE NOTICE 'Updating next_{right,left}_face of ring edges...';
  -- TODO: reduce the following to 2 UPDATE rather than 4
  -- Update next_left_edge of previous edges in left face -- {
  elink := e1rec.next_left_edge;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_left_edge = '
    || elink
    || ', abs_next_left_edge = '
    || abs(elink)
    || ' WHERE next_left_edge < 0 AND abs(next_left_edge) = '
    || e1id;

  EXECUTE sql;
  -- If the edge being removed links to self,
  -- we use the other face
  IF e1rec.abs_next_right_edge = e1rec.edge_id THEN
    elink := e1rec.next_left_edge;
  ELSE
    elink := e1rec.next_right_edge;
  END IF;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_left_edge = '
    || elink
    || ', abs_next_left_edge = '
    || abs(elink)
    || ' WHERE next_left_edge > 0 AND abs(next_left_edge) = '
    || e1id;

  EXECUTE sql;
  -- }
  -- Update next_right_edge of previous edges in right face -- {
  elink := e1rec.next_left_edge;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_right_edge = '
    || elink
    || ', abs_next_right_edge = '
    || abs(elink)
    || ' WHERE next_right_edge < 0 AND abs(next_right_edge) = '
    || e1id;

  EXECUTE sql;
  -- If the edge being removed links to self,
  -- we use the other face
  IF e1rec.abs_next_right_edge = e1rec.edge_id THEN
    elink := e1rec.next_left_edge;
  ELSE
    elink := e1rec.next_right_edge;
  END IF;
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.edge_data SET next_right_edge = '
    || elink
    || ', abs_next_right_edge = '
    || abs(elink)
    || ' WHERE next_right_edge > 0 AND abs(next_right_edge) = '
    || e1id;

  EXECUTE sql;
  -- }
  IF e1rec.left_face = e1rec.right_face THEN -- {
    newfaceid := e1rec.left_face; -- TODO: or what should we return ?
    newfacecreated := false;
  ELSE -- }{
    IF e1rec.left_face = 0 OR e1rec.right_face = 0 THEN -- {
      --
      -- We won't add any new face, but rather let the universe
      -- flood the removed face.
      --
      newfaceid := 0;
      newfacecreated := false;
    ELSE -- }{
      --
      -- Insert the new face 
      --
      sql := 'SELECT nextval(' || quote_literal(
          quote_ident(toponame) || '.face_face_id_seq'
        ) || ')';
      EXECUTE sql INTO STRICT newfaceid;
      newfacecreated := true;
      sql := 'INSERT INTO '
        || quote_ident(toponame)
        || '.face(face_id, mbr) SELECT '
        -- face_id
        || newfaceid  || ', '
        -- minimum bounding rectangle is the union of the old faces mbr
        -- (doing this without GEOS would be faster)
        || 'ST_Envelope(ST_Union(mbr)) FROM '
        || quote_ident(toponame)
        || '.face WHERE face_id IN (' 
        || e1rec.left_face || ',' || e1rec.right_face 
        || ')';

      EXECUTE sql;
    END IF; -- }
    -- Update left_face for all edges still referencing old faces
    sql := 'UPDATE ' || quote_ident(toponame)
      || '.edge_data SET left_face = ' || newfaceid 
      || ' WHERE left_face IN ('
      || e1rec.left_face || ',' || e1rec.right_face 
      || ')';

    EXECUTE sql;
    -- Update right_face for all edges still referencing old faces
    sql := 'UPDATE ' || quote_ident(toponame)
      || '.edge_data SET right_face = ' || newfaceid 
      || ' WHERE right_face IN ('
      || e1rec.left_face || ',' || e1rec.right_face 
      || ')';

    EXECUTE sql;
    -- Update containing_face for all nodes still referencing old faces
    sql := 'UPDATE ' || quote_ident(toponame)
      || '.node SET containing_face = ' || newfaceid 
      || ' WHERE containing_face IN ('
      || e1rec.left_face || ',' || e1rec.right_face 
      || ')';

    EXECUTE sql;
    -- NOT IN THE SPECS:
    -- Replace composition rows involving the two
    -- faces as one involving the new face.
    -- It takes a DELETE and an UPDATE to do all
    sql := 'DELETE FROM ' || quote_ident(toponame)
      || '.relation r USING topology.layer l '
      || 'WHERE l.level = 0 AND l.feature_type = 3'
      || ' AND l.topology_id = ' || topoid
      || ' AND l.layer_id = r.layer_id AND abs(r.element_id) = '
      || e1rec.left_face;

    EXECUTE sql;
    sql := 'UPDATE ' || quote_ident(toponame)
      || '.relation r '
      || ' SET element_id = ' || newfaceid 
      || ' FROM topology.layer l WHERE l.level = 0 AND l.feature_type = 3'
      || ' AND l.topology_id = ' || topoid
      || ' AND l.layer_id = r.layer_id AND r.element_id = '
      || e1rec.right_face;

    EXECUTE sql;
  END IF; -- } two faces healed...
  -- Delete the edge
  sql := 'DELETE FROM ' || quote_ident(toponame)
    || '.edge_data WHERE edge_id = ' || e1id;

  EXECUTE sql;
  -- Check if any of the edge nodes remains isolated, 
  -- set containing_face  = newfaceid in that case
  sql := 'UPDATE ' || quote_ident(toponame)
    || '.node n SET containing_face = ' || newfaceid
    || ' WHERE node_id IN ('
    || e1rec.start_node || ','
    || e1rec.end_node || ') AND NOT EXISTS (SELECT edge_id FROM '
    || quote_ident(toponame)
    || '.edge_data WHERE start_node = n.node_id OR end_node = n.node_id)';

  EXECUTE sql;
  IF e1rec.right_face != e1rec.left_face THEN -- {
    -- Delete left face, if not universe
    IF e1rec.left_face != 0 THEN
      sql := 'DELETE FROM ' || quote_ident(toponame)
        || '.face WHERE face_id = ' || e1rec.left_face; 

      EXECUTE sql;
    END IF;
    -- Delete right face, if not universe
    IF e1rec.right_face != 0
    THEN
      sql := 'DELETE FROM ' || quote_ident(toponame)
        || '.face WHERE face_id = ' || e1rec.right_face;

      EXECUTE sql;
    END IF;
  END IF; -- }
  IF newfacecreated THEN
    RETURN newfaceid;
  ELSE
    RETURN NULL; -- -newfaceid;
  END IF;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anedge - Removes an edge and, if the removed edge separated two faces,delete the original faces and replace them with a new face.]]></comment>
		</function>
		<function name="st_remisonode" id="Function_19848e8" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_remisonode(character varying, integer)
 RETURNS text
 LANGUAGE sql
AS $function$
  SELECT topology.ST_RemoveIsoNode($1, $2)
$function$
]]></string>
		</function>
		<function name="st_removeisoedge" id="Function_352dfa02" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_removeisoedge(atopology character varying, anedge integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  edge RECORD;
  rec RECORD;
  ok BOOL;
BEGIN
  --
  -- Atopology and anedge are required
  -- 
  IF atopology IS NULL OR anedge IS NULL THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  --
  -- Check node existance
  -- 
  ok = false;
  FOR edge IN EXECUTE 'SELECT * FROM '
    || quote_ident(atopology) || '.edge_data ' ||
    ' WHERE edge_id =  ' || anedge
  LOOP
    ok = true;
  END LOOP;
  IF NOT ok THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - non-existent edge';
  END IF;
  --
  -- Check node isolation
  -- 
  IF edge.left_face != edge.right_face THEN
    RAISE EXCEPTION
      'SQL/MM Spatial exception - not isolated edge';
  END IF;
  FOR rec IN EXECUTE 'SELECT * FROM '
    || quote_ident(atopology) || '.edge_data ' 
    || ' WHERE edge_id !=  ' || anedge
    || ' AND ( start_node = ' || edge.start_node
    || ' OR start_node = ' || edge.end_node
    || ' OR end_node = ' || edge.start_node
    || ' OR end_node = ' || edge.end_node
    || ' ) '
  LOOP
    RAISE EXCEPTION
      'SQL/MM Spatial exception - not isolated edge';
  END LOOP;
  --
  -- Delete the edge
  --
  EXECUTE 'DELETE FROM ' || quote_ident(atopology) || '.edge_data '
    || ' WHERE edge_id = ' || anedge;
  RETURN 'Isolated edge ' || anedge || ' removed';
END
$function$
]]></string>
		</function>
		<function name="st_removeisonode" id="Function_2ecb932" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_removeisonode(atopology character varying, anode integer)
 RETURNS text
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
BEGIN
  --
  -- Atopology and apoint are required
  -- 
  IF atopology IS NULL OR anode IS NULL THEN
    RAISE EXCEPTION
     'SQL/MM Spatial exception - null argument';
  END IF;
  --
  -- Check node isolation.
  -- 
  FOR rec IN EXECUTE 'SELECT edge_id FROM '
    || quote_ident(atopology) || '.edge_data ' ||
    ' WHERE start_node =  ' || anode ||
    ' OR end_node = ' || anode 
  LOOP
    RAISE EXCEPTION
     'SQL/MM Spatial exception - not isolated node';
  END LOOP;
  EXECUTE 'DELETE FROM ' || quote_ident(atopology) || '.node '
    || ' WHERE node_id = ' || anode;
  RETURN 'Isolated node ' || anode || ' removed';
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, anode - Removes an isolated node and returns description of action. If the node is not isolated (is start or end of an edge), then an exception is thrown.]]></comment>
		</function>
		<function name="st_simplify" id="Function_226a6e32" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.st_simplify(tg topogeometry, tolerance double precision)
 RETURNS geometry
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  topology_info RECORD;
  layer_info RECORD;
  child_layer_info RECORD;
  geom geometry;
  sql TEXT;
BEGIN
  -- Get topology information
  SELECT id, name FROM topology.topology
    INTO topology_info
    WHERE id = tg.topology_id;
  IF NOT FOUND THEN
      RAISE EXCEPTION 'No topology with id "%" in topology.topology', tg.topology_id;
  END IF;
  -- Get layer info
  SELECT * FROM topology.layer
    WHERE topology_id = tg.topology_id
    AND layer_id = tg.layer_id
    INTO layer_info;
  IF NOT FOUND THEN
    RAISE EXCEPTION 'Could not find TopoGeometry layer % in topology %', tg.layer_id, tg.topology_id;
  END IF;
  --
  -- If this feature layer is on any level > 0 we will
  -- compute the topological union of all simplified child
  -- features in fact recursing.
  --
  IF layer_info.level > 0 THEN -- {
    -- Get child layer info
    SELECT * FROM topology.layer WHERE layer_id = layer_info.child_id
      AND topology_id = tg.topology_id
      INTO child_layer_info;
    IF NOT FOUND THEN
      RAISE EXCEPTION 'Invalid layer % in topology % (unexistent child layer %)', tg.layer_id, tg.topology_id, layer_info.child_id;
    END IF;
    sql := 'SELECT st_multi(st_union(topology.ST_Simplify('
      || quote_ident(child_layer_info.feature_column)
      || ',' || tolerance || '))) as geom FROM '
      || quote_ident(child_layer_info.schema_name) || '.'
      || quote_ident(child_layer_info.table_name)
      || ', ' || quote_ident(topology_info.name) || '.relation pr'
      || ' WHERE '
      || ' pr.topogeo_id = ' || tg.id
      || ' AND '
      || ' pr.layer_id = ' || tg.layer_id
      || ' AND '
      || ' id('||quote_ident(child_layer_info.feature_column)
      || ') = pr.element_id '
      || ' AND '
      || 'layer_id('||quote_ident(child_layer_info.feature_column)
      || ') = pr.element_type ';
    RAISE DEBUG '%', sql;
    EXECUTE sql INTO geom;
  ELSIF tg.type = 3 THEN -- [multi]polygon -- }{
    -- TODO: use ST_GetFaceEdges
    -- TODO: is st_unaryunion needed?
    sql := 'SELECT st_multi(st_unaryunion(ST_BuildArea(ST_Node(ST_Collect(ST_Simplify(geom, '
      || tolerance || ')))))) as geom FROM '
      || quote_ident(topology_info.name)
      || '.edge_data e, '
      || quote_ident(topology_info.name)
      || '.relation r WHERE ( e.left_face = r.element_id'
      || ' OR e.right_face = r.element_id )'
      || ' AND r.topogeo_id = ' || tg.id
      || ' AND r.layer_id = ' || tg.layer_id
      || ' AND element_type = 3 ';
    RAISE DEBUG '%', sql;
    EXECUTE sql INTO geom;

  ELSIF tg.type = 2 THEN -- [multi]line -- }{
    sql := 
      'SELECT st_multi(ST_LineMerge(ST_Node(ST_Collect(ST_Simplify(e.geom,'
      || tolerance || '))))) as g FROM '
      || quote_ident(topology_info.name) || '.edge e, '
      || quote_ident(topology_info.name) || '.relation r '
      || ' WHERE r.topogeo_id = ' || tg.id
      || ' AND r.layer_id = ' || tg.layer_id
      || ' AND r.element_type = 2 '
      || ' AND abs(r.element_id) = e.edge_id';
    EXECUTE sql INTO geom;
  
  ELSIF tg.type = 1 THEN -- [multi]point -- }{
    -- Can't simplify points... 
    geom := topology.Geometry(tg);
  ELSIF tg.type = 4 THEN -- mixed collection -- }{
   sql := 'WITH areas AS ( '
      || 'SELECT st_multi(st_union(ST_BuildArea(ST_Node(ST_Collect(ST_Simplify(geom, '
      || tolerance || ')))) as geom FROM '
      || quote_ident(topology_info.name)
      || '.edge_data e, '
      || quote_ident(topology_info.name)
      || '.relation r WHERE ( e.left_face = r.element_id'
      || ' OR e.right_face = r.element_id )'
      || ' AND r.topogeo_id = ' || tg.id
      || ' AND r.layer_id = ' || tg.layer_id
      || ' AND element_type = 3 ), '
      || 'lines AS ( '
      || 'SELECT st_multi(ST_LineMerge(ST_Collect(ST_Simplify(e.geom,'
      || tolerance || ')))) as g FROM '
      || quote_ident(topology_info.name) || '.edge e, '
      || quote_ident(topology_info.name) || '.relation r '
      || ' WHERE r.topogeo_id = ' || tg.id
      || ' AND r.layer_id = ' || tg.layer_id
      || ' AND r.element_type = 2 '
      || ' AND abs(r.element_id) = e.edge_id ), '
      || ' points as ( SELECT st_union(n.geom) as g FROM '
      || quote_ident(topology_info.name) || '.node n, '
      || quote_ident(topology_info.name) || '.relation r '
      || ' WHERE r.topogeo_id = ' || tg.id
      || ' AND r.layer_id = ' || tg.layer_id
      || ' AND r.element_type = 1 '
      || ' AND r.element_id = n.node_id ), '
      || ' un as ( SELECT g FROM areas UNION ALL SELECT g FROM lines '
      || '          UNION ALL SELECT g FROM points ) '
      || 'SELECT ST_Multi(ST_Collect(g)) FROM un';
    EXECUTE sql INTO geom;
  ELSE -- }{
    RAISE EXCEPTION 'Invalid TopoGeometries (unknown type %)', tg.type;
  END IF; -- }
  RETURN geom;
END
$function$
]]></string>
			<comment><![CDATA[args: geomA, tolerance - Returns a "simplified" geometry version of the given TopoGeometry using the Douglas-Peucker algorithm.]]></comment>
		</function>
		<function name="topoelementarray_agg" id="Function_1f4b1817" isSystem="false" >
			<comment><![CDATA[args: tefield - Returns a topoelementarray for a set of element_id, type arrays (topoelements)]]></comment>
		</function>
		<function name="topoelementarray_append" id="Function_12b8c037" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.topoelementarray_append(topoelementarray, topoelement)
 RETURNS topoelementarray
 LANGUAGE sql
 IMMUTABLE
AS $function$
	SELECT CASE
		WHEN $1 IS NULL THEN
			topology.TopoElementArray('{' || $2::text || '}')
		ELSE
			topology.TopoElementArray($1::int[][]||$2::int[])
		END;
$function$
]]></string>
		</function>
		<function name="topogeo_addgeometry" id="Function_1a2eb948" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.topogeo_addgeometry(atopology character varying, ageom geometry, tolerance double precision DEFAULT 0)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
BEGIN
	RAISE EXCEPTION 'TopoGeo_AddGeometry not implemented yet';
END
$function$
]]></string>
		</function>
		<function name="topogeo_addlinestring" id="Function_1a2c8b3e" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.topogeo_addlinestring(atopology character varying, aline geometry, tolerance double precision DEFAULT 0)
 RETURNS SETOF integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  rec RECORD;
  rec2 RECORD;
  sql TEXT;
  set1 GEOMETRY;
  set2 GEOMETRY;
  snapped GEOMETRY;
  noded GEOMETRY;
  start_node INTEGER;
  end_node INTEGER;
  id INTEGER; 
  inodes GEOMETRY;
  iedges GEOMETRY;
  tol float8;
BEGIN
  -- 0. Check arguments
  IF geometrytype(aline) != 'LINESTRING' THEN
    RAISE EXCEPTION 'Invalid geometry type (%) passed to TopoGeo_AddLinestring, expected LINESTRING', geometrytype(aline);
  END IF;
  -- Get tolerance, if 0 was given
  tol := COALESCE( NULLIF(tolerance, 0), topology._st_mintolerance(atopology, aline) );
  -- 1. Self-node
  noded := ST_UnaryUnion(aline);


  -- 2. Node to edges falling within tol distance
  sql := 'WITH nearby AS ( SELECT e.geom FROM '
    || quote_ident(atopology) 
    || '.edge e WHERE ST_DWithin(e.geom, '
    || quote_literal(noded::text)
    || '::geometry, '
    || tol || ') ) SELECT st_collect(geom) FROM nearby;';

  EXECUTE sql INTO iedges;
  IF iedges IS NOT NULL THEN


    snapped := ST_Snap(noded, iedges, tol);


    noded := ST_Difference(snapped, iedges);


    set1 := ST_Intersection(snapped, iedges);


    set2 := ST_LineMerge(set1);


    noded := ST_Union(noded, set2);


  END IF;
  -- 2.1. Node with existing nodes within tol
  -- TODO: check if we should be only considering _isolated_ nodes!
  sql := 'WITH nearby AS ( SELECT n.geom FROM '
    || quote_ident(atopology) 
    || '.node n WHERE ST_DWithin(n.geom, '
    || quote_literal(noded::text)
    || '::geometry, '
    || tol || ') ) SELECT st_collect(geom) FROM nearby;';

  EXECUTE sql INTO inodes;
  IF inodes IS NOT NULL THEN -- {


    -- TODO: consider snapping once against all elements
    ---      (rather than once with edges and once with nodes)
    noded := ST_Snap(noded, inodes, tol);


    FOR rec IN SELECT (ST_Dump(inodes)).geom
    LOOP
        -- Use the node to split edges
        SELECT ST_Collect(geom) 
        FROM ST_Dump(ST_Split(noded, rec.geom))
        INTO STRICT noded;

    END LOOP;


    -- re-node to account for ST_Snap introduced self-intersections
    -- See http://trac.osgeo.org/postgis/ticket/1714
    -- TODO: consider running UnaryUnion once after all noding 
    noded := ST_UnaryUnion(noded);

  END IF; -- }
  -- 3. For each (now-noded) segment, insert an edge
  FOR rec IN SELECT (ST_Dump(noded)).geom LOOP
    -- TODO: skip point elements ?


    start_node := topology.TopoGeo_AddPoint(atopology,
                                          ST_StartPoint(rec.geom),
                                          tol);


    end_node := topology.TopoGeo_AddPoint(atopology,
                                        ST_EndPoint(rec.geom),
                                        tol);


    -- Added endpoints may have drifted due to tolerance, so
    -- we need to re-snap the edge to the new nodes before adding it
    sql := 'SELECT n1.geom as sn, n2.geom as en FROM ' || quote_ident(atopology)
      || '.node n1, ' || quote_ident(atopology)
      || '.node n2 WHERE n1.node_id = '
      || start_node || ' AND n2.node_id = ' || end_node;


    EXECUTE sql INTO STRICT rec2;
    snapped := ST_SetPoint(
                 ST_SetPoint(rec.geom, ST_NPoints(rec.geom)-1, rec2.en),
                 0, rec2.sn);
    
    snapped := ST_CollectionExtract(ST_MakeValid(snapped), 2);


    -- Check if the so-snapped edge collapsed (see #1650)
    IF ST_IsEmpty(snapped) THEN

      CONTINUE;
    END IF;
    -- Check if the so-snapped edge _now_ exists
    sql := 'SELECT edge_id FROM ' || quote_ident(atopology)
      || '.edge_data WHERE ST_Equals(geom, ' || quote_literal(snapped::text)
      || '::geometry)';

    EXECUTE sql INTO id;
    IF id IS NULL THEN
      id := topology.ST_AddEdgeModFace(atopology, start_node, end_node,
                                       snapped);

    ELSE

    END IF;
    RETURN NEXT id;
  END LOOP;
  RETURN;
END
$function$
]]></string>
			<comment><![CDATA[args: toponame, aline, tolerance - Adds a linestring to an existing topology using a tolerance and possibly splitting existing edges/faces. Returns edge identifiers]]></comment>
		</function>
		<function name="topogeo_addpoint" id="Function_31047d4c" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.topogeo_addpoint(atopology character varying, apoint geometry, tolerance double precision DEFAULT 0)
 RETURNS integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  id integer;
  rec RECORD;
  sql text;
  prj GEOMETRY;
  snapedge GEOMETRY;
  snaptol FLOAT8;
  tol FLOAT8;
  z FLOAT8;
BEGIN
  -- 0. Check arguments
  IF geometrytype(apoint) != 'POINT' THEN
    RAISE EXCEPTION 'Invalid geometry type (%) passed to TopoGeo_AddPoint, expected POINT', geometrytype(apoint);
  END IF;
  -- Get tolerance, if 0 was given
  tol := COALESCE( NULLIF(tolerance, 0), topology._st_mintolerance(atopology, apoint) );
  -- 1. Check if any existing node is closer than the given precision
  --    and if so pick the closest
  sql := 'SELECT a.node_id FROM ' 
    || quote_ident(atopology) 
    || '.node as a WHERE ST_DWithin(a.geom,'
    || quote_literal(apoint::text) || '::geometry,'
    || tol || ') AND ST_Distance('
    || quote_literal(apoint::text)
    || '::geometry, a.geom) < ' || tol || ' ORDER BY ST_Distance('
    || quote_literal(apoint::text)
    || '::geometry, a.geom) LIMIT 1;';

  EXECUTE sql INTO id;
  IF id IS NOT NULL THEN
    RETURN id;
  END IF;


  -- 2. Check if any existing edge falls within tolerance
  --    and if so split it by a point projected on it
  sql := 'SELECT a.edge_id, a.geom FROM ' 
    || quote_ident(atopology) 
    || '.edge as a WHERE ST_DWithin(a.geom,'
    || quote_literal(apoint::text) || '::geometry,'
    || tol || ') ORDER BY ST_Distance('
    || quote_literal(apoint::text)
    || '::geometry, a.geom) LIMIT 1;';

  EXECUTE sql INTO rec;
  IF rec IS NOT NULL THEN
    -- project point to line, split edge by point
    prj := ST_ClosestPoint(rec.geom, apoint);
    -- This is a workaround for ClosestPoint lack of Z support:
    -- http://trac.osgeo.org/postgis/ticket/2033
    z := ST_Z(apoint);
    IF z IS NOT NULL THEN
      prj := ST_Translate(ST_Force_3DZ(prj), 0, 0, z); -- no ST_SetZ ...
    END IF;

    IF NOT ST_Contains(rec.geom, prj) THEN

      -- The tolerance must be big enough for snapping to happen
      -- and small enough to snap only to the projected point.
      -- Unfortunately ST_Distance returns 0 because it also uses
      -- a projected point internally, so we need another way.
      snaptol := topology._st_mintolerance(prj);

      snapedge := ST_Snap(rec.geom, prj, snaptol);
      -- Snapping currently snaps the first point below tolerance
      -- so may possibly move first point. See ticket #1631
      IF NOT ST_Equals(ST_StartPoint(rec.geom), ST_StartPoint(snapedge))
      THEN

        snapedge := ST_MakeLine(ST_StartPoint(rec.geom), snapedge);
      END IF;



      PERFORM topology.ST_ChangeEdgeGeom(atopology, rec.edge_id, snapedge);
    END IF;
    id := topology.ST_ModEdgeSplit(atopology, rec.edge_id, prj);
  ELSE

    id := topology.ST_AddIsoNode(atopology, NULL, apoint);
  END IF;
  RETURN id;
END
$function$
]]></string>
			<comment><![CDATA[args: toponame, apoint, tolerance - Adds a point to an existing topology using a tolerance and possibly splitting an existing edge.]]></comment>
		</function>
		<function name="topogeo_addpolygon" id="Function_4e89572" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.topogeo_addpolygon(atopology character varying, apoly geometry, tolerance double precision DEFAULT 0)
 RETURNS SETOF integer
 LANGUAGE plpgsql
AS $function$
DECLARE
  boundary GEOMETRY;
  fgeom GEOMETRY;
  rec RECORD;
  edges INTEGER[];
  sql TEXT;
  tol FLOAT8;
BEGIN
  -- 0. Check arguments
  IF geometrytype(apoly) != 'POLYGON' THEN
    RAISE EXCEPTION 'Invalid geometry type (%) passed to TopoGeo_AddPolygon, expected POLYGON', geometrytype(apoly);
  END IF;
  -- Get tolerance, if 0 was given
  tol := COALESCE( NULLIF(tolerance, 0), topology._st_mintolerance(atopology, apoly) );
  -- 1. Extract boundary
  boundary := ST_Boundary(apoly);


  -- 2. Add boundaries as edges
  FOR rec IN SELECT (ST_Dump(boundary)).geom LOOP
    edges := array_cat(edges, array_agg(x)) FROM ( select topology.TopoGeo_addLinestring(atopology, rec.geom, tol) as x ) as foo;

  END LOOP;
  -- 3. Find faces covered by input polygon
  --    NOTE: potential snapping changed polygon edges
  sql := 'SELECT f.face_id FROM ' || quote_ident(atopology)
    || '.face f WHERE f.mbr && '
    || quote_literal(apoly::text)
    || '::geometry';

  FOR rec IN EXECUTE sql LOOP
    -- check for actual containment
    fgeom := ST_PointOnSurface(topology.ST_GetFaceGeometry(atopology, rec.face_id));
    IF NOT ST_Covers(apoly, fgeom) THEN

      CONTINUE;
    END IF;
    RETURN NEXT rec.face_id;
  END LOOP;
END
$function$
]]></string>
			<comment><![CDATA[args: atopology, apoly, atolerance - Adds a polygon to an existing topology using a tolerance and possibly splitting existing edges/faces.]]></comment>
		</function>
		<function name="topologysummary" id="Function_13328772" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.topologysummary(atopology character varying)
 RETURNS text
 LANGUAGE plpgsql
 STABLE STRICT
AS $function$
DECLARE
  rec RECORD;
  rec2 RECORD;
  var_topology_id integer;
  n int4;
  missing int4;
  sql text;
  ret text;
  tgcount int4;
BEGIN
  ret := 'Topology ' || quote_ident(atopology) ;
  BEGIN
    SELECT * FROM topology.topology WHERE name = atopology INTO STRICT rec;
    -- TODO: catch <no_rows> to give a nice error message
    var_topology_id := rec.id;
    ret := ret || ' (id ' || rec.id || ', '
               || 'SRID ' || rec.srid || ', '
               || 'precision ' || rec.precision;
    IF rec.hasz THEN ret := ret || ', has Z'; END IF;
    ret := ret || E')\n';
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      ret := ret || E' (unregistered)\n';
  END;
  BEGIN
    EXECUTE 'SELECT count(*) FROM ' || quote_ident(atopology)
      || '.node ' INTO STRICT n;
    ret = ret || n || ' nodes, ';
  EXCEPTION
    WHEN UNDEFINED_TABLE OR INVALID_SCHEMA_NAME THEN
      IF NOT EXISTS (
          SELECT * FROM pg_catalog.pg_namespace WHERE nspname = atopology
         )
      THEN
        ret = ret || 'missing schema';
        RETURN ret; 
      ELSE
        ret = ret || 'missing nodes, ';
      END IF;
  END;
  BEGIN
    EXECUTE 'SELECT count(*) FROM ' || quote_ident(atopology)
      || '.edge' INTO STRICT n;
    ret = ret || n || ' edges, ';
  EXCEPTION
    WHEN UNDEFINED_TABLE OR INVALID_SCHEMA_NAME THEN
      ret = ret || 'missing edges, ';
  END;
  BEGIN
    EXECUTE 'SELECT count(*) FROM ' || quote_ident(atopology)
      || '.face' INTO STRICT n;
    ret = ret || greatest(n-1,0) || ' faces, '; -- -1 is face=0
  EXCEPTION
    WHEN UNDEFINED_TABLE OR INVALID_SCHEMA_NAME THEN
      ret = ret || 'missing faces, ';
  END;
  BEGIN
    EXECUTE 'SELECT count(distinct layer_id) AS ln, '
      || 'count(distinct (layer_id,topogeo_id)) AS tn FROM '
      || quote_ident(atopology) || '.relation' INTO STRICT rec;
    tgcount := rec.tn;
    ret = ret || rec.tn || ' topogeoms in ' || rec.ln || E' layers\n';
  EXCEPTION
    WHEN UNDEFINED_TABLE THEN
      ret = ret || E'missing relations\n';
    WHEN UNDEFINED_COLUMN THEN
      ret = ret || E'corrupted relations\n';
  END;
  -- print information about registered layers
  FOR rec IN SELECT * FROM topology.layer l
    WHERE l.topology_id = var_topology_id
    ORDER by layer_id
  LOOP -- {
    ret = ret || 'Layer ' || rec.layer_id || ', type ';
    CASE
      WHEN rec.feature_type = 1 THEN
        ret = ret || 'Puntal';
      WHEN rec.feature_type = 2 THEN
        ret = ret || 'Lineal';
      WHEN rec.feature_type = 3 THEN
        ret = ret || 'Polygonal';
      WHEN rec.feature_type = 4 THEN
        ret = ret || 'Mixed';
      ELSE 
        ret = ret || '???';
    END CASE;
    ret = ret || ' (' || rec.feature_type || '), ';
    BEGIN
      EXECUTE 'SELECT count(*) FROM ( SELECT DISTINCT topogeo_id FROM '
        || quote_ident(atopology)
        || '.relation r WHERE r.layer_id = ' || rec.layer_id
        || ' ) foo ' INTO STRICT n;
      ret = ret || n || ' topogeoms' || E'\n';
    EXCEPTION WHEN UNDEFINED_TABLE OR UNDEFINED_COLUMN THEN
      n := NULL;
      ret = ret || 'X topogeoms' || E'\n';
    END;
      IF rec.level > 0 THEN
        ret = ret || ' Hierarchy level ' || rec.level 
                  || ', child layer ' || rec.child_id || E'\n';
      END IF;
      ret = ret || ' Deploy: ';
      IF rec.feature_column != '' THEN
        ret = ret || quote_ident(rec.schema_name) || '.'
                  || quote_ident(rec.table_name) || '.'
                  || quote_ident(rec.feature_column);
        IF n > 0 THEN
          sql := 'SELECT count(*) FROM ( SELECT topogeo_id FROM '
            || quote_ident(atopology)
            || '.relation r WHERE r.layer_id = ' || rec.layer_id
            || ' EXCEPT SELECT DISTINCT id('
            || quote_ident(rec.feature_column) || ') FROM '
            || quote_ident(rec.schema_name) || '.'
            || quote_ident(rec.table_name) || ') as foo';
          BEGIN
            EXECUTE sql INTO STRICT missing;
            IF missing > 0 THEN
              ret = ret || ' (' || missing || ' missing topogeoms)';
            END IF;
          EXCEPTION
            WHEN UNDEFINED_TABLE THEN
              ret = ret || ' ( unexistent table )';
            WHEN UNDEFINED_COLUMN THEN
              ret = ret || ' ( unexistent column )';
          END;
        END IF;
        ret = ret || E'\n';
      ELSE
        ret = ret || E'NONE (detached)\n';
      END IF;
  END LOOP; -- }
  -- print information about unregistered layers containing topogeoms
  IF tgcount > 0 THEN -- {
    sql := 'SELECT layer_id FROM '
        || quote_ident(atopology) || '.relation EXCEPT SELECT layer_id'
        || ' FROM topology.layer WHERE topology_id = $1 ORDER BY layer_id';
    --RAISE DEBUG '%', sql;
    FOR rec IN  EXECUTE sql USING var_topology_id
    LOOP -- {
      ret = ret || 'Layer ' || rec.layer_id::text || ', UNREGISTERED, ';
      EXECUTE 'SELECT count(*) FROM ( SELECT DISTINCT topogeo_id FROM '
        || quote_ident(atopology)
        || '.relation r WHERE r.layer_id = ' || rec.layer_id
        || ' ) foo ' INTO STRICT n;
      ret = ret || n || ' topogeoms' || E'\n';
    END LOOP; -- }
  END IF; -- }
  RETURN ret;
END
$function$
]]></string>
			<comment><![CDATA[args: topology_schema_name - Takes a topology name and provides summary totals of types of objects in topology]]></comment>
		</function>
		<function name="totopogeom" id="Function_240685f" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.totopogeom(ageom geometry, tg topogeometry, atolerance double precision DEFAULT 0)
 RETURNS topogeometry
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  layer_info RECORD;
  topology_info RECORD;
  rec RECORD;
  rec2 RECORD;
  elem INT[];
  elems INT[][];
  sql TEXT;
  typ TEXT;
  tolerance FLOAT8;
  alayer INT;
  atopology TEXT;
BEGIN
  RAISE NOTICE 'TopoGeometry is "%", its topology_id is "%"', tg, topology_id(tg);
  -- Get topology information
  SELECT id, name FROM topology.topology
    INTO topology_info
    WHERE id = topology_id(tg);
  IF NOT FOUND THEN
    RAISE EXCEPTION 'No topology with id "%" in topology.topology',
                    topology_id(tg);
  END IF;
  alayer := layer_id(tg);
  atopology := topology_info.name;

  -- Get tolerance, if 0 was given
  tolerance := COALESCE( NULLIF(atolerance, 0), topology._st_mintolerance(topology_info.name, ageom) );
  -- Get layer information
  BEGIN
    SELECT *, CASE
      WHEN feature_type = 1 THEN 'puntal'
      WHEN feature_type = 2 THEN 'lineal'
      WHEN feature_type = 3 THEN 'areal'
      WHEN feature_type = 4 THEN 'mixed'
      ELSE 'unexpected_'||feature_type
      END as typename
    FROM topology.layer l
      INTO STRICT layer_info
      WHERE l.layer_id = layer_id(tg)
      AND l.topology_id = topology_info.id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'No layer with id "%" in topology "%"',
        alayer, atopology;
  END;
  -- Can't convert to a hierarchical topogeometry
  IF layer_info.level > 0 THEN
      RAISE EXCEPTION 'Layer "%" of topology "%" is hierarchical, cannot convert a simple geometry to it.',
        alayer, atopology;
  END IF;

  -- 
  -- Check type compatibility and set TopoGeometry type
  -- 1:puntal, 2:lineal, 3:areal, 4:collection
  --
  typ = geometrytype(ageom);
  IF typ = 'GEOMETRYCOLLECTION' THEN
    --  A collection can only go to collection layer
    IF layer_info.feature_type != 4 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold a collection feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg.type := 4;
  ELSIF typ = 'POINT' OR typ = 'MULTIPOINT' THEN -- puntal
    --  A point can go in puntal or collection layer
    IF layer_info.feature_type != 4 and layer_info.feature_type != 1 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold a puntal feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg.type := 1;
  ELSIF typ = 'LINESTRING' or typ = 'MULTILINESTRING' THEN -- lineal
    --  A line can go in lineal or collection layer
    IF layer_info.feature_type != 4 and layer_info.feature_type != 2 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold a lineal feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg.type := 2;
  ELSIF typ = 'POLYGON' OR typ = 'MULTIPOLYGON' THEN -- areal
    --  An area can go in areal or collection layer
    IF layer_info.feature_type != 4 and layer_info.feature_type != 3 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold an areal feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg.type := 3;
  ELSE
      -- Should never happen
      RAISE EXCEPTION
        'Unexpected feature dimension %', ST_Dimension(ageom);
  END IF;
  -- Now that we have an empty topogeometry, we loop over distinct components 
  -- and add them to the definition of it. We add them as soon
  -- as possible so that each element can further edit the
  -- definition by splitting
  FOR rec IN SELECT id(tg), alayer as lyr,
    geom, ST_Dimension(geom) as dims
    FROM (SELECT (ST_Dump(ageom)).geom) as f
    WHERE NOT ST_IsEmpty(geom)
  LOOP
    FOR rec2 IN SELECT CASE
       WHEN rec.dims = 0 THEN
         topology.topogeo_addPoint(atopology, rec.geom, tolerance)
       WHEN rec.dims = 1 THEN
         topology.topogeo_addLineString(atopology, rec.geom, tolerance)
       WHEN rec.dims = 2 THEN
         topology.topogeo_addPolygon(atopology, rec.geom, tolerance)
       END as primitive
    LOOP
      elem := ARRAY[rec.dims+1, rec2.primitive];
      IF elems @> ARRAY[elem] THEN

      ELSE

        elems := elems || elem;
        -- TODO: consider use a single INSERT statement for the whole thing
        sql := 'INSERT INTO ' || quote_ident(atopology)
            || '.relation(topogeo_id, layer_id, element_type, element_id) VALUES ('
            || rec.id || ',' || rec.lyr || ',' || rec.dims+1
            || ',' || rec2.primitive || ')'
            -- NOTE: we're avoiding duplicated rows here
            || ' EXCEPT SELECT ' || rec.id || ', ' || rec.lyr
            || ', element_type, element_id FROM '
            || quote_ident(topology_info.name)
            || '.relation WHERE layer_id = ' || rec.lyr
            || ' AND topogeo_id = ' || rec.id;

        EXECUTE sql;
      END IF;
    END LOOP;
  END LOOP;
  RETURN tg;
END
$function$
CREATE OR REPLACE FUNCTION topology.totopogeom(ageom geometry, atopology character varying, alayer integer, atolerance double precision DEFAULT 0)
 RETURNS topogeometry
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  layer_info RECORD;
  topology_info RECORD;
  rec RECORD;
  rec2 RECORD;
  tg topology.TopoGeometry;
  elems INT[][];
  elem INT[];
  sql TEXT;
  typ TEXT;
BEGIN
  -- Get topology information
  BEGIN
    SELECT *
    FROM topology.topology
      INTO STRICT topology_info WHERE name = atopology;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'No topology with name "%" in topology.topology',
        atopology;
  END;
  -- Get layer information
  BEGIN
    SELECT *, CASE
      WHEN feature_type = 1 THEN 'puntal'
      WHEN feature_type = 2 THEN 'lineal'
      WHEN feature_type = 3 THEN 'areal'
      WHEN feature_type = 4 THEN 'mixed'
      ELSE 'unexpected_'||feature_type
      END as typename
    FROM topology.layer l
      INTO STRICT layer_info
      WHERE l.layer_id = alayer
      AND l.topology_id = topology_info.id;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RAISE EXCEPTION 'No layer with id "%" in topology "%"',
        alayer, atopology;
  END;
  -- Can't convert to a hierarchical topogeometry
  IF layer_info.level > 0 THEN
      RAISE EXCEPTION 'Layer "%" of topology "%" is hierarchical, cannot convert to it.',
        alayer, atopology;
  END IF;

  -- 
  -- Check type compatibility and create empty TopoGeometry
  -- 1:puntal, 2:lineal, 3:areal, 4:collection
  --
  typ = geometrytype(ageom);
  IF typ = 'GEOMETRYCOLLECTION' THEN
    --  A collection can only go collection layer
    IF layer_info.feature_type != 4 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold a collection feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg := topology.CreateTopoGeom(atopology, 4, alayer);
  ELSIF typ = 'POINT' OR typ = 'MULTIPOINT' THEN -- puntal
    --  A point can go in puntal or collection layer
    IF layer_info.feature_type != 4 and layer_info.feature_type != 1 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold a puntal feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg := topology.CreateTopoGeom(atopology, 1, alayer);
  ELSIF typ = 'LINESTRING' or typ = 'MULTILINESTRING' THEN -- lineal
    --  A line can go in lineal or collection layer
    IF layer_info.feature_type != 4 and layer_info.feature_type != 2 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold a lineal feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg := topology.CreateTopoGeom(atopology, 2, alayer);
  ELSIF typ = 'POLYGON' OR typ = 'MULTIPOLYGON' THEN -- areal
    --  An area can go in areal or collection layer
    IF layer_info.feature_type != 4 and layer_info.feature_type != 3 THEN
      RAISE EXCEPTION
        'Layer "%" of topology "%" is %, cannot hold an areal feature.',
        layer_info.layer_id, topology_info.name, layer_info.typename;
    END IF;
    tg := topology.CreateTopoGeom(atopology, 3, alayer);
  ELSE
      -- Should never happen
      RAISE EXCEPTION
        'Unsupported feature type %', typ;
  END IF;
  tg := topology.toTopoGeom(ageom, tg, atolerance);
  RETURN tg;
END
$function$
]]></string>
			<comment><![CDATA[args: geom, toponame, layer_id, tolerance - Converts a simple Geometry into a topo geometry]]></comment>
		</function>
		<function name="totopogeom_001" id="Function_1d00d173" isSystem="false" >
			<comment><![CDATA[args: geom, topogeom, tolerance - Converts a simple Geometry into a topo geometry]]></comment>
		</function>
		<function name="validatetopology" id="Function_1636dba0" isSystem="false" >
			<string><![CDATA[CREATE OR REPLACE FUNCTION topology.validatetopology(toponame character varying)
 RETURNS SETOF validatetopology_returntype
 LANGUAGE plpgsql
 STRICT
AS $function$
DECLARE
  retrec topology.ValidateTopology_ReturnType;
  rec RECORD;
  rec2 RECORD;
  i integer;
  invalid_edges integer[];
  invalid_faces integer[];
  sql text;
BEGIN
  -- Check for coincident nodes
  FOR rec IN EXECUTE 'SELECT a.node_id as id1, b.node_id as id2 FROM '
    || quote_ident(toponame) || '.node a, '
    || quote_ident(toponame) || '.node b '
    || 'WHERE a.node_id < b.node_id '
    || ' AND ST_DWithin(a.geom, b.geom, 0)' -- NOTE: see #1625 and #1789
  LOOP
    retrec.error = 'coincident nodes';
    retrec.id1 = rec.id1;
    retrec.id2 = rec.id2;
    RETURN NEXT retrec;
  END LOOP;
  -- Check for edge crossed nodes
  -- TODO: do this in the single edge loop
  FOR rec IN EXECUTE 'SELECT n.node_id as id1, e.edge_id as id2 FROM '
    || quote_ident(toponame) || '.node n, '
    || quote_ident(toponame) || '.edge e '
    || 'WHERE e.start_node != n.node_id '
    || 'AND e.end_node != n.node_id '
    || 'AND ST_Within(n.geom, e.geom)'
  LOOP
    retrec.error = 'edge crosses node';
    retrec.id1 = rec.id1;
    retrec.id2 = rec.id2;
    RETURN NEXT retrec;
  END LOOP;
  -- Scan all edges 
  FOR rec IN EXECUTE 'SELECT e.geom, e.edge_id as id1, e.left_face, e.right_face FROM '
    || quote_ident(toponame) || '.edge e ORDER BY edge_id'
  LOOP
    -- Any invalid edge becomes a cancer for higher level complexes
    IF NOT ST_IsValid(rec.geom) THEN
      retrec.error = 'invalid edge';
      retrec.id1 = rec.id1;
      retrec.id2 = NULL;
      RETURN NEXT retrec;
      invalid_edges := array_append(invalid_edges, rec.id1);
      IF invalid_faces IS NULL OR NOT rec.left_face = ANY ( invalid_faces )
      THEN
        invalid_faces := array_append(invalid_faces, rec.left_face);
      END IF;
      IF rec.right_face != rec.left_face AND ( invalid_faces IS NULL OR
            NOT rec.right_face = ANY ( invalid_faces ) )
      THEN
        invalid_faces := array_append(invalid_faces, rec.right_face);
      END IF;
      CONTINUE;
    END IF;
    IF NOT ST_IsSimple(rec.geom) THEN
      retrec.error = 'edge not simple';
      retrec.id1 = rec.id1;
      retrec.id2 = NULL;
      RETURN NEXT retrec;
    END IF;
  END LOOP;
  -- Check for edge crossing
  sql := 'SELECT e1.edge_id as id1, e2.edge_id as id2, '
    || ' e1.geom as g1, e2.geom as g2, '
    || 'ST_Relate(e1.geom, e2.geom) as im FROM '
    || quote_ident(toponame) || '.edge e1, '
    || quote_ident(toponame) || '.edge e2 '
    || 'WHERE e1.edge_id < e2.edge_id '
    || ' AND e1.geom && e2.geom ';
  IF invalid_edges IS NOT NULL THEN
    sql := sql || ' AND NOT e1.edge_id = ANY ('
               || quote_literal(invalid_edges) || ')'
               || ' AND NOT e2.edge_id = ANY ('
               || quote_literal(invalid_edges) || ')';
  END IF;
  FOR rec IN EXECUTE sql
  LOOP
    IF ST_RelateMatch(rec.im, 'FF1F**1*2') THEN
      CONTINUE; -- no interior intersection
    END IF;
    --
    -- Closed lines have no boundary, so endpoint
    -- intersection would be considered interior
    -- See http://trac.osgeo.org/postgis/ticket/770
    -- See also full explanation in topology.AddEdge
    --
    IF ST_RelateMatch(rec.im, 'FF10F01F2') THEN
      -- first line (g1) is open, second (g2) is closed
      -- first boundary has puntual intersection with second interior
      --
      -- compute intersection, check it equals second endpoint
      IF ST_Equals(ST_Intersection(rec.g2, rec.g1),
                   ST_StartPoint(rec.g2))
      THEN
        CONTINUE;
      END IF;
    END IF;
    IF ST_RelateMatch(rec.im, 'F01FFF102') THEN
      -- second line (g2) is open, first (g1) is closed
      -- second boundary has puntual intersection with first interior
      -- 
      -- compute intersection, check it equals first endpoint
      IF ST_Equals(ST_Intersection(rec.g2, rec.g1),
                   ST_StartPoint(rec.g1))
      THEN
        CONTINUE;
      END IF;
    END IF;
    IF ST_RelateMatch(rec.im, '0F1FFF1F2') THEN
      -- both lines are closed (boundary intersects nothing)
      -- they have puntual intersection between interiors
      -- 
      -- compute intersection, check it's a single point
      -- and equals first StartPoint _and_ second StartPoint
      IF ST_Equals(ST_Intersection(rec.g1, rec.g2),
                   ST_StartPoint(rec.g1)) AND
         ST_Equals(ST_StartPoint(rec.g1), ST_StartPoint(rec.g2))
      THEN
        CONTINUE;
      END IF;
    END IF;
    retrec.error = 'edge crosses edge';
    retrec.id1 = rec.id1;
    retrec.id2 = rec.id2;
    RETURN NEXT retrec;
  END LOOP;
  -- Check for edge start_node geometry mis-match
  -- TODO: move this in the first edge table scan 
  FOR rec IN EXECUTE 'SELECT e.edge_id as id1, n.node_id as id2 FROM '
    || quote_ident(toponame) || '.edge e, '
    || quote_ident(toponame) || '.node n '
    || 'WHERE e.start_node = n.node_id '
    || 'AND NOT ST_Equals(ST_StartPoint(e.geom), n.geom)'
  LOOP
    retrec.error = 'edge start node geometry mis-match';
    retrec.id1 = rec.id1;
    retrec.id2 = rec.id2;
    RETURN NEXT retrec;
  END LOOP;
  -- Check for edge end_node geometry mis-match
  -- TODO: move this in the first edge table scan 
  FOR rec IN EXECUTE 'SELECT e.edge_id as id1, n.node_id as id2 FROM '
    || quote_ident(toponame) || '.edge e, '
    || quote_ident(toponame) || '.node n '
    || 'WHERE e.end_node = n.node_id '
    || 'AND NOT ST_Equals(ST_EndPoint(e.geom), n.geom)'
  LOOP
    retrec.error = 'edge end node geometry mis-match';
    retrec.id1 = rec.id1;
    retrec.id2 = rec.id2;
    RETURN NEXT retrec;
  END LOOP;
  -- Check for faces w/out edges
  FOR rec IN EXECUTE 'SELECT face_id as id1 FROM '
    || quote_ident(toponame) || '.face '
    || 'WHERE face_id > 0 EXCEPT ( SELECT left_face FROM '
    || quote_ident(toponame) || '.edge '
    || ' UNION SELECT right_face FROM '
    || quote_ident(toponame) || '.edge '
    || ')'
  LOOP
    retrec.error = 'face without edges';
    retrec.id1 = rec.id1;
    retrec.id2 = NULL;
    RETURN NEXT retrec;
  END LOOP;
  -- Now create a temporary table to construct all face geometries
  -- for checking their consistency
  sql := 'CREATE TEMP TABLE face_check ON COMMIT DROP AS '
    || 'SELECT face_id, topology.ST_GetFaceGeometry('
    || quote_literal(toponame) || ', face_id) as geom, mbr FROM '
    || quote_ident(toponame) || '.face WHERE face_id > 0';
  IF invalid_faces IS NOT NULL THEN
    sql := sql || ' AND NOT face_id = ANY ('
               || quote_literal(invalid_faces) || ')';
  END IF;
  EXECUTE sql;
  -- Build a gist index on geom
  EXECUTE 'CREATE INDEX "face_check_gist" ON '
    || 'face_check USING gist (geom);';
  -- Build a btree index on id
  EXECUTE 'CREATE INDEX "face_check_bt" ON ' 
    || 'face_check (face_id);';
  -- Scan the table looking for NULL geometries
  FOR rec IN EXECUTE
    'SELECT f1.face_id FROM '
    || 'face_check f1 WHERE f1.geom IS NULL'
  LOOP
    -- Face missing !
    retrec.error := 'face has no rings';
    retrec.id1 := rec.face_id;
    retrec.id2 := NULL;
    RETURN NEXT retrec;
  END LOOP;

  -- Scan the table looking for overlap or containment
  -- TODO: also check for MBR consistency
  FOR rec IN EXECUTE
    'SELECT f1.geom, f1.face_id as id1, f2.face_id as id2, '
    || ' ST_Relate(f1.geom, f2.geom) as im'
    || ' FROM '
    || 'face_check f1, '
    || 'face_check f2 '
    || 'WHERE f1.face_id < f2.face_id'
    || ' AND f1.geom && f2.geom'
  LOOP
    -- Face overlap
    IF ST_RelateMatch(rec.im, 'T*T***T**') THEN
    retrec.error = 'face overlaps face';
    retrec.id1 = rec.id1;
    retrec.id2 = rec.id2;
    RETURN NEXT retrec;
    END IF;
    -- Face 1 is within face 2 
    IF ST_RelateMatch(rec.im, 'T*F**F***') THEN
    retrec.error = 'face within face';
    retrec.id1 = rec.id1;
    retrec.id2 = rec.id2;
    RETURN NEXT retrec;
    END IF;
    -- Face 1 contains face 2
    IF ST_RelateMatch(rec.im, 'T*****FF*') THEN
    retrec.error = 'face within face';
    retrec.id1 = rec.id2;
    retrec.id2 = rec.id1;
    RETURN NEXT retrec;
    END IF;
  END LOOP;

  DROP TABLE face_check;
  RETURN;
END
$function$
]]></string>
			<comment><![CDATA[args: topology_schema_name - Returns a set of validatetopology_returntype objects detailing issues with topology]]></comment>
		</function>
	</schema>
	<connector name="PostgreSQL" database="PostgreSQL" driver_class="org.postgresql.Driver" driver_jar="postgresql-9.4-1200.jdbc4.jar" host="localhost" port="5432" instance="census" user="paulb" schema_mapping="" />
	<layout id="Layout_3574d113" name="public" show_relation_columns="y" >
		<entity schema="public" name="spatial_ref_sys" color="bfd4f5" x="255" y="210" />
		<entity schema="public" name="geography_columns" color="bfd4f5" x="435" y="390" />
		<entity schema="public" name="geometry_columns" color="bfd4f5" x="45" y="390" />
		<entity schema="public" name="raster_columns" color="bfd4f5" x="435" y="45" />
		<entity schema="public" name="raster_overviews" color="bfd4f5" x="255" y="390" />
	</layout>
	<layout id="Layout_3496b3c0" name="tiger" show_relation_columns="y" >
		<entity schema="tiger" name="addr" color="f5ddbf" x="1395" y="705" />
		<entity schema="tiger" name="addrfeat" color="f5ddbf" x="1230" y="1020" />
		<entity schema="tiger" name="bg" color="c8f5bf" x="465" y="990" />
		<entity schema="tiger" name="county" color="bfd4f5" x="1020" y="705" />
		<entity schema="tiger" name="county_lookup" color="bfd4f5" x="810" y="930" />
		<entity schema="tiger" name="countysub_lookup" color="bfd4f5" x="1020" y="1095" />
		<entity schema="tiger" name="cousub" color="bfd4f5" x="1020" y="1410" />
		<entity schema="tiger" name="direction_lookup" color="bfd4f5" x="645" y="1095" />
		<entity schema="tiger" name="edges" color="c8f5bf" x="60" y="705" />
		<entity schema="tiger" name="faces" color="c8f5bf" x="225" y="1185" >
			<column name="gid" />
		</entity>
		<entity schema="tiger" name="featnames" color="c8f5bf" x="465" y="1305" />
		<entity schema="tiger" name="geocode_settings" color="c8f5bf" x="45" y="1305" />
		<entity schema="tiger" name="loader_lookuptables" color="bfd4f5" x="810" y="1095" />
		<entity schema="tiger" name="loader_platform" color="c8f5bf" x="225" y="1305" />
		<entity schema="tiger" name="loader_variables" color="f5ddbf" x="1545" y="840" />
		<entity schema="tiger" name="pagc_gaz" color="f5ddbf" x="1695" y="1020" />
		<entity schema="tiger" name="pagc_lex" color="f5ddbf" x="1395" y="1020" />
		<entity schema="tiger" name="pagc_rules" color="f5ddbf" x="1545" y="1020" />
		<entity schema="tiger" name="place" color="bfd4f5" x="1365" y="1860" />
		<entity schema="tiger" name="place_lookup" color="bfbff5" x="960" y="330" />
		<entity schema="tiger" name="secondary_unit_lookup" color="bfbff5" x="810" y="45" />
		<entity schema="tiger" name="state" color="bfd4f5" x="1515" y="1920" />
		<entity schema="tiger" name="state_lookup" color="bfbff5" x="960" y="495" />
		<entity schema="tiger" name="street_type_lookup" color="bfbff5" x="960" y="180" />
		<entity schema="tiger" name="tabblock" color="bfbff5" x="645" y="180" />
		<entity schema="tiger" name="tract" color="bfbff5" x="810" y="180" />
		<entity schema="tiger" name="zcta5" color="bfd4f5" x="1515" y="2250" />
		<entity schema="tiger" name="zip_lookup" color="d2bff5" x="1230" y="405" />
		<entity schema="tiger" name="zip_lookup_all" color="d2bff5" x="1530" y="405" />
		<entity schema="tiger" name="zip_lookup_base" color="d2bff5" x="1365" y="405" />
		<entity schema="tiger" name="zip_state" color="bfd4f5" x="1230" y="2250" />
		<entity schema="tiger" name="zip_state_loc" color="bfd4f5" x="1365" y="2250" />
	</layout>
	<layout id="Layout_2348fec0" name="tiger_data" show_relation_columns="y" >
		<entity schema="tiger_data" name="county_all" color="f5ddbf" x="1365" y="210" />
		<entity schema="tiger_data" name="county_all_lookup" color="f5ddbf" x="1215" y="45" />
		<entity schema="tiger_data" name="mo_addr" color="bfd4f5" x="855" y="45" />
		<entity schema="tiger_data" name="mo_bg" color="bfd4f5" x="705" y="45" />
		<entity schema="tiger_data" name="mo_cousub" color="bfd4f5" x="855" y="360" />
		<entity schema="tiger_data" name="mo_edges" color="bfd4f5" x="855" y="765" />
		<entity schema="tiger_data" name="mo_faces" color="bfd4f5" x="570" y="360" >
			<column name="gid" />
		</entity>
		<entity schema="tiger_data" name="mo_featnames" color="bfd4f5" x="705" y="360" />
		<entity schema="tiger_data" name="mo_place" color="c8f5bf" x="90" y="45" />
		<entity schema="tiger_data" name="mo_tabblock" color="c8f5bf" x="240" y="90" />
		<entity schema="tiger_data" name="mo_tract" color="c8f5bf" x="240" y="585" />
		<entity schema="tiger_data" name="mo_zcta5" color="c8f5bf" x="390" y="435" />
		<entity schema="tiger_data" name="mo_zip_lookup_base" color="c8f5bf" x="45" y="435" />
		<entity schema="tiger_data" name="mo_zip_state" color="c8f5bf" x="240" y="435" />
		<entity schema="tiger_data" name="mo_zip_state_loc" color="f5ddbf" x="1050" y="210" />
		<entity schema="tiger_data" name="state_all" color="f5ddbf" x="1215" y="210" />
	</layout>
	<layout id="Layout_37038a8e" name="topology" show_relation_columns="y" >
		<entity schema="topology" name="layer" color="bfd4f5" x="195" y="45" />
		<entity schema="topology" name="topology" color="bfd4f5" x="45" y="45" />
	</layout>
</project>